<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>你们威哥的博客</title>
  
  <subtitle>简书博客地址 https://www.jianshu.com/u/a94f887f8776</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://aronligithub.github.io/"/>
  <updated>2018-08-13T04:39:49.610Z</updated>
  <id>https://aronligithub.github.io/</id>
  
  <author>
    <name>你们的威哥</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>etcd单台部署，启用https以及ca自签名</title>
    <link href="https://aronligithub.github.io/2018/08/13/etcd%E5%8D%95%E5%8F%B0%E9%83%A8%E7%BD%B2%EF%BC%8C%E5%90%AF%E7%94%A8https%E4%BB%A5%E5%8F%8Aca%E8%87%AA%E7%AD%BE%E5%90%8D/"/>
    <id>https://aronligithub.github.io/2018/08/13/etcd单台部署，启用https以及ca自签名/</id>
    <published>2018-08-12T16:48:22.000Z</published>
    <updated>2018-08-13T04:39:49.610Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>#原创内容，转载请注明出处</p></blockquote><p>博主地址：<a href="https://aronligithub.github.io/">https://aronligithub.github.io/</a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p><strong><em>在经过上一篇章关于<a href="https://www.jianshu.com/p/e52f9204b7a9" target="_blank" rel="noopener">etcd相关技术概述的铺垫</a>,这个篇章就是介绍以及演示单台etcd部署以及使用CFSSL来生成CA证书</em></strong><br><img src="https://upload-images.jianshu.io/upload_images/13423234-cc71b29110c4dfdd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br><img src="https://upload-images.jianshu.io/upload_images/13423234-869e0c6cafd7cb22.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p></blockquote><a id="more"></a><h2 id="环境要求"><a href="#环境要求" class="headerlink" title="环境要求"></a>环境要求</h2><blockquote><p>1、一台安装centos7的服务器<br>   2、具备访问互联网</p></blockquote><h2 id="3、关闭服务器的防火墙以及selinux"><a href="#3、关闭服务器的防火墙以及selinux" class="headerlink" title="   3、关闭服务器的防火墙以及selinux"></a>   3、关闭服务器的防火墙以及selinux</h2><h2 id="CFSSL工具的安装"><a href="#CFSSL工具的安装" class="headerlink" title="CFSSL工具的安装"></a>CFSSL工具的安装</h2><blockquote><p>下载CFSSL的可执行二进制文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wget https://pkg.cfssl.org/R1.2/cfssl_linux-amd64 </span><br><span class="line">wget https://pkg.cfssl.org/R1.2/cfssljson_linux-amd64 </span><br><span class="line">wget https://pkg.cfssl.org/R1.2/cfssl-certinfo_linux-amd64</span><br><span class="line">chmod +x cfssl*</span><br></pre></td></tr></table></figure></p></blockquote><h4 id="下载执行过程截图如下"><a href="#下载执行过程截图如下" class="headerlink" title="下载执行过程截图如下"></a>下载执行过程截图如下</h4><blockquote><p><img src="https://upload-images.jianshu.io/upload_images/13423234-0417209515272faf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="安装wget工具"><br><img src="https://upload-images.jianshu.io/upload_images/13423234-a468ec85ee2a0361.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="下载文件的过程"></p></blockquote><h2 id=""><a href="#" class="headerlink" title=""></a><img src="https://upload-images.jianshu.io/upload_images/13423234-4f2f93fec52331c1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="给文件添加执行权限"></h2><blockquote><p>将这三个二进制可执行文件，修改名称复制到/usr/local/bin/下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cp -v cfssl_linux-amd64 /usr/local/bin/cfssl</span><br><span class="line">cp -v cfssljson_linux-amd64 /usr/local/bin/cfssljson</span><br><span class="line">cp -v cfssl-certinfo_linux-amd64 /usr/local/bin/cfssl-certinfo</span><br><span class="line">ls /usr/local/bin/cfssl*</span><br></pre></td></tr></table></figure></p></blockquote><h4 id="下载执行过程截图如下-1"><a href="#下载执行过程截图如下-1" class="headerlink" title="下载执行过程截图如下"></a>下载执行过程截图如下</h4><blockquote><p><img src="https://upload-images.jianshu.io/upload_images/13423234-a40624bce96e4c26.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="复制可执行文件至指定目录"></p></blockquote><hr><h2 id="使用CFSSL创建CA证书以及etcd的TLS认证证书"><a href="#使用CFSSL创建CA证书以及etcd的TLS认证证书" class="headerlink" title="使用CFSSL创建CA证书以及etcd的TLS认证证书"></a>使用CFSSL创建CA证书以及etcd的TLS认证证书</h2><blockquote><p>创建 CA (Certificate Authority)</p></blockquote><hr><blockquote><p>   创建 CA 配置文件（ca-config.json）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[root@server81 cfssl]# vim ca-config.json</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;signing&quot;: &#123;</span><br><span class="line">    &quot;default&quot;: &#123;</span><br><span class="line">      &quot;expiry&quot;: &quot;876000h&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;profiles&quot;: &#123;</span><br><span class="line">      &quot;etcd&quot;: &#123;</span><br><span class="line">        &quot;usages&quot;: [</span><br><span class="line">            &quot;signing&quot;,</span><br><span class="line">            &quot;key encipherment&quot;,</span><br><span class="line">            &quot;server auth&quot;,</span><br><span class="line">            &quot;client auth&quot;</span><br><span class="line">        ],</span><br><span class="line">        &quot;expiry&quot;: &quot;876000h&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p><img src="https://upload-images.jianshu.io/upload_images/13423234-3cc0b489b3e70106.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="创建CA配置文件"></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&quot;字段说明&quot;</span><br><span class="line">&quot;ca-config.json&quot;：可以定义多个 profiles，分别指定不同的过期时间、使用场景等参数；后续在签名证书时使用某个 profile；</span><br><span class="line">&quot;signing&quot;：表示该证书可用于签名其它证书；生成的 ca.pem 证书中 CA=TRUE；</span><br><span class="line">&quot;server auth&quot;：表示client可以用该 CA 对server提供的证书进行验证；</span><br><span class="line">&quot;client auth&quot;：表示server可以用该CA对client提供的证书进行验证；</span><br></pre></td></tr></table></figure><hr><blockquote><h4 id="创建-CA-证书签名请求（ca-csr-json）"><a href="#创建-CA-证书签名请求（ca-csr-json）" class="headerlink" title="创建 CA 证书签名请求（ca-csr.json）"></a>创建 CA 证书签名请求（ca-csr.json）</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[root@server81 cfssl]# vim ca-csr.json</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;CN&quot;: &quot;etcd&quot;,</span><br><span class="line">  &quot;key&quot;: &#123;</span><br><span class="line">    &quot;algo&quot;: &quot;rsa&quot;,</span><br><span class="line">    &quot;size&quot;: 2048</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;names&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;C&quot;: &quot;CN&quot;,</span><br><span class="line">      &quot;ST&quot;: &quot;shenzhen&quot;,</span><br><span class="line">      &quot;L&quot;: &quot;shenzhen&quot;,</span><br><span class="line">      &quot;O&quot;: &quot;etcd&quot;,</span><br><span class="line">      &quot;OU&quot;: &quot;System&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p><img src="https://upload-images.jianshu.io/upload_images/13423234-360e39eb81e9b3c7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="创建CA签名请求"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot;CN&quot;：Common Name，etcd 从证书中提取该字段作为请求的用户名 (User Name)；浏览器使用该字段验证网站是否合法；</span><br><span class="line">&quot;O&quot;：Organization，etcd 从证书中提取该字段作为请求用户所属的组 (Group)；</span><br><span class="line">这两个参数在后面的kubernetes启用RBAC模式中很重要，因为需要设置kubelet、admin等角色权限，那么在配置证书的时候就必须配置对了，具体后面在部署kubernetes的时候会进行讲解。</span><br><span class="line">&quot;在etcd这两个参数没太大的重要意义，跟着配置就好。&quot;</span><br></pre></td></tr></table></figure></p></blockquote><hr><blockquote><h4 id="生成-CA-证书和私钥"><a href="#生成-CA-证书和私钥" class="headerlink" title="生成 CA 证书和私钥"></a>生成 CA 证书和私钥</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cfssl gencert -initca ca-csr.json | cfssljson -bare ca</span><br></pre></td></tr></table></figure></blockquote><blockquote><p><img src="https://upload-images.jianshu.io/upload_images/13423234-d1e08a8f47b6df94.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="ca根证书的生成过程"></p></blockquote><hr><h2 id="创建etcd的TLS认证证书"><a href="#创建etcd的TLS认证证书" class="headerlink" title="创建etcd的TLS认证证书"></a>创建etcd的TLS认证证书</h2><blockquote><p>创建 etcd证书签名请求（etcd-csr.json）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[root@server81 cfssl]# vim etcd-csr.json</span><br><span class="line">&#123;</span><br><span class="line">  &quot;CN&quot;: &quot;etcd&quot;,</span><br><span class="line">  &quot;hosts&quot;: [</span><br><span class="line">    &quot;127.0.0.1&quot;,</span><br><span class="line">    &quot;172.16.5.81&quot;</span><br><span class="line">  ],</span><br><span class="line">  &quot;key&quot;: &#123;</span><br><span class="line">    &quot;algo&quot;: &quot;rsa&quot;,</span><br><span class="line">    &quot;size&quot;: 2048</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;names&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;C&quot;: &quot;CN&quot;,</span><br><span class="line">      &quot;ST&quot;: &quot;shenzhen&quot;,</span><br><span class="line">      &quot;L&quot;: &quot;shenzhen&quot;,</span><br><span class="line">      &quot;O&quot;: &quot;etcd&quot;,</span><br><span class="line">      &quot;OU&quot;: &quot;System&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p><img src="https://upload-images.jianshu.io/upload_images/13423234-ab797365fdb833ab.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="创建etcd证书签名请求"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[^_^]:</span><br><span class="line">       如果 hosts 字段不为空则需要指定授权使用该证书的 IP 或域名列表，由于该证书后续被 etcd 集群使用，所以填写IP即可。</span><br><span class="line">[&gt;_&lt;]:</span><br><span class="line">       因为本次部署etcd是单台，那么则需要填写单台的IP地址即可。</span><br></pre></td></tr></table></figure></p></blockquote><hr><blockquote><p>生成 etcd证书和私钥<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@server81 cfssl]# cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=etcd etcd-csr.json | cfssljson -bare etcd</span><br><span class="line">[root@server81 cfssl]# ls etcd*</span><br><span class="line">etcd.csr  etcd-csr.json  etcd-key.pem  etcd.pem</span><br><span class="line">[root@server81 cfssl]#</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p><img src="https://upload-images.jianshu.io/upload_images/13423234-e07f2d7581b666bb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="生成etcd证书以及私钥"></p></blockquote><hr><h2 id="将TLS-认证文件拷贝至证书目录下"><a href="#将TLS-认证文件拷贝至证书目录下" class="headerlink" title="将TLS 认证文件拷贝至证书目录下"></a>将TLS 认证文件拷贝至证书目录下</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /etc/etcd/etcdSSL</span><br><span class="line">cp * /etc/etcd/etcdSSL</span><br><span class="line"></span><br><span class="line">[^_^]:</span><br><span class="line">     存在CA证书的路径&quot;/etc/etcd/etcdSSL&quot;是自定义的，看个人习惯创建即可。</span><br></pre></td></tr></table></figure><blockquote><p><img src="https://upload-images.jianshu.io/upload_images/13423234-92a0162b5eb1258a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p></blockquote><hr><h2 id="安装etcd服务"><a href="#安装etcd服务" class="headerlink" title="安装etcd服务"></a>安装etcd服务</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y etcd</span><br></pre></td></tr></table></figure><blockquote><p><img src="https://upload-images.jianshu.io/upload_images/13423234-6777bf5c0d01c714.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="yum安装etcd"></p></blockquote><hr><blockquote><p>配置 etcd 的 service文件（/usr/lib/systemd/system）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">[root@server81 cfssl]# vim /usr/lib/systemd/system/etcd.service </span><br><span class="line"></span><br><span class="line">[Unit]</span><br><span class="line">Description=Etcd Server</span><br><span class="line">After=network.target</span><br><span class="line">After=network-online.target</span><br><span class="line">Wants=network-online.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=notify</span><br><span class="line">WorkingDirectory=/var/lib/etcd/</span><br><span class="line">EnvironmentFile=-/etc/etcd/etcd.conf</span><br><span class="line"># set GOMAXPROCS to number of processors</span><br><span class="line">ExecStart=/usr/bin/etcd \</span><br><span class="line">  --name $&#123;ETCD_NAME&#125; \</span><br><span class="line">  --cert-file=/etc/etcd/etcdSSL/etcd.pem \</span><br><span class="line">  --key-file=/etc/etcd/etcdSSL/etcd-key.pem \</span><br><span class="line">  --peer-cert-file=/etc/etcd/etcdSSL/etcd.pem \</span><br><span class="line">  --peer-key-file=/etc/etcd/etcdSSL/etcd-key.pem \</span><br><span class="line">  --trusted-ca-file=/etc/etcd/etcdSSL/ca.pem \</span><br><span class="line">  --peer-trusted-ca-file=/etc/etcd/etcdSSL/ca.pem \</span><br><span class="line">  --initial-advertise-peer-urls $&#123;ETCD_INITIAL_ADVERTISE_PEER_URLS&#125; \</span><br><span class="line">  --listen-peer-urls $&#123;ETCD_LISTEN_PEER_URLS&#125; \</span><br><span class="line">  --listen-client-urls $&#123;ETCD_LISTEN_CLIENT_URLS&#125;,http://127.0.0.1:2379 \</span><br><span class="line">  --advertise-client-urls $&#123;ETCD_ADVERTISE_CLIENT_URLS&#125; \</span><br><span class="line">  --initial-cluster-token $&#123;ETCD_INITIAL_CLUSTER_TOKEN&#125; \</span><br><span class="line">  --initial-cluster infra1=https://172.16.5.81:2380 \</span><br><span class="line">  --initial-cluster-state new \</span><br><span class="line">  --data-dir=$&#123;ETCD_DATA_DIR&#125;</span><br><span class="line"></span><br><span class="line">Restart=on-failure</span><br><span class="line">LimitNOFILE=65536</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p><img src="https://upload-images.jianshu.io/upload_images/13423234-0095d1ace42b3f54.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="配置etcd的service文件"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">参数说明：</span><br><span class="line">1、指定 etcd 的工作目录为 /var/lib/etcd，数据目录为 /var/lib/etcd，需在启动服务前创建这两个目录；</span><br><span class="line">在配置中的命令是这条：</span><br><span class="line">WorkingDirectory=/var/lib/etcd/</span><br><span class="line"></span><br><span class="line">2、为了保证通信安全，需要指定 etcd 的公私钥(cert-file和key-file)、Peers 通信的公私钥和 CA 证书(peer-cert-file、peer-key-file、peer-trusted-ca-file)、客户端的CA证书（trusted-ca-file）；</span><br><span class="line">在配置中添加etcd证书的命令是以下：</span><br><span class="line">  --cert-file=/etc/etcd/etcdSSL/etcd.pem \</span><br><span class="line">  --key-file=/etc/etcd/etcdSSL/etcd-key.pem \</span><br><span class="line">  --peer-cert-file=/etc/etcd/etcdSSL/etcd.pem \</span><br><span class="line">  --peer-key-file=/etc/etcd/etcdSSL/etcd-key.pem \</span><br><span class="line">  --trusted-ca-file=/etc/etcd/etcdSSL/ca.pem \</span><br><span class="line">  --peer-trusted-ca-file=/etc/etcd/etcdSSL/ca.pem \</span><br><span class="line"></span><br><span class="line">3、配置etcd的endpoint：</span><br><span class="line">  --initial-cluster infra1=https://172.16.5.81:2380 \</span><br><span class="line"></span><br><span class="line">4、配置etcd的监听服务集群：</span><br><span class="line">  --initial-advertise-peer-urls $&#123;ETCD_INITIAL_ADVERTISE_PEER_URLS&#125; \</span><br><span class="line">  --listen-peer-urls $&#123;ETCD_LISTEN_PEER_URLS&#125; \</span><br><span class="line">  --listen-client-urls $&#123;ETCD_LISTEN_CLIENT_URLS&#125;,http://127.0.0.1:2379 \</span><br><span class="line">  --advertise-client-urls $&#123;ETCD_ADVERTISE_CLIENT_URLS&#125; \</span><br><span class="line"></span><br><span class="line">5、配置etcd创建的集群为新集群，则定义集群状态为new</span><br><span class="line">   --initial-cluster-state 值为 new</span><br><span class="line"></span><br><span class="line">6、定义etcd节点的名称，该名称等下从配置文件中获取：</span><br><span class="line">  --name $&#123;ETCD_NAME&#125; \ </span><br><span class="line">  其中配置文件：EnvironmentFile=-/etc/etcd/etcd.conf</span><br></pre></td></tr></table></figure></p></blockquote><hr><blockquote><p>etcd的配置文件（/etc/etcd/etcd.conf）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@server81 cfssl]# vim /etc/etcd/etcd.conf</span><br><span class="line"></span><br><span class="line">#[member]</span><br><span class="line">ETCD_NAME=infra1</span><br><span class="line">ETCD_DATA_DIR=&quot;/var/lib/etcd&quot;</span><br><span class="line">ETCD_LISTEN_PEER_URLS=&quot;https://172.16.5.81:2380&quot;</span><br><span class="line">ETCD_LISTEN_CLIENT_URLS=&quot;https://172.16.5.81:2379&quot;</span><br><span class="line"></span><br><span class="line">#[cluster]</span><br><span class="line">ETCD_INITIAL_ADVERTISE_PEER_URLS=&quot;https://172.16.5.81:2380&quot;</span><br><span class="line">ETCD_INITIAL_CLUSTER_TOKEN=&quot;etcd-cluster&quot;</span><br><span class="line">ETCD_ADVERTISE_CLIENT_URLS=&quot;https://172.16.5.81:2379&quot;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p><img src="https://upload-images.jianshu.io/upload_images/13423234-8f2659d2a2e22804.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="etcd节点的参数配置文件"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这是172.16.5.81节点的配置，如果配置其他etcd节点只要将上面的IP地址改成相应节点的IP地址即可。</span><br></pre></td></tr></table></figure></p></blockquote><hr><blockquote><p>启动 etcd 服务<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl start etcd</span><br><span class="line">systemctl status etcd</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p><img src="https://upload-images.jianshu.io/upload_images/13423234-1cb20dfab0366681.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="启动etcd服务"></p></blockquote><hr><blockquote><p>验证服务<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">etcdctl \</span><br><span class="line">  --ca-file=/etc/etcd/etcdSSL/ca.pem \</span><br><span class="line">  --cert-file=/etc/etcd/etcdSSL/etcd.pem \</span><br><span class="line">  --key-file=/etc/etcd/etcdSSL/etcd-key.pem \</span><br><span class="line">  cluster-health</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p><img src="https://upload-images.jianshu.io/upload_images/13423234-f307491c8fd51946.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="检查etcd集群健康状态"></p></blockquote><hr><h2 id="最后的总结"><a href="#最后的总结" class="headerlink" title="最后的总结"></a>最后的总结</h2><blockquote><p><strong><em>从上面的流程对于新手基本都是可以复制黏贴就可以完成的了，那么对于需要提升的朋友，在以后的篇章我会逐个加入自动化部署的写法说明，已写完的自动化部署如下图所示：</em></strong><br><img src="https://upload-images.jianshu.io/upload_images/13423234-9d38f7cd2472631e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="自动化部署脚本展示"></p></blockquote><hr><h2 id="下一个篇章则是写三台etcd的部署集群了，过程基本差不多，不过也写给朋友们看看吧。"><a href="#下一个篇章则是写三台etcd的部署集群了，过程基本差不多，不过也写给朋友们看看吧。" class="headerlink" title="下一个篇章则是写三台etcd的部署集群了，过程基本差不多，不过也写给朋友们看看吧。"></a>下一个篇章则是写三台etcd的部署集群了，过程基本差不多，不过也写给朋友们看看吧。</h2><blockquote><p>如果你想要看我写的总体系列文章目录介绍，可以点击<a href="https://www.jianshu.com/p/4a9c06ea570b" target="_blank" rel="noopener">kuberntes以及运维开发文章目录介绍</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;#原创内容，转载请注明出处&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;博主地址：&lt;a href=&quot;https://aronligithub.github.io/&quot;&gt;https://aronligithub.github.io/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;在经过上一篇章关于&lt;a href=&quot;https://www.jianshu.com/p/e52f9204b7a9&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;etcd相关技术概述的铺垫&lt;/a&gt;,这个篇章就是介绍以及演示单台etcd部署以及使用CFSSL来生成CA证书&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/13423234-cc71b29110c4dfdd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/13423234-869e0c6cafd7cb22.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="运维开发系列" scheme="https://aronligithub.github.io/categories/%E8%BF%90%E7%BB%B4%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="kubernetes系列" scheme="https://aronligithub.github.io/tags/kubernetes%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>etcd原理以及基本技术概述铺垫</title>
    <link href="https://aronligithub.github.io/2018/08/12/etcd%E5%8E%9F%E7%90%86%E4%BB%A5%E5%8F%8A%E5%9F%BA%E6%9C%AC%E6%8A%80%E6%9C%AF%E6%A6%82%E8%BF%B0%E9%93%BA%E5%9E%AB/"/>
    <id>https://aronligithub.github.io/2018/08/12/etcd原理以及基本技术概述铺垫/</id>
    <published>2018-08-12T01:00:22.000Z</published>
    <updated>2018-08-12T01:05:19.014Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>#原创内容，转载请注明出处</p></blockquote><p>博主地址：<a href="https://aronligithub.github.io/">https://aronligithub.github.io/</a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p><em>在部署kubernetes和calico网络的过程中，都需要有一个etcd数据库进行数据记录。这是部署的前置组件。</em></p></blockquote><h2 id="可以说部署etcd就是踏入使用kubernetes的第一步，那么下面就来了解一下什么是etcd？"><a href="#可以说部署etcd就是踏入使用kubernetes的第一步，那么下面就来了解一下什么是etcd？" class="headerlink" title="可以说部署etcd就是踏入使用kubernetes的第一步，那么下面就来了解一下什么是etcd？"></a><strong>可以说部署etcd就是踏入使用kubernetes的第一步，那么下面就来了解一下什么是etcd？</strong></h2><hr><a id="more"></a><h2 id="etcd的介绍"><a href="#etcd的介绍" class="headerlink" title="etcd的介绍"></a>etcd的介绍</h2><blockquote><p><em>etcd的官网</em></p></blockquote><p>作为要了解etcd这个数据库，那么<strong>第一步就是要知道从哪里去访问<a href="https://coreos.com/etcd/" target="_blank" rel="noopener">官网</a></strong>，再下一步就是<strong>如何从官网中获取自己需要的文档资料</strong>。</p><blockquote><p><img src="https://upload-images.jianshu.io/upload_images/13423234-b863190257d8501d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="etcd官网的相关信息"></p></blockquote><blockquote><p><em>etcd的特征</em><br><img src="https://upload-images.jianshu.io/upload_images/13423234-3d05fe507722fb93.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="etcd官网特征描述"></p></blockquote><hr><blockquote><p><em>etcd的技术概述</em></p></blockquote><p><strong>etcd是基于什么语言编写，通过什么算法保证数据集群同步的呢？</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">etcd是用Go编写的，它具有出色的跨平台支持，小型二进制文件和背后的优秀社区。etcd机器之间的通信通过Raft一致性算法处理。</span><br></pre></td></tr></table></figure></p><p><strong>etcd的主从集群是怎么形式的呢，例如<code>一主多从</code>，还是<code>多主多从</code>呢？</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">在etcd的集群中会选举出一位leader，其他etcd服务节点就会成为follower，在此过程其他follower会同步leader的数据。</span><br><span class="line">由于etcd集群必须能够选举出leader才能正常工作，所以部署的服务器数量必须是奇数，例如：</span><br><span class="line">1，3，5，7，9 的etcd节点数量。</span><br></pre></td></tr></table></figure></p><p><strong>如果etcd的节点数量为<code>偶数</code>会怎么样？</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">如果etcd的节点数量为偶数，例如：2，4，6，8 那么每一个节点都会收到同样的选举票数，就好像我们在班里选举班长一样，同样票数两个人是没法出leader的，谁也不服谁。</span><br><span class="line">那么这时候的结果当然就是etcd的集群无法工作了</span><br></pre></td></tr></table></figure></p><p><strong>那么如果etcd的节点数量为<code>奇数</code>，需要部署多少个节点最合适呢？</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">在考虑etcd读写效率以及稳定性的情况下，基本可以选型如下：</span><br><span class="line">只有单台或者两台服务器做kubernetes的服务集群，只需要部署一台etcd节点即可；</span><br><span class="line">只有三台或者四台服务器做kubernetes的服务集群，只需要部署三台etcd节点即可；</span><br><span class="line">只有五台或者六台服务器做kubernetes的服务集群，只需要部署五台etcd节点即可；</span><br></pre></td></tr></table></figure></p><p><strong>那么按照上面的公式推导，不就是etcd的节点越多越好？</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">其实不是越多越好，基本三台和五台服务器作为etcd的节点已经比较稳定的了。</span><br></pre></td></tr></table></figure></p><p><strong>那么如果任性就是要服务器很多呢？会出现什么样的情况？</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">如果服务器的台数越多，就可能会出现网络抖动，延时、不稳定的情况，具体视机房网络情况;</span><br><span class="line">如果服务器的台数越多，你就需要管理以及维护观察更多的服务器，在修复故障的时候需要注意更多的服务器数量；</span><br><span class="line">另外，因为etcd的集群所有的follower都需要从leader同步完数据之后，leader才能继续写入新的数据，所以如果etcd的节点数量过多，则会导致同步的时间变长、导致leader的写入效率降低</span><br></pre></td></tr></table></figure></p><p><strong>综上所述，部署etcd集群采用1，3，5，7的台数部署是比较合理的了</strong></p><blockquote><p><strong><em>下一篇章，我就开始演示单台etcd的部署以及ca证书的创建，在之后演示三台的etcd集群部署。</em></strong></p></blockquote><blockquote><p><img src="https://upload-images.jianshu.io/upload_images/13423234-1ff65c0431d6b516.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="leader会将数据同步给每个follower"></p></blockquote><blockquote><p>如果你想要看我写的总体系列文章目录介绍，可以点击<a href="https://www.jianshu.com/p/4a9c06ea570b" target="_blank" rel="noopener">kuberntes以及运维开发文章目录介绍</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;#原创内容，转载请注明出处&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;博主地址：&lt;a href=&quot;https://aronligithub.github.io/&quot;&gt;https://aronligithub.github.io/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;在部署kubernetes和calico网络的过程中，都需要有一个etcd数据库进行数据记录。这是部署的前置组件。&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;可以说部署etcd就是踏入使用kubernetes的第一步，那么下面就来了解一下什么是etcd？&quot;&gt;&lt;a href=&quot;#可以说部署etcd就是踏入使用kubernetes的第一步，那么下面就来了解一下什么是etcd？&quot; class=&quot;headerlink&quot; title=&quot;可以说部署etcd就是踏入使用kubernetes的第一步，那么下面就来了解一下什么是etcd？&quot;&gt;&lt;/a&gt;&lt;strong&gt;可以说部署etcd就是踏入使用kubernetes的第一步，那么下面就来了解一下什么是etcd？&lt;/strong&gt;&lt;/h2&gt;&lt;hr&gt;
    
    </summary>
    
      <category term="运维开发系列" scheme="https://aronligithub.github.io/categories/%E8%BF%90%E7%BB%B4%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="kubernetes系列" scheme="https://aronligithub.github.io/tags/kubernetes%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>kubernetes系列以及运维开发文章介绍</title>
    <link href="https://aronligithub.github.io/2018/08/11/kubernetes%E7%B3%BB%E5%88%97%E4%BB%A5%E5%8F%8A%E8%BF%90%E7%BB%B4%E5%BC%80%E5%8F%91%E6%96%87%E7%AB%A0%E4%BB%8B%E7%BB%8D/"/>
    <id>https://aronligithub.github.io/2018/08/11/kubernetes系列以及运维开发文章介绍/</id>
    <published>2018-08-11T15:04:22.000Z</published>
    <updated>2018-08-12T16:49:02.147Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>#原创内容，转载请注明出处</p></blockquote><p>博主地址：<a href="https://aronligithub.github.io/">https://aronligithub.github.io/</a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p> <em>kubernetes作为当前最流行的容器编排领先技术之一，如果作为运维的你不学习怎么行呢？</em><br><img src="https://upload-images.jianshu.io/upload_images/13423234-1ca8c290d56896ec.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p></blockquote><p>如果你继续往下看我后续写的博客内容可以<strong>学习到什么内容</strong>呢？</p><a id="more"></a><blockquote><p><em>etcd 系列</em></p><ul><li><a href="https://www.jianshu.com/p/e52f9204b7a9" target="_blank" rel="noopener">etcd原理以及基本技术概述铺垫</a></li><li><a href="https://www.jianshu.com/p/0fc3c5e78eff" target="_blank" rel="noopener">etcd单台部署，启用https以及ca自签名</a></li><li>etcd多台部署，启用https以及ca自签名</li></ul></blockquote><hr><blockquote><p><em>kubernetes系列</em></p><ul><li>kubernetes master 启用RBAC、CA自签名、二进制部署全过程</li><li>kubernetes node 启用RBAC、CA自签名、二进制部署全过程</li><li>Calico集成kubernetes的CNI网络部署全过程、启用CA自签名 </li></ul></blockquote><hr><blockquote><p><em>kubernetes组件系列</em></p><ul><li>CoreDNS 使用以及部署，统一管理kuernetes网络的DNS解析</li><li>Dnsmasq部署，统一管理物理机以及kubernetes所有网络的DNS解析</li><li>registry 私有仓库的部署，用于管理kubernetes集群中所需要的镜像</li><li>Traefik ingress使用以及部署，提供kubernetes服务入口  </li></ul></blockquote><hr><blockquote><p><em>docker系列</em></p><ul><li>docker的安装部署</li><li>镜像的定义以及构建、修改（该部分内容后续会单独编写一个docker系列进行讲解）</li></ul></blockquote><hr><blockquote><p><em>yum离线源系列</em></p><ul><li>针对政府级别无网络环境的centos7系列服务器集群如何无网络部署</li></ul></blockquote><hr><blockquote><p><em>网络代理系列</em></p><ul><li>针对政府级别无网络环境，如何对正向、反向请求进行代理</li><li>如何使用ssh隧道正向、反向端口绑定以及映射转发</li></ul></blockquote><hr><blockquote><p><em>自动化部署开发系列</em></p><ul><li>解决kubenernetes运维入门的门槛，开发使用kunernetes组件自动化部署</li><li>开发自动化部署docker </li><li>开发自动化部署etcd单台、三台脚本</li><li>开发自动化部署mysql主从</li><li>开发自动化部署dnsmasq</li></ul></blockquote><hr><blockquote><p><em>数据如何清洗、处理系列</em></p><ul><li>面对百万计杂乱图片，如何应对整理并上传文件服务</li><li>千万级数据清洗处理全过程</li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;#原创内容，转载请注明出处&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;博主地址：&lt;a href=&quot;https://aronligithub.github.io/&quot;&gt;https://aronligithub.github.io/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt; &lt;em&gt;kubernetes作为当前最流行的容器编排领先技术之一，如果作为运维的你不学习怎么行呢？&lt;/em&gt;&lt;br&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/13423234-1ca8c290d56896ec.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果你继续往下看我后续写的博客内容可以&lt;strong&gt;学习到什么内容&lt;/strong&gt;呢？&lt;/p&gt;
    
    </summary>
    
      <category term="运维开发系列" scheme="https://aronligithub.github.io/categories/%E8%BF%90%E7%BB%B4%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="kubernetes系列" scheme="https://aronligithub.github.io/tags/kubernetes%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>巧用VPN+XShell击破局域网服务器的TCP端口转发问题</title>
    <link href="https://aronligithub.github.io/2018/08/09/%E5%B7%A7%E7%94%A8VPN+XShell%E5%87%BB%E7%A0%B4%E5%B1%80%E5%9F%9F%E7%BD%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84TCP%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91%E9%97%AE%E9%A2%98/"/>
    <id>https://aronligithub.github.io/2018/08/09/巧用VPN+XShell击破局域网服务器的TCP端口转发问题/</id>
    <published>2018-08-09T15:43:22.000Z</published>
    <updated>2018-08-11T07:40:38.263Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>#原创内容，转载请注明出处</p></blockquote><p>博主地址：<a href="https://aronligithub.github.io/">https://aronligithub.github.io/</a></p><h2 id="工作需求"><a href="#工作需求" class="headerlink" title="工作需求"></a>工作需求</h2><hr><blockquote><p>在部署客户服务器的过程中，一开始客户<strong>无法提供VPN，无法提供公网IP映射服务器端口的情况下</strong>，作为需要部署服务的攻城狮们，<strong>该用什么样的方法来访问服务器，该用什么样的方法转发服务器部分TCP端口，提供办公室内的其他同事测试调用呢？</strong></p></blockquote><a id="more"></a><h2 id="网络环境拓扑"><a href="#网络环境拓扑" class="headerlink" title="网络环境拓扑"></a>网络环境拓扑</h2><hr><blockquote><p><img src="https://upload-images.jianshu.io/upload_images/13423234-70c9cee747c9c3dc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="拓扑示意图"></p></blockquote><h2 id="首先在客户提供办公室临时电脑安装teamview工具"><a href="#首先在客户提供办公室临时电脑安装teamview工具" class="headerlink" title="首先在客户提供办公室临时电脑安装teamview工具"></a>首先在客户提供办公室临时电脑安装teamview工具</h2><hr><blockquote><p><strong>使用teamview工具可以透过局域网直接提供远程桌面，方便后续进行远程执行操作<br>为了方便VPN调试，另外需要关闭防火墙，或者开放防火墙的ping回显</strong><br><img src="https://upload-images.jianshu.io/upload_images/13423234-2c32828f5b9ddb7e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="teamview远程桌面"></p></blockquote><p><strong>此时通过teamview的功能，你已经可以远程桌面了，但是如果将内网的服务器的服务端口提供给公司内网的开发调用测试使用呢？</strong></p><h2 id="在客户临时电脑使用XShell访问服务器集群"><a href="#在客户临时电脑使用XShell访问服务器集群" class="headerlink" title="在客户临时电脑使用XShell访问服务器集群"></a>在客户临时电脑使用XShell访问服务器集群</h2><hr><blockquote><p><strong>使用xshell的隧道，将服务器自身的22端口绑定至客户电脑的任意端口，后续提供公司内网堡垒机访问</strong><br><img src="https://upload-images.jianshu.io/upload_images/13423234-f6dfad86ff9d6755.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p></blockquote><h2 id="使用客户临时电脑访问登陆公司搭设的VPN服务"><a href="#使用客户临时电脑访问登陆公司搭设的VPN服务" class="headerlink" title="使用客户临时电脑访问登陆公司搭设的VPN服务"></a>使用客户临时电脑访问登陆公司搭设的VPN服务</h2><blockquote><p><strong>创建windows的PPTP的VPN连接【前提条件已搭设好VPN服务器了】</strong><br><img src="https://upload-images.jianshu.io/upload_images/13423234-6bb0c0d5481df941.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p></blockquote><h2 id="从公司软路由查看客户临时电脑访问VPN后，绑定的内网IP"><a href="#从公司软路由查看客户临时电脑访问VPN后，绑定的内网IP" class="headerlink" title="从公司软路由查看客户临时电脑访问VPN后，绑定的内网IP"></a>从公司软路由查看客户临时电脑访问VPN后，绑定的内网IP</h2><blockquote><p><strong>从软路由查看IP地址</strong><br><img src="https://upload-images.jianshu.io/upload_images/13423234-f164cd5b2a272aa6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p></blockquote><p><strong>这是IP地址是就是从客户电脑到公司内网的连同桥梁了，下面看看在公司内网是否能够ping通。</strong></p><h2 id="在公司内网堡垒机测试能够ping通客户电脑的VPN-IP地址"><a href="#在公司内网堡垒机测试能够ping通客户电脑的VPN-IP地址" class="headerlink" title="在公司内网堡垒机测试能够ping通客户电脑的VPN IP地址"></a>在公司内网堡垒机测试能够ping通客户电脑的VPN IP地址</h2><blockquote><p><img src="https://upload-images.jianshu.io/upload_images/13423234-4caa2dab0fe57830.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="从公司内网任意电脑ping"></p></blockquote><p><strong>只要能够ping通，说明这条VPN通道已经完全打通了，下一步就是访问客户端绑定服务器22端口的本地端口服务，访问登陆上服务器。</strong></p><h3 id="公司内网堡垒机测试telnet客户机的端口服务"><a href="#公司内网堡垒机测试telnet客户机的端口服务" class="headerlink" title="公司内网堡垒机测试telnet客户机的端口服务"></a>公司内网堡垒机测试telnet客户机的端口服务</h3><blockquote><p><img src="https://upload-images.jianshu.io/upload_images/13423234-55bb2e0139df3a5d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br><img src="https://upload-images.jianshu.io/upload_images/13423234-0353274eb61d1353.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p></blockquote><p><strong>其实这个时候只要能够访问上服务器，例如xshell的隧道功能，或者ssh隧道方法，可以将服务器内网的所有TCP服务全部都可以再次本地绑定，再二次或者三次提供公司内网的开发调用使用。在多年实践中，我经常是可以多层绑定，无限穿透的TCP和UDP各种端口服务的。下面就简单演示一下在公司内网使用xshell访问服务器。</strong></p><h2 id="在公司内网访问客户内网的服务器"><a href="#在公司内网访问客户内网的服务器" class="headerlink" title="在公司内网访问客户内网的服务器"></a>在公司内网访问客户内网的服务器</h2><blockquote><p><img src="https://upload-images.jianshu.io/upload_images/13423234-89292f50e31c041b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;#原创内容，转载请注明出处&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;博主地址：&lt;a href=&quot;https://aronligithub.github.io/&quot;&gt;https://aronligithub.github.io/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;工作需求&quot;&gt;&lt;a href=&quot;#工作需求&quot; class=&quot;headerlink&quot; title=&quot;工作需求&quot;&gt;&lt;/a&gt;工作需求&lt;/h2&gt;&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;在部署客户服务器的过程中，一开始客户&lt;strong&gt;无法提供VPN，无法提供公网IP映射服务器端口的情况下&lt;/strong&gt;，作为需要部署服务的攻城狮们，&lt;strong&gt;该用什么样的方法来访问服务器，该用什么样的方法转发服务器部分TCP端口，提供办公室内的其他同事测试调用呢？&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="运维技巧积累" scheme="https://aronligithub.github.io/categories/%E8%BF%90%E7%BB%B4%E6%8A%80%E5%B7%A7%E7%A7%AF%E7%B4%AF/"/>
    
    
      <category term="windows系列运维技巧" scheme="https://aronligithub.github.io/tags/windows%E7%B3%BB%E5%88%97%E8%BF%90%E7%BB%B4%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
</feed>
