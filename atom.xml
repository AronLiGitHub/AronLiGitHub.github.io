<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>你们威哥的博客</title>
  
  <subtitle>简书博客地址 https://www.jianshu.com/u/a94f887f8776</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://aronligithub.github.io/"/>
  <updated>2018-08-20T13:43:00.970Z</updated>
  <id>https://aronligithub.github.io/</id>
  
  <author>
    <name>你们的威哥</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>处理java访问mysql连接数太多的错误</title>
    <link href="https://aronligithub.github.io/2018/08/20/%E5%A4%84%E7%90%86java%E8%AE%BF%E9%97%AEmysql%E8%BF%9E%E6%8E%A5%E6%95%B0%E5%A4%AA%E5%A4%9A%E7%9A%84%E9%94%99%E8%AF%AF/"/>
    <id>https://aronligithub.github.io/2018/08/20/处理java访问mysql连接数太多的错误/</id>
    <published>2018-08-20T13:42:22.000Z</published>
    <updated>2018-08-20T13:43:00.970Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>#原创内容，转载请注明出处</p></blockquote><p>博主地址：<a href="https://aronligithub.github.io/">https://aronligithub.github.io/</a></p><blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在生产环境处理故障的过程出现了java服务连接mysql，由于连接数太多被拒绝连接的故障，那么下面来看看怎么优化一下吧。</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/13423234-b243a56896371b8f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><a id="more"></a><blockquote><p><strong>故障摘要</strong></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">java.sql.SQLException: null,  message from server: &quot;Host &apos;mysql_server_ip&apos; is blocked because of many connection errors; unblock with &apos;mysqladmin flush-hosts&apos;&quot;</span><br><span class="line">        at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:964) ~[mysql-connector-java-5.1.41.jar!/:5.1.41]</span><br><span class="line">        at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:897) ~[mysql-connector-java-5.1.41.jar!/:5.1.41]</span><br><span class="line">        at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:886) ~[mysql-connector-java-5.1.41.jar!/:5.1.41]</span><br><span class="line">        at com.mysql.jdbc.MysqlIO.doHandshake(MysqlIO.java:1040) ~[mysql-connector-java-5.1.41.jar!/:5.1.41]</span><br><span class="line">        at com.mysql.jdbc.ConnectionImpl.coreConnect(ConnectionImpl.java:2205) ~[mysql-connector-java-5.1.41.jar!/:5.1.41]</span><br><span class="line">        at com.mysql.jdbc.ConnectionImpl.connectOneTryOnly(ConnectionImpl.java:2236) ~[mysql-connector-java-5.1.41.jar!/:5.1.41]</span><br><span class="line">        at com.mysql.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:2035) ~[mysql-connector-java-5.1.41.jar!/:5.1.41]</span><br><span class="line">        at com.mysql.jdbc.ConnectionImpl.&lt;init&gt;(ConnectionImpl.java:790) ~[mysql-connector-java-5.1.41.jar!/:5.1.41]</span><br><span class="line">        at com.mysql.jdbc.JDBC4Connection.&lt;init&gt;(JDBC4Connection.java:47) ~[mysql-connector-java-5.1.41.jar!/:5.1.41]</span><br></pre></td></tr></table></figure><p><strong>可以从服务端日志中看出，提示了故障信息：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java.sql.SQLException: null,  message from server: &quot;Host &apos;mysql_server_ip&apos; is blocked because of many connection errors; unblock with &apos;mysqladmin flush-hosts&apos;&quot;</span><br></pre></td></tr></table></figure></p><hr><blockquote><p><strong>那么该如何快速处理并优化一下呢？</strong></p></blockquote><ul><li><p>首先为了快速恢复服务，先对mysql主从两台服务进行重启处理</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service mysqld restart</span><br></pre></td></tr></table></figure></li><li><p>然后观察服务端的错误日志，对mysql的连接相关参数进行优化</p></li></ul><blockquote><p><strong>关于mysql连接数优化的参数</strong></p></blockquote><p>对于java连接mysql，是有mysql连接池的，如果提示该错误，可以往这两个方向对mysql优化一下：<br>1.配置mysql的最大连接数<br>2.配置centos7服务器的文件打开数<br>3.配置mysql连接最长等待超时时间</p><blockquote><p><strong><em>1.配置mysql的最大连接数</em></strong></p></blockquote><p>配置mysql最大连接数分为两种方式：<br>1.第一种修改my.cnf文件，需要mysql服务重启后生效<br>2.第二种直接修改global variables参数</p><p><strong>那么该如何处理呢，如果mysqld服务正在运行？</strong></p><ul><li>首先我会修改global variables参数</li><li>然后修改my.cnf文件<br><strong>这样处理的好处就是立即可以修改参数，不需要重启mysqld服务。当mysqld服务重启的时候，参数也会自动生效。</strong></li></ul><blockquote><p><strong>使用修改global variables参数的方式，修改mysql最大连接数的相关命令</strong><br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#查看最大连接数：</span><br><span class="line">show variables like '%max_connections%';</span><br><span class="line">#临时增加最大连接数：</span><br><span class="line">mysql&gt; <span class="keyword">set</span> global max_connections=<span class="number">10000</span>;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p><strong>修改my.cnf文件(<code>/etc/my.cnf</code>)的方式，修改mysql的最大连接数</strong></p></blockquote><p>设置最大连接数：<code>max_connections=10000</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">[root@ibmserver10 ~]# cat /etc/my.cnf</span><br><span class="line"># For advice on how to change settings please see</span><br><span class="line"># http://dev.mysql.com/doc/refman/5.7/en/server-configuration-defaults.html</span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line">#</span><br><span class="line"># Remove leading # and set to the amount of RAM for the most important data</span><br><span class="line"># cache in MySQL. Start at 70% of total RAM for dedicated server, else 10%.</span><br><span class="line"># innodb_buffer_pool_size = 128M</span><br><span class="line">#</span><br><span class="line"># Remove leading # to turn on a very important data integrity option: logging</span><br><span class="line"># changes to the binary log between backups.</span><br><span class="line"># log_bin</span><br><span class="line">#</span><br><span class="line"># Remove leading # to set options mainly useful for reporting servers.</span><br><span class="line"># The server defaults are faster for transactions and fast SELECTs.</span><br><span class="line"># Adjust sizes as needed, experiment to find the optimal values.</span><br><span class="line"># join_buffer_size = 128M</span><br><span class="line"># sort_buffer_size = 2M</span><br><span class="line"># read_rnd_buffer_size = 2M</span><br><span class="line">datadir=/var/lib/mysql</span><br><span class="line">socket=/var/lib/mysql/mysql.sock</span><br><span class="line"></span><br><span class="line"># Disabling symbolic-links is recommended to prevent assorted security risks</span><br><span class="line">symbolic-links=0</span><br><span class="line"></span><br><span class="line">log-error=/var/log/mysqld.log</span><br><span class="line">pid-file=/var/run/mysqld/mysqld.pid</span><br><span class="line"></span><br><span class="line">## set max_connections </span><br><span class="line">max_connections=10000</span><br><span class="line"></span><br><span class="line">## set tempdir</span><br><span class="line">tmpdir=/data/mysql/mysqlData/mysql_tmp</span><br><span class="line"></span><br><span class="line">## set innodb_buffer_pool_size</span><br><span class="line">innodb_buffer_pool_size=2G</span><br><span class="line"></span><br><span class="line">sql_mode=STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION</span><br><span class="line">[root@ibmserver10 ~]#</span><br></pre></td></tr></table></figure></p><blockquote><p><strong><em>2.配置mysql连接最长等待超时时间（wait_timeout）</em></strong></p></blockquote><ul><li>这个<code>wait_timeout</code>的作用是，设置非交互连接（就是指那些连接池方式、非客户端方式连接的）的超时时间，默认是<code>28800</code>，就是<code>8小时</code>，超过这个时间，mysql服务器会主动切断那些已经连接的，但是状态是<code>sleep</code>的连接。</li><li>修改<code>wait_timeout</code>可能出现的程序错误：<br>当服务器端去连接mysql的时候，连接池里的连接已经被mysql主动断开，这时取回的连接就是null，再加上程序里对此没有做判断的话，接下来的对数据库的一系列的操作都会出现问题。</li></ul><p><strong><em>那么基本知道了好处以及坏处之后，我们下面来看看怎么配置。</em></strong></p><blockquote><p><strong>查询mysql的连接等待时间</strong></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; </span><br><span class="line">mysql&gt; show global variables like &quot;wait_timeout&quot;;</span><br><span class="line">+---------------+-------+</span><br><span class="line">| Variable_name | Value |</span><br><span class="line">+---------------+-------+</span><br><span class="line">| wait_timeout  | 28800 |</span><br><span class="line">+---------------+-------+</span><br><span class="line">1 row in set (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure><p><strong>可以看到，现在的mysql等待连接时间是<a href="">28800秒</a> = <a href="">8小时</a></strong></p><blockquote><p><strong>那么这里就带来另一个问题了，这个等待时间设置为多久比较好呢？</strong><br>wait_timeout过大有弊端，其体现就是MySQL里大量的SLEEP进程无法及时释放，拖累系统性能，不过也不能把这个指设置的过小，否则你可 能会遭遇到“MySQL has gone away”之类的问题。<br>这种情况只能靠实际情况配置了。</p></blockquote><blockquote><p>java服务通常连接mysql的业务操作不会超过几分钟，那么设置个几百秒即可。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set global wait_timeout = 200;</span><br></pre></td></tr></table></figure></p></blockquote><p>那么就设置200秒即可。</p><blockquote><p>但是有一种情况比较特殊，例如用户在使用导出报表等数据处理功能，有些时间选择导出一个月。这个时候就会可能出现mysql连接丢失的情况。</p></blockquote><p>如果碰到这种情况，最好再调整一下mysql的时间，选择一个适中的。</p><blockquote><p><strong>使用my.cnf文件设置wait_timeout参数</strong></p></blockquote><p>前面讲述的是使用global variables参数的方式修改wait_timeout的参数值。下面示例使用my.cnf文件的配置：<br><code>wait_timeout=200</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">[root@ibmserver10 ~]# cat /etc/my.cnf</span><br><span class="line"># For advice on how to change settings please see</span><br><span class="line"># http://dev.mysql.com/doc/refman/5.7/en/server-configuration-defaults.html</span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line">#</span><br><span class="line"># Remove leading # and set to the amount of RAM for the most important data</span><br><span class="line"># cache in MySQL. Start at 70% of total RAM for dedicated server, else 10%.</span><br><span class="line"># innodb_buffer_pool_size = 128M</span><br><span class="line">#</span><br><span class="line"># Remove leading # to turn on a very important data integrity option: logging</span><br><span class="line"># changes to the binary log between backups.</span><br><span class="line"># log_bin</span><br><span class="line">#</span><br><span class="line"># Remove leading # to set options mainly useful for reporting servers.</span><br><span class="line"># The server defaults are faster for transactions and fast SELECTs.</span><br><span class="line"># Adjust sizes as needed, experiment to find the optimal values.</span><br><span class="line"># join_buffer_size = 128M</span><br><span class="line"># sort_buffer_size = 2M</span><br><span class="line"># read_rnd_buffer_size = 2M</span><br><span class="line">datadir=/var/lib/mysql</span><br><span class="line">socket=/var/lib/mysql/mysql.sock</span><br><span class="line"></span><br><span class="line"># Disabling symbolic-links is recommended to prevent assorted security risks</span><br><span class="line">symbolic-links=0</span><br><span class="line"></span><br><span class="line">log-error=/var/log/mysqld.log</span><br><span class="line">pid-file=/var/run/mysqld/mysqld.pid</span><br><span class="line"></span><br><span class="line">## set max_connections </span><br><span class="line">max_connections=10000</span><br><span class="line"></span><br><span class="line">## set wait_timeout</span><br><span class="line">wait_timeout=200</span><br><span class="line"></span><br><span class="line">## set tempdir</span><br><span class="line">tmpdir=/data/mysql/mysqlData/mysql_tmp</span><br><span class="line"></span><br><span class="line">## set innodb_buffer_pool_size</span><br><span class="line">innodb_buffer_pool_size=2G</span><br><span class="line"></span><br><span class="line">sql_mode=STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION</span><br><span class="line">[root@ibmserver10 ~]#</span><br></pre></td></tr></table></figure></p><p><strong>查看是否配置生效：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show global variables like &quot;wait_timeout&quot;;</span><br><span class="line">+---------------+-------+</span><br><span class="line">| Variable_name | Value |</span><br><span class="line">+---------------+-------+</span><br><span class="line">| wait_timeout  | 200   |</span><br><span class="line">+---------------+-------+</span><br><span class="line">1 row in set (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure></p><p><strong>可以看出已经配置生效了。</strong></p><blockquote><p>如果你想要看我写的总体系列文章目录介绍，可以点击<a href="https://www.jianshu.com/p/4a9c06ea570b" target="_blank" rel="noopener">kuberntes以及运维开发文章目录介绍</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;#原创内容，转载请注明出处&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;博主地址：&lt;a href=&quot;https://aronligithub.github.io/&quot;&gt;https://aronligithub.github.io/&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在生产环境处理故障的过程出现了java服务连接mysql，由于连接数太多被拒绝连接的故障，那么下面来看看怎么优化一下吧。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/13423234-b243a56896371b8f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="运维开发系列" scheme="https://aronligithub.github.io/categories/%E8%BF%90%E7%BB%B4%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="mysql系列" scheme="https://aronligithub.github.io/tags/mysql%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>kubernetes基本技术概述铺垫</title>
    <link href="https://aronligithub.github.io/2018/08/20/kubernetes-%E5%9F%BA%E6%9C%AC%E6%8A%80%E6%9C%AF%E6%A6%82%E8%BF%B0%E9%93%BA%E5%9E%AB/"/>
    <id>https://aronligithub.github.io/2018/08/20/kubernetes-基本技术概述铺垫/</id>
    <published>2018-08-20T08:23:22.000Z</published>
    <updated>2018-08-20T08:33:13.151Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>#原创内容，转载请注明出处</p></blockquote><p>博主地址：<a href="https://aronligithub.github.io/">https://aronligithub.github.io/</a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p><strong><em>在经过上一篇章关于<a href="https://www.jianshu.com/p/33b5f47ababc" target="_blank" rel="noopener">etcd多台部署，启用https以及ca自签名</a>,在部署etcd集群之后，就可以开始部署kubernetes的master节点服务了。但是在此之前，对于新手们，还是要讲述一下kubernetes的基本概念，作为铺垫一下。</em></strong></p></blockquote><p><strong>如果你已经熟悉kubernetes的概念以及相关技术原理，那么可以跳过该篇章，直接进入下一章<a href="https://www.jianshu.com/p/7d079a7b2330" target="_blank" rel="noopener">kubernetes v1.11 线上生产环境 二进制文件部署全过程</a></strong></p><p><strong>关于基本技术概念，主要内容是取自在<a href="http://dockone.io/article/932" target="_blank" rel="noopener">10分钟内学习Kubernetes的关键概念</a>以及取自<a href="http://docs.kubernetes.org.cn/227.html" target="_blank" rel="noopener">kubernetes中文社区文档</a></strong></p><a id="more"></a><hr><h2 id="Kubernetes是什么？"><a href="#Kubernetes是什么？" class="headerlink" title="Kubernetes是什么？"></a>Kubernetes是什么？</h2><blockquote><p>Kubernetes是容器集群管理系统，是一个开源的平台，可以实现容器集群的自动化部署、自动扩缩容、维护等功能。</p></blockquote><p><strong>通过Kubernetes你可以：</strong></p><blockquote><ul><li>快速部署应用</li><li>快速扩展应用</li><li>无缝对接新的应用功能</li><li>节省资源，优化硬件资源的使用</li><li>kubernetes的目标是促进完善组件和工具的生态系统，以减轻应用程序在公有云或私有云中运行的负担。</li></ul></blockquote><hr><h2 id="Kubernetes-特点"><a href="#Kubernetes-特点" class="headerlink" title="Kubernetes 特点"></a>Kubernetes 特点</h2><blockquote><ul><li><strong>可移植:</strong> 支持公有云，私有云，混合云，多重云（multi-cloud）</li><li><strong>可扩展:</strong> 模块化, 插件化, 可挂载, 可组合</li><li><strong>自动化:</strong> 自动部署，自动重启，自动复制，自动伸缩/扩展</li><li>Kubernetes是Google 2014年创建管理的，是Google 10多年大规模容器管理技术Borg的开源版本。</li></ul></blockquote><hr><h2 id="Kubernetes的架构"><a href="#Kubernetes的架构" class="headerlink" title="Kubernetes的架构"></a>Kubernetes的架构</h2><blockquote><p>kubernetes 在不熟悉的人的脑海里头有各种各样的样子，那么到底kubernetes是长什么样子，以什么样的架构形式展示在我们的眼前的呢，下面看看kubernetes的架构图，让我们直观地认识一下kubernetes。<br><img src="https://upload-images.jianshu.io/upload_images/13423234-110e919e544fe14b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="kubernetes平台的架构图"></p></blockquote><p>上图可以看到如下组件，使用特别的图标表示Service和Label：</p><ul><li>Pod</li><li>Container（容器）</li><li>Label（标签）</li><li>Replication Controller（复制控制器）<br><a href="http://docs.kubernetes.org.cn/314.html" target="_blank" rel="noopener">这个组件后续已经替换使用为Replica Set</a></li><li>Service（服务）</li><li>Node（节点）</li><li>Kubernetes Master（Kubernetes主节点）</li></ul><hr><h3 id="Pod"><a href="#Pod" class="headerlink" title="Pod"></a>Pod</h3><blockquote><p><a href="http://docs.kubernetes.org.cn/312.html" target="_blank" rel="noopener">Pod</a>（上图绿色方框）安排在节点上，包含一组容器和卷。同一个Pod里的容器共享同一个网络命名空间，可以使用localhost互相通信。Pod是短暂的，不是持续性实体。你可能会有这些问题：</p></blockquote><ul><li>如果Pod是短暂的，那么我怎么才能持久化容器数据使其能够跨重启而存在呢？ 是的，Kubernetes支持<a href="http://docs.kubernetes.org.cn/429.html" target="_blank" rel="noopener">Volume</a>的概念，因此可以使用持久化的卷类型。</li><li>是否手动创建Pod，如果想要创建同一个容器的多份拷贝，需要一个个分别创建出来么？可以手动创建单个Pod，但是也可以使用Replication Controller使用Pod模板创建出多份拷贝，下文会详细介绍。</li><li>如果Pod是短暂的，那么重启时IP地址可能会改变，那么怎么才能从前端容器正确可靠地指向后台容器呢？这时可以使用Service，下文会详细介绍。</li></ul><hr><h3 id="Lable"><a href="#Lable" class="headerlink" title="Lable"></a>Lable</h3><blockquote><p>正如图所示，一些Pod有Label。一个Label是attach到Pod的一对键/值对，用来传递用户定义的属性。<br>比如，你可能创建了一个”tier”和“app”标签，通过Label（<strong>tier=frontend, app=myapp</strong>）来标记前端Pod容器，使用Label（<strong>tier=backend, app=myapp</strong>）标记后台Pod。然后可以使用Selectors选择带有特定Label的Pod，并且将Service或者Replication Controller应用到上面。</p></blockquote><hr><h3 id="Replication-Controller"><a href="#Replication-Controller" class="headerlink" title="Replication Controller"></a>Replication Controller</h3><blockquote><p><em>是否手动创建Pod，如果想要创建同一个容器的多份拷贝，需要一个个分别创建出来么，能否将Pods划到逻辑组里？</em></p></blockquote><p>Replication Controller确保任意时间都有指定数量的Pod“副本”在运行。如果为某个Pod创建了Replication Controller并且指定3个副本，它会创建3个Pod，并且持续监控它们。如果某个Pod不响应，那么Replication Controller会替换它，保持总数为3.如下面的动画所示：</p><p><img src="https://upload-images.jianshu.io/upload_images/13423234-51f658e1eae2b3f7.gif?imageMogr2/auto-orient/strip" alt=""></p><p>如果之前不响应的Pod恢复了，现在就有4个Pod了，那么Replication Controller会将其中一个终止保持总数为3。如果在运行中将副本总数改为5，Replication Controller会立刻启动2个新Pod，保证总数为5。还可以按照这样的方式缩小Pod，这个特性在执行滚动升级时很有用。</p><p>当创建Replication Controller时，需要指定两个东西：</p><ol><li><a href="http://docs.kubernetes.org.cn/312.html" target="_blank" rel="noopener">Pod模板</a>：用来创建Pod副本的模板</li><li>Label：Replication Controller需要监控的Pod的标签。</li></ol><p>现在已经创建了Pod的一些副本，那么在这些副本上如何均衡负载呢？我们需要的是Service。</p><hr><h3 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h3><blockquote><p><em>如果Pods是短暂的，那么重启时IP地址可能会改变，怎么才能从前端容器正确可靠地指向后台容器呢？</em></p></blockquote><p><a href="http://kubernetes.io/v1.1/docs/user-guide/services.html" target="_blank" rel="noopener">Service</a>是定义一系列Pod以及访问这些Pod的策略的一层<strong>抽象</strong>。Service通过Label找到Pod组。因为Service是抽象的，所以在图表里通常看不到它们的存在，这也就让这一概念更难以理解。</p><p>现在，假定有2个后台Pod，并且定义后台Service的名称为‘backend-service’，lable选择器为（<strong>tier=backend, app=myapp</strong>）。<em>backend-service</em> 的Service会完成如下两件重要的事情：</p><ul><li>会为Service创建一个本地集群的DNS入口，因此前端Pod只需要DNS查找主机名为 ‘backend-service’，就能够解析出前端应用程序可用的IP地址。</li><li>现在前端已经得到了后台服务的IP地址，但是它应该访问2个后台Pod的哪一个呢？Service在这2个后台Pod之间提供透明的负载均衡，会将请求分发给其中的任意一个（如下面的动画所示）。通过每个Node上运行的代理（kube-proxy）完成。<a href="http://docs.kubernetes.org.cn/703.html" target="_blank" rel="noopener">这里</a>有更多技术细节。</li></ul><p>下述动画展示了Service的功能。注意该图作了很多简化。如果不进入网络配置，那么达到透明的负载均衡目标所涉及的底层网络和路由相对先进。如果有兴趣，<a href="http://www.dasblinkenlichten.com/kubernetes-101-networking/" target="_blank" rel="noopener">这里</a>有更深入的介绍。</p><p><img src="http://upload-images.jianshu.io/upload_images/13423234-159bb6dd1f2fa236.gif?imageMogr2/auto-orient/strip" alt=""></p><p>有一个特别类型的Kubernetes Service，称为’<a href="https://www.kubernetes.org.cn/1885.html" target="_blank" rel="noopener">Ingress</a>‘，作为外部负载均衡器使用，在一定数量的Pod之间均衡流量。比如，对于负载均衡Web流量很有用。</p><hr><h3 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h3><blockquote><p>节点（上图橘色方框）是物理或者虚拟机器，作为Kubernetes worker，通常称为Minion。每个节点都运行如下Kubernetes关键组件：</p></blockquote><ul><li>Kubelet：是主节点代理。</li><li>Kube-proxy：Service使用其将链接路由到Pod，如上文所述。</li><li>Docker或Rocket：Kubernetes使用的容器技术来创建容器。</li></ul><hr><h3 id="Kubernetes-Master"><a href="#Kubernetes-Master" class="headerlink" title="Kubernetes Master"></a>Kubernetes Master</h3><blockquote><p>集群拥有一个Kubernetes Master（紫色方框）。Kubernetes Master提供集群的独特视角，并且拥有一系列组件，比如Kubernetes API Server。API Server提供可以用来和集群交互的REST端点。master节点包括用来创建和复制Pod的Replication Controller。</p></blockquote><hr><h3 id="更加详细的资料文献"><a href="#更加详细的资料文献" class="headerlink" title="更加详细的资料文献"></a>更加详细的资料文献</h3><blockquote><p>现在我们已经了解了Kubernetes核心概念的基本知识，你可以进一步阅读Kubernetes<a href="http://docs.kubernetes.org.cn/" target="_blank" rel="noopener">中文文档</a>。中文文档提供了完备的资料文档。</p></blockquote><hr><h3 id="下一步，开始部署的篇章"><a href="#下一步，开始部署的篇章" class="headerlink" title="下一步，开始部署的篇章"></a>下一步，开始部署的篇章</h3><blockquote><p>好了，在看了上面一些kubernetes的基本概述之后，我们就开始动手来<a href="https://www.jianshu.com/p/7d079a7b2330" target="_blank" rel="noopener">部署适合生产环境的kubernetes集群</a>吧。</p></blockquote><blockquote><p>如果你想要看我写的总体系列文章目录介绍，可以点击<a href="https://www.jianshu.com/p/4a9c06ea570b" target="_blank" rel="noopener">kuberntes以及运维开发文章目录介绍</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;#原创内容，转载请注明出处&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;博主地址：&lt;a href=&quot;https://aronligithub.github.io/&quot;&gt;https://aronligithub.github.io/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;在经过上一篇章关于&lt;a href=&quot;https://www.jianshu.com/p/33b5f47ababc&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;etcd多台部署，启用https以及ca自签名&lt;/a&gt;,在部署etcd集群之后，就可以开始部署kubernetes的master节点服务了。但是在此之前，对于新手们，还是要讲述一下kubernetes的基本概念，作为铺垫一下。&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;如果你已经熟悉kubernetes的概念以及相关技术原理，那么可以跳过该篇章，直接进入下一章&lt;a href=&quot;https://www.jianshu.com/p/7d079a7b2330&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;kubernetes v1.11 线上生产环境 二进制文件部署全过程&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;关于基本技术概念，主要内容是取自在&lt;a href=&quot;http://dockone.io/article/932&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;10分钟内学习Kubernetes的关键概念&lt;/a&gt;以及取自&lt;a href=&quot;http://docs.kubernetes.org.cn/227.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;kubernetes中文社区文档&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="运维开发系列" scheme="https://aronligithub.github.io/categories/%E8%BF%90%E7%BB%B4%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="kubernetes系列" scheme="https://aronligithub.github.io/tags/kubernetes%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>kubernetes v1.11 生产环境 二进制部署 全过程.</title>
    <link href="https://aronligithub.github.io/2018/08/20/kubernetes-v1-11--%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83-%E4%BA%8C%E8%BF%9B%E5%88%B6%E9%83%A8%E7%BD%B2--%E5%85%A8%E8%BF%87%E7%A8%8B/"/>
    <id>https://aronligithub.github.io/2018/08/20/kubernetes-v1-11--生产环境-二进制部署--全过程/</id>
    <published>2018-08-20T08:23:22.000Z</published>
    <updated>2018-08-20T08:32:32.758Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>#原创内容，转载请注明出处</p></blockquote><p>博主地址：<a href="https://aronligithub.github.io/">https://aronligithub.github.io/</a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p><strong><em>在经过上一篇章关于<a href="https://www.jianshu.com/p/198eb16b1902" target="_blank" rel="noopener">kubernetes 基本技术概述铺垫</a>,在部署etcd集群之后，就可以开始部署kubernetes的集群服务了。</em></strong></p></blockquote><p><strong>如果你是直接访问到该篇章，不清楚etcd如何部署，不清楚我写的kubernetes系列文章铺垫，可以访问<a href="https://www.jianshu.com/p/4a9c06ea570b" target="_blank" rel="noopener">这里</a>。</strong><br><img src="https://upload-images.jianshu.io/upload_images/13423234-3a6c9499ff3ed79b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><a id="more"></a><hr><h2 id="部署基本步骤说明"><a href="#部署基本步骤说明" class="headerlink" title="部署基本步骤说明"></a>部署基本步骤说明</h2><blockquote><ul><li>下载kubernetes二进制可执行文件</li><li>使用openssl生成ca证书</li><li>部署kubernetes的master服务</li><li>部署kubernetes的node服务</li></ul></blockquote><hr><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><blockquote><p><strong><em>服务器拓扑</em></strong><br><img src="https://upload-images.jianshu.io/upload_images/13423234-2cba715507dd1e1d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p></blockquote><table><thead><tr><th style="text-align:center">host name</th><th style="text-align:center">ServerIP</th><th style="text-align:center">Services</th></tr></thead><tbody><tr><td style="text-align:center">Server81</td><td style="text-align:center">172.16.5.81</td><td style="text-align:center">master 、node 、etcd</td></tr><tr><td style="text-align:center">Server86</td><td style="text-align:center">172.16.5.86</td><td style="text-align:center">node 、etcd</td></tr><tr><td style="text-align:center">Server87</td><td style="text-align:center">172.16.5.87</td><td style="text-align:center">node 、etcd</td></tr></tbody></table><blockquote><p><strong><em>服务器预处理配置</em></strong></p></blockquote><blockquote><ol><li>关闭防火墙服务<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl disable firewalld</span><br><span class="line">setenforce 0</span><br></pre></td></tr></table></figure></li></ol></blockquote><blockquote><ol start="2"><li>关闭selinux<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">查看<span class="type">SELinux</span>状态：</span><br><span class="line"><span class="number">1</span>、/usr/sbin/sestatus -v  或者sestatus</span><br><span class="line"><span class="number">2</span>、修改配置文件需要重启机器：</span><br><span class="line">修改/etc/selinux/config 文件</span><br><span class="line">将<span class="type">SELINUX</span>=enforcing改为<span class="type">SELINUX</span>=disabled</span><br><span class="line">重启机器即可</span><br></pre></td></tr></table></figure></li></ol></blockquote><blockquote><ol start="3"><li>配置服务器的ntp时间钟（保证服务器之间的时间同步）<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">yum install ntp ntpdate -y</span><br><span class="line">timedatectl status</span><br><span class="line">timedatectl list-timezones | grep Shanghai</span><br><span class="line">timedatectl set-timezone Asia/Hong_Kong</span><br><span class="line">timedatectl set-ntp yes</span><br><span class="line">date</span><br></pre></td></tr></table></figure></li></ol></blockquote><blockquote><ol start="4"><li>关闭硬盘的swap分区<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">关闭swap</span><br><span class="line">sudo swapoff -a</span><br><span class="line">#要永久禁掉swap分区，打开如下文件注释掉swap那一行 </span><br><span class="line">sudo vi /etc/fstab</span><br></pre></td></tr></table></figure></li></ol></blockquote><hr><h2 id="k8s1-11下载二进制文件"><a href="#k8s1-11下载二进制文件" class="headerlink" title="k8s1.11下载二进制文件"></a>k8s1.11下载二进制文件</h2><blockquote><p><strong><em>从Kubernetes官网Github下载编译好的二进制包</em></strong></p></blockquote><p>访问<a href="https://github.com/kubernetes/kubernetes/releases" target="_blank" rel="noopener">kubernetes的Github</a>，查看页面如下：</p><blockquote><p><img src="https://upload-images.jianshu.io/upload_images/13423234-1959bd686d1f50f9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">下载kubernetes.tar.gz文件，包含了Kubernetes的服务程序文件、文档和示例。</span><br><span class="line">&apos;注意：现在下载都需要翻墙才可以下载了。(不翻墙的话印象中后面也可以下载，不过很慢)&apos;</span><br></pre></td></tr></table></figure></p></blockquote><hr><blockquote><p><strong><em>解压二进制文件以及下载server以及client执行文件</em></strong></p></blockquote><blockquote><ol><li>上传并解压二进制文件压缩包<br><img src="https://upload-images.jianshu.io/upload_images/13423234-1c6fa110bc2a61f7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></li></ol></blockquote><blockquote><p>2.下载client和server的二进制文件<br><img src="https://upload-images.jianshu.io/upload_images/13423234-c07b5f6d680c894f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">从kubernetes/client的介绍文件中可以知道，需要去执行</span><br><span class="line">Run cluster/get-kube-binaries.sh to download client and server binaries.</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p><img src="https://upload-images.jianshu.io/upload_images/13423234-b78d95af6abaaeb4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p></blockquote><blockquote><p>3.查看下载好的server文件<br><img src="https://upload-images.jianshu.io/upload_images/13423234-1b886537f336c5e3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>好了，这里已经下载好kubernetes所需的二进制文件了，那么下一步就是<strong>创建kubernetes集群所需要的TLS证书文件。</strong><br><img src="https://upload-images.jianshu.io/upload_images/13423234-3ef7878e8a2c041a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p></blockquote><hr><h2 id="使用openssl创建CA证书"><a href="#使用openssl创建CA证书" class="headerlink" title="使用openssl创建CA证书"></a>使用openssl创建CA证书</h2><blockquote><p><img src="https://upload-images.jianshu.io/upload_images/13423234-f2290732a96555c8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p></blockquote><blockquote><p><strong><em>部署kubernetes服务使用的所需证书如下</em></strong></p></blockquote><table><thead><tr><th style="text-align:left">名称</th><th style="text-align:left">公钥与私钥</th></tr></thead><tbody><tr><td style="text-align:left">根证书公钥与私钥</td><td style="text-align:left">ca.pem与ca.key</td></tr><tr><td style="text-align:left">API Server公钥与私钥</td><td style="text-align:left">apiserver.pem与apiserver.key</td></tr><tr><td style="text-align:left">集群管理员公钥与私钥</td><td style="text-align:left">admin.pem与admin.key</td></tr><tr><td style="text-align:left">节点proxy公钥与私钥</td><td style="text-align:left">proxy.pem与proxy.key</td></tr></tbody></table><p><strong>节点kubelet的公钥与私钥</strong>：是通过boostrap响应的方式，在<strong>启动kubelet自动会产生</strong>, 然后在master通过csr请求，就会产生。<br>那么知道这些基本概念之后，下面就开始创建证书的步骤说明。<br><strong>再次之前可以先看看生成之后的结果图：</strong></p><blockquote><p><img src="https://upload-images.jianshu.io/upload_images/13423234-58ef76235ab60548.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="证书生成的结果图"><br><img src="https://upload-images.jianshu.io/upload_images/13423234-fc1877c16e92e84e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="kubelet证书自动生成结果图"></p></blockquote><hr><blockquote><p><strong><em>创建根证书</em></strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># Generate the root CA. </span><br><span class="line">  #生成RSA私钥(无加密)</span><br><span class="line">  openssl genrsa -out ca.key 2048 </span><br><span class="line">  #生成 RSA 私钥和自签名证书</span><br><span class="line">  openssl req -x509 -new -nodes -key ca.key -days 10000 -out ca.pem -subj &quot;/CN=kubernetes/O=k8s&quot;</span><br><span class="line"></span><br><span class="line"># 参数说明：</span><br><span class="line">-new 指生成证书请求</span><br><span class="line">-x509 表示直接输出证书</span><br><span class="line">-key 指定私钥文件</span><br><span class="line">-days 指定证书过期时间为10000天</span><br><span class="line">-out 导出结束后证书文件</span><br><span class="line">-subj 输入证书拥有者信息，这里指定 CN 以及 O 的值</span><br><span class="line"></span><br><span class="line"># 重要的CN以及0关键参数：</span><br><span class="line">-subj 设置CN以及0的值很重要，kubernetes会从证书这两个值对应获取相关的用户名以及用户租的值，如下：</span><br><span class="line">&quot;CN&quot;：Common Name，kube-apiserver 从证书中提取该字段作为请求的用户名 (User Name)；浏览器使用该字段验证网站是否合法；</span><br><span class="line">&quot;O&quot;：Organization，kube-apiserver 从证书中提取该字段作为请求用户所属的组 (Group)；</span><br></pre></td></tr></table></figure></p></blockquote><hr><blockquote><p><strong><em>apiserver证书生成</em></strong></p></blockquote><p><strong>master中需要证书如下:</strong><br>根证书公钥(root CA public key, <code>ca.key</code>)、根证书(<code>ca.pem</code>)；<br>apiserver证书：<code>apiserver.pem</code>与其私钥<code>apiserver-key.pem</code>。</p><blockquote><p> <strong>1.创建openssl.cnf</strong></p></blockquote><p><strong>openssl示例</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[req]</span><br><span class="line">req_extensions = v3_req</span><br><span class="line">distinguished_name = req_distinguished_name</span><br><span class="line">[req_distinguished_name]</span><br><span class="line">[ v3_req ]</span><br><span class="line">basicConstraints = CA:FALSE</span><br><span class="line">keyUsage = nonRepudiation, digitalSignature, keyEncipherment</span><br><span class="line">subjectAltName = @alt_names</span><br><span class="line">[alt_names]</span><br><span class="line">DNS.1 = kubernetes</span><br><span class="line">DNS.2 = kubernetes.default</span><br><span class="line">DNS.3 = kubernetes.default.svc</span><br><span class="line">DNS.4 = kubernetes.default.svc.cluster.local</span><br><span class="line">IP.1 = $&#123;K8S_SERVICE_IP&#125;</span><br><span class="line">IP.2 = $&#123;MASTER_IPV4&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[^_^]:</span><br><span class="line">使用有API被访问的Master的IP地址替换$&#123;MASTER_IPV4&#125;，使用自己规划作为kubernetes service IP端的首IP替换$&#123;K8S_SERVICE_IP&#125;如：一般以10.100.0.0/16作为service的服务IP端，则此处以10.100.0.1替换$&#123;K8S_SERVICE_IP&#125;</span><br><span class="line">如果在高可用配置中部署多个Master节点，需要添加更多的TLS subjectAltNames (SANs)。每个证书合适的SANs配置依赖于从节点与kubectl用户是怎样与Master节点通讯的：直接通过IP地址、通过负载均衡、或者通过解析DNS名称。</span><br><span class="line">DNS.5 = $&#123;MASTER_DNS_NAME&#125;</span><br><span class="line">IP.3 = $&#123;MASTER_IP&#125;</span><br><span class="line">IP.4 = $&#123;MASTER_LOADBALANCER_IP&#125;</span><br><span class="line">从节点将通过$&#123;MASTER_DNS_NAME&#125;访问到Loadbalancer。</span><br></pre></td></tr></table></figure><p>根据上面的示例，下面则以server81作为master服务器，创建openssl的cnf文件。</p><hr><p><strong>创建openssl.cnf文件</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[root@server81 openssl]# vim openssl.cnf </span><br><span class="line"></span><br><span class="line">[req]</span><br><span class="line">req_extensions = v3_req</span><br><span class="line">distinguished_name = req_distinguished_name</span><br><span class="line">[req_distinguished_name]</span><br><span class="line">[ v3_req ]</span><br><span class="line">basicConstraints = CA:FALSE</span><br><span class="line">keyUsage = nonRepudiation, digitalSignature, keyEncipherment</span><br><span class="line">subjectAltName = @alt_names</span><br><span class="line">[alt_names]</span><br><span class="line">DNS.1 = kubernetes</span><br><span class="line">DNS.2 = kubernetes.default</span><br><span class="line">DNS.3 = kubernetes.default.svc</span><br><span class="line">DNS.4 = kubernetes.default.svc.cluster</span><br><span class="line">DNS.5 = kubernetes.default.svc.cluster.local</span><br><span class="line">DNS.6 = k8s_master</span><br><span class="line">IP.1 = 10.0.6.1              # ClusterServiceIP 地址</span><br><span class="line">IP.2 = 172.16.5.81           # master IP地址</span><br><span class="line">IP.3 = 10.1.0.1              # docker IP地址</span><br><span class="line">IP.4 = 10.0.6.200            # kubernetes DNS IP地址</span><br></pre></td></tr></table></figure></p><blockquote><p><strong>2.生成apiserver 证书对</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Generate the API server keypair.</span><br><span class="line">openssl genrsa -out apiserver.key 2048</span><br><span class="line"></span><br><span class="line">openssl req -new -key apiserver.key -out apiserver.csr -subj &quot;/CN=kubernetes/O=k8s&quot; -config openssl.cnf</span><br><span class="line"></span><br><span class="line">openssl x509 -req -in apiserver.csr -CA ca.pem -CAkey ca.key -CAcreateserial -out apiserver.pem -days 3650 -extensions v3_req -extfile openssl.cnf</span><br></pre></td></tr></table></figure></p></blockquote><p>一般生成的根证书(<code>ca.key, ca.pem</code>)与apiserver证书(<code>apiserver.key,apiserver.pem</code>)放置在Master节点的<code>/etc/kubernetes/kubernetesTLS/</code>路径下（这个路径是可以自定义修改的，不一定要用我这个）</p><hr><blockquote><p><strong>3.证书配置相关说明</strong></p></blockquote><p><strong>apiserver的配置中需要指定如下参数：</strong><br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">## <span class="type">Kubernetes</span>的访问证书配置：</span><br><span class="line">--token-auth-file=/etc/kubernetes/token.csv   </span><br><span class="line">--tls-cert-file=/etc/kubernetes/kubernetesTLS/apiserver.pem </span><br><span class="line">--tls-<span class="keyword">private</span>-key-file=/etc/kubernetes/kubernetesTLS/apiserver.key  </span><br><span class="line">--client-ca-file=/etc/kubernetes/kubernetesTLS/ca.pem  </span><br><span class="line">--service-account-key-file=/etc/kubernetes/kubernetesTLS/ca.key  </span><br><span class="line"></span><br><span class="line">## <span class="type">Etcd</span>的访问证书配置：</span><br><span class="line">--storage-backend=etcd3  </span><br><span class="line">--etcd-cafile=/etc/etcd/etcdSSL/ca.pem  </span><br><span class="line">--etcd-certfile=/etc/etcd/etcdSSL/etcd.pem  </span><br><span class="line">--etcd-keyfile=/etc/etcd/etcdSSL/etcd-key.pem</span><br></pre></td></tr></table></figure></p><p><strong>controller-manager的配置中需要指定如下参数：</strong><br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">## <span class="type">Kubernetes</span>的访问证书配置：</span><br><span class="line">--cluster-name=kubernetes  </span><br><span class="line">--cluster-signing-cert-file=/etc/kubernetes/kubernetesTLS/ca.pem  </span><br><span class="line">--cluster-signing-key-file=/etc/kubernetes/kubernetesTLS/ca.key  </span><br><span class="line">--service-account-<span class="keyword">private</span>-key-file=/etc/kubernetes/kubernetesTLS/ca.key  </span><br><span class="line">--root-ca-file=/etc/kubernetes/kubernetesTLS/ca.pem</span><br></pre></td></tr></table></figure></p><hr><blockquote><p><strong><em>admin集群管理员证书生成</em></strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">## 此证书用于kubectl，设置方式如下：</span><br><span class="line">openssl genrsa -out admin.key 2048</span><br><span class="line">openssl req -new -key admin.key -out admin.csr -subj &quot;/CN=admin/O=system:masters/OU=System&quot;</span><br><span class="line">openssl x509 -req -in admin.csr -CA ca.pem -CAkey ca.key -CAcreateserial -out admin.pem -days 3650</span><br></pre></td></tr></table></figure></p></blockquote><p><strong>说明：</strong></p><p>由于后续 <code>kube-apiserver 在启用RBAC模式</code>之后， 客户端(<code>如 kubelet、kube-proxy、Pod</code>)请求进行授权的时候会需要认证<code>用户名</code>、以及<code>用户组</code>；<br>那么所谓的<code>用户名</code>和<code>用户组</code>从<strong>哪里来定义</strong>呢？<br>我们来看看上面openssl创建证书的语句：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl req -new -key admin.key -out admin.csr -subj &quot;/CN=admin/O=system:masters/OU=System&quot;</span><br></pre></td></tr></table></figure></p><p>其中这里的<code>/CN=admin/O=system:masters/OU=System</code>就是在<code>CN</code>定义用户为<code>admin</code>，<code>O</code>定义用户组为<code>system:masters</code>，<code>OU</code> 指定<code>该证书的 Group 为 system:masters</code>。</p><blockquote><p><strong>那么定义好之后，在kubernetes中是怎么使用的呢？</strong></p></blockquote><p><code>kube-apiserver</code> 预定义了一些 <code>RBAC</code> 使用的 <code>RoleBindings（角色）</code>，如 <code>cluster-admin （角色）</code>将 <code>Group（组） system:masters</code>与 <code>Role（角色） cluster-admin</code> 绑定，该 <code>Role</code> 授予了调用<code>kube-apiserver</code> 的所有 API的权限；<br>那么当然的，我们创建<code>admin</code>的证书的时候，就要按照该上面的说明定义好<code>证书的组、用户</code>。</p><blockquote><p><strong>另外当kubelet使用该证书访问kube-apiserver是什么样的过程呢？</strong></p></blockquote><p>在证书的签名中，<code>OU</code> 指定该证书的 <code>Group 为 system:masters</code>，<code>kubelet</code> 使用该证书访问 <code>kube-apiserver</code> 时 ，由于证书被 <code>CA 签名</code>，所以<code>认证通过</code>，同时由于<code>证书用户组</code>为经过<code>预授权的 system:masters</code>，所以<code>被授予访问所有 API 的权限</code>；<br>同理，如果你是使用<code>CFSSL</code>来签名证书也需要这样去配置好用户和用户组。在这里就不单独写<code>CFSSL签kubernetes</code>的相关证书了。<br><strong>重要的是要好好理解<code>证书签名</code>与<code>kubernetes</code>的<code>RBAC</code>角色绑定的关系。</strong></p><hr><blockquote><p><strong><em>节点proxy证书生成</em></strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">openssl genrsa -out proxy.key 2048</span><br><span class="line">openssl req -new -key proxy.key -out proxy.csr -subj &quot;/CN=system:kube-proxy&quot;</span><br><span class="line">openssl x509 -req -in proxy.csr -CA ca.pem -CAkey ca.key -CAcreateserial -out proxy.pem -days 3650</span><br></pre></td></tr></table></figure></p></blockquote><p><strong>说明：</strong></p><blockquote><p><strong>从上面解析说明admin的CN签名与kubernetes角色绑定的关系中，这里简单一眼就看出CN是拿来定义proxy的用户的。</strong></p></blockquote><p><code>CN</code> 指定该证书的请求 <code>User（用户）</code> 为 <code>system:kube-proxy</code>；<br>在<code>kubernetes</code>的<code>RABC</code>默认角色绑定中，<code>kube-apiserver</code> 预定义的 <code>RoleBinding cluster-admin</code>将<code>User system:kube-proxy</code> 与 <code>Role system:node-proxier</code> 绑定，该 <code>Role</code> 授予了调用 <code>kube-apiserver Proxy</code> 相关 <code>API</code> 的权限；</p><hr><blockquote><p><strong><em>将生成的ca证书拷贝至准备部署的指定目录</em></strong></p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/13423234-d903ff4398343755.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>以上就是部署master节点所需要的证书文件了。</p><blockquote><p><strong>在这个过程CA产生的过程，大家肯定会角色笔者为什么要这么啰嗦详详细细去写那么多注释和说明。而且看了那么多内容之后，内心肯定觉得步骤好多呀，好烦躁。<br>不着急，步骤说明详细可以让读者的你更加好去理解；步骤多而烦躁我已经写好了自动化签订证书的脚本了。<br>在这里附上源码：</strong></p></blockquote><blockquote><ul><li><strong><em>第一步，创建openssl的cnf文件</em></strong><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">[root@server81 openssl]# cat create_openssl_cnf.sh </span><br><span class="line">#!/bin/bash</span><br><span class="line">basedir=$(cd `dirname $0`;pwd)</span><br><span class="line"></span><br><span class="line">################## Set PARAMS ######################</span><br><span class="line"></span><br><span class="line">MASTER_IP=`python -c &quot;import socket;print([(s.connect((&apos;8.8.8.8&apos;, 53)), s.getsockname()[0], s.close()) for s in [socket.socket(socket.AF_INET, socket.SOCK_DGRAM)]][0][1])&quot;`</span><br><span class="line">DockerServiceIP=&quot;10.1.0.1&quot;  ## 10.1.0.0/16</span><br><span class="line">ClusterServiceIP=&quot;10.0.6.1&quot; ## 10.0.6.0/24</span><br><span class="line">kubeDnsIP=&quot;10.0.6.200&quot;</span><br><span class="line"></span><br><span class="line">## function</span><br><span class="line">function create_openssl_cnf()&#123;</span><br><span class="line">cat &lt;&lt;EOF &gt; $basedir/openssl.cnf </span><br><span class="line">[req]</span><br><span class="line">req_extensions = v3_req</span><br><span class="line">distinguished_name = req_distinguished_name</span><br><span class="line">[req_distinguished_name]</span><br><span class="line">[ v3_req ]</span><br><span class="line">basicConstraints = CA:FALSE</span><br><span class="line">keyUsage = nonRepudiation, digitalSignature, keyEncipherment</span><br><span class="line">subjectAltName = @alt_names</span><br><span class="line">[alt_names]</span><br><span class="line">DNS.1 = kubernetes</span><br><span class="line">DNS.2 = kubernetes.default</span><br><span class="line">DNS.3 = kubernetes.default.svc</span><br><span class="line">DNS.4 = kubernetes.default.svc.cluster</span><br><span class="line">DNS.5 = kubernetes.default.svc.cluster.local</span><br><span class="line">DNS.6 = k8s_master</span><br><span class="line">IP.1 = $ClusterServiceIP              # ClusterServiceIP 地址</span><br><span class="line">IP.2 = $MASTER_IP                     # master IP地址</span><br><span class="line">IP.3 = $DockerServiceIP               # docker IP地址</span><br><span class="line">IP.4 = $kubeDnsIP                     # kubernetes DNS IP地址</span><br><span class="line">EOF</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">create_openssl_cnf</span><br><span class="line">[root@server81 openssl]#</span><br></pre></td></tr></table></figure></li></ul></blockquote><blockquote><p><img src="https://upload-images.jianshu.io/upload_images/13423234-f557505ef4a66714.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p></blockquote><blockquote><p><strong><em>- 第二步，创建master所需的TLS证书</em></strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line">[root@server81 install_k8s_master]# ls</span><br><span class="line">configDir     Step1_create_CA.sh  Step2_create_token.sh       Step4_install_controller.sh  Step6_create_kubeconfig_file.sh</span><br><span class="line">Implement.sh  Step1_file          Step3_install_apiserver.sh  Step5_install_scheduler.sh   Step7_set_master_info.sh</span><br><span class="line">[root@server81 install_k8s_master]# </span><br><span class="line">[root@server81 install_k8s_master]# vim Step1_create_CA.sh </span><br><span class="line">[root@server81 install_k8s_master]# cat Step1_create_CA.sh </span><br><span class="line">#!/bin/bash</span><br><span class="line">basedir=$(cd `dirname $0`;pwd)</span><br><span class="line">configdir=$basedir/Step1_file</span><br><span class="line">openssldir=$configdir/openssl</span><br><span class="line">ssldir=$configdir/kubernetesTLS</span><br><span class="line">kubernetsDir=/etc/kubernetes</span><br><span class="line">kubernetsTLSDir=/etc/kubernetes/kubernetesTLS</span><br><span class="line"></span><br><span class="line">################## Set PARAMS ######################</span><br><span class="line">MASTER_IP=`python -c &quot;import socket;print([(s.connect((&apos;8.8.8.8&apos;, 53)), s.getsockname()[0], s.close()) for s in [socket.socket(socket.AF_INET, socket.SOCK_DGRAM)]][0][1])&quot;`</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## function and implments</span><br><span class="line">function check_firewalld_selinux()&#123;</span><br><span class="line">  systemctl status firewalld</span><br><span class="line">  /usr/sbin/sestatus -v</span><br><span class="line">  swapoff -a</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">check_firewalld_selinux</span><br><span class="line"></span><br><span class="line">function create_ssl()&#123;</span><br><span class="line">  cd $configdir &amp;&amp; rm -rf $ssldir &amp;&amp; mkdir -p $ssldir</span><br><span class="line">  cd $ssldir &amp;&amp; \</span><br><span class="line">  # Generate the root CA. </span><br><span class="line">  openssl genrsa -out ca.key 2048 </span><br><span class="line">  openssl req -x509 -new -nodes -key ca.key -days 10000 -out ca.pem -subj &quot;/CN=kubernetes/O=k8s&quot;</span><br><span class="line">  ls $ssldir</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">create_ssl </span><br><span class="line"></span><br><span class="line">function create_openssl_cnf()&#123;</span><br><span class="line">  sh $openssldir/create_openssl_cnf.sh </span><br><span class="line">  cat $openssldir/openssl.cnf &gt; $ssldir/openssl.cnf</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">create_openssl_cnf</span><br><span class="line"></span><br><span class="line">function create_apiserver_key_pem()&#123;</span><br><span class="line">  cd $ssldir &amp;&amp; \</span><br><span class="line">  openssl genrsa -out apiserver.key 2048</span><br><span class="line">  openssl req -new -key apiserver.key -out apiserver.csr -subj &quot;/CN=kubernetes/O=k8s&quot; -config openssl.cnf</span><br><span class="line">  openssl x509 -req -in apiserver.csr -CA ca.pem -CAkey ca.key -CAcreateserial -out apiserver.pem -days 3650 -extensions v3_req -extfile openssl.cnf</span><br><span class="line">  ls $ssldir</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">create_apiserver_key_pem</span><br><span class="line"></span><br><span class="line">function create_admin_key_pem()&#123;</span><br><span class="line">  cd $ssldir &amp;&amp; \</span><br><span class="line">  openssl genrsa -out admin.key 2048 </span><br><span class="line">  openssl req -new -key admin.key -out admin.csr -subj &quot;/CN=admin/O=system:masters/OU=System&quot; </span><br><span class="line">  openssl x509 -req -in admin.csr -CA ca.pem -CAkey ca.key -CAcreateserial -out admin.pem -days 3650</span><br><span class="line">  ls $ssldir</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">create_admin_key_pem</span><br><span class="line"></span><br><span class="line">function create_proxy_key_pem()&#123;</span><br><span class="line">  cd $ssldir &amp;&amp; \</span><br><span class="line">  openssl genrsa -out proxy.key 2048</span><br><span class="line">  openssl req -new -key proxy.key -out proxy.csr -subj &quot;/CN=system:kube-proxy&quot;</span><br><span class="line">  openssl x509 -req -in proxy.csr -CA ca.pem -CAkey ca.key -CAcreateserial -out proxy.pem -days 3650</span><br><span class="line">  ls $ssldir</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">create_proxy_key_pem</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">function setup_ca()&#123;</span><br><span class="line">  rm -rf $kubernetsDir</span><br><span class="line">  mkdir -p $kubernetsTLSDir</span><br><span class="line">  cat $ssldir/ca.pem &gt; $kubernetsTLSDir/ca.pem</span><br><span class="line">  cat $ssldir/ca.key &gt; $kubernetsTLSDir/ca.key</span><br><span class="line">  cat $ssldir/apiserver.pem &gt; $kubernetsTLSDir/apiserver.pem</span><br><span class="line">  cat $ssldir/apiserver.key &gt; $kubernetsTLSDir/apiserver.key</span><br><span class="line">  cat $ssldir/admin.pem &gt; $kubernetsTLSDir/admin.pem</span><br><span class="line">  cat $ssldir/admin.key &gt; $kubernetsTLSDir/admin.key</span><br><span class="line">  cat $ssldir/proxy.pem &gt; $kubernetsTLSDir/proxy.pem</span><br><span class="line">  cat $ssldir/proxy.key &gt; $kubernetsTLSDir/proxy.key</span><br><span class="line"></span><br><span class="line">  echo &quot;checking TLS file:&quot;</span><br><span class="line">  ls $kubernetsTLSDir</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setup_ca</span><br><span class="line">[root@server81 install_k8s_master]#</span><br></pre></td></tr></table></figure></p></blockquote><p><strong>执行生成证书如下</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">[root@server81 install_k8s_master]# ./Step1_create_CA.sh </span><br><span class="line">● firewalld.service - firewalld - dynamic firewall daemon</span><br><span class="line">   Loaded: loaded (/usr/lib/systemd/system/firewalld.service; disabled; vendor preset: enabled)</span><br><span class="line">   Active: inactive (dead)</span><br><span class="line">     Docs: man:firewalld(1)</span><br><span class="line">SELinux status:                 disabled</span><br><span class="line">Generating RSA private key, 2048 bit long modulus</span><br><span class="line">................................................+++</span><br><span class="line">............................................................................+++</span><br><span class="line">e is 65537 (0x10001)</span><br><span class="line">ca.keyca.pem</span><br><span class="line">Generating RSA private key, 2048 bit long modulus</span><br><span class="line">.......................................................................................+++</span><br><span class="line">.............+++</span><br><span class="line">e is 65537 (0x10001)</span><br><span class="line">Signature ok</span><br><span class="line">subject=/CN=kubernetes/O=k8s</span><br><span class="line">Getting CA Private Key</span><br><span class="line">apiserver.csr  apiserver.key  apiserver.pem  ca.key  ca.pem  ca.srl  openssl.cnf</span><br><span class="line">Generating RSA private key, 2048 bit long modulus</span><br><span class="line">.......................................+++</span><br><span class="line">...........+++</span><br><span class="line">e is 65537 (0x10001)</span><br><span class="line">Signature ok</span><br><span class="line">subject=/CN=admin/O=system:masters/OU=System</span><br><span class="line">Getting CA Private Key</span><br><span class="line">admin.csr  admin.key  admin.pem  apiserver.csrapiserver.key  apiserver.pem  ca.key  ca.pem  ca.srl  openssl.cnf</span><br><span class="line">Generating RSA private key, 2048 bit long modulus</span><br><span class="line">...+++</span><br><span class="line">..+++</span><br><span class="line">e is 65537 (0x10001)</span><br><span class="line">Signature ok</span><br><span class="line">subject=/CN=system:kube-proxy</span><br><span class="line">Getting CA Private Key</span><br><span class="line">admin.csr  admin.pem  apiserver.key  ca.key  ca.srl       proxy.csr  proxy.pem</span><br><span class="line">admin.key  apiserver.csr  apiserver.pem  ca.pem  openssl.cnf  proxy.key</span><br><span class="line">checking TLS file:</span><br><span class="line">admin.key  admin.pem  apiserver.key  apiserver.pem  ca.key  ca.pem  proxy.key  proxy.pem</span><br><span class="line">[root@server81 install_k8s_master]#</span><br><span class="line">[root@server81 install_k8s_master]# ls</span><br><span class="line">configDir     Step1_create_CA.sh  Step2_create_token.sh       Step4_install_controller.sh  Step6_create_kubeconfig_file.sh</span><br><span class="line">Implement.sh  Step1_file          Step3_install_apiserver.sh  Step5_install_scheduler.sh   Step7_set_master_info.sh</span><br><span class="line">[root@server81 install_k8s_master]#</span><br><span class="line">[root@server81 install_k8s_master]# ls /etc/kubernetes/</span><br><span class="line">kubernetesTLS</span><br><span class="line">[root@server81 install_k8s_master]# ls /etc/kubernetes/kubernetesTLS/</span><br><span class="line">admin.key  admin.pem  apiserver.key  apiserver.pem  ca.key  ca.pem  proxy.key  proxy.pem</span><br><span class="line">[root@server81 install_k8s_master]# </span><br><span class="line">[root@server81 install_k8s_master]# ls -ll /etc/kubernetes/kubernetesTLS/</span><br><span class="line">total 32</span><br><span class="line">-rw-r--r-- 1 root root 1675 Aug 19 22:21 admin.key</span><br><span class="line">-rw-r--r-- 1 root root 1050 Aug 19 22:21 admin.pem</span><br><span class="line">-rw-r--r-- 1 root root 1675 Aug 19 22:21 apiserver.key</span><br><span class="line">-rw-r--r-- 1 root root 1302 Aug 19 22:21 apiserver.pem</span><br><span class="line">-rw-r--r-- 1 root root 1679 Aug 19 22:21 ca.key</span><br><span class="line">-rw-r--r-- 1 root root 1135 Aug 19 22:21 ca.pem</span><br><span class="line">-rw-r--r-- 1 root root 1679 Aug 19 22:21 proxy.key</span><br><span class="line">-rw-r--r-- 1 root root 1009 Aug 19 22:21 proxy.pem</span><br><span class="line">[root@server81 install_k8s_master]#</span><br></pre></td></tr></table></figure></p><p><strong><em>怎么样？有了这个脚本是不是感觉世界都美好了。只要理解清楚详细配置步骤，然后执行一下脚本，你就可以拥有更加多的咖啡时间了。</em></strong></p><hr><h2 id=""><a href="#" class="headerlink" title=" "></a> <img src="https://upload-images.jianshu.io/upload_images/13423234-6804d40e7a12773b.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></h2><h2 id="部署master"><a href="#部署master" class="headerlink" title="部署master"></a>部署master</h2><blockquote><p><strong><em>将master所需的二进制执行文件拷贝至/user/bin目录下</em></strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">basedir=$(cd `dirname $0`;pwd)</span><br><span class="line">softwaredir=$basedir/../install_kubernetes_software</span><br><span class="line"></span><br><span class="line">function copy_bin()&#123;</span><br><span class="line">  cp -v $softwaredir/kube-apiserver $binDir</span><br><span class="line">  cp -v $softwaredir/kube-controller-manager $binDir</span><br><span class="line">  cp -v $softwaredir/kube-scheduler $binDir</span><br><span class="line">  cp -v $softwaredir/kubectl $binDir</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">copy_bin</span><br></pre></td></tr></table></figure></p></blockquote><hr><blockquote><p> <strong>API Server权限控制方式介绍</strong></p></blockquote><p>API Server权限控制分为三种：<br><strong>Authentication（身份认证）、Authorization(授权)、AdmissionControl(准入控制)</strong>。</p><p><strong>身份认证：</strong><br>       当客户端向Kubernetes非只读端口发起API请求时，Kubernetes通过三种方式来认证用户的合法性。kubernetes中，验证用户是否有权限操作api的方式有三种：证书认证，token认证，基本信息认证。</p><p>①　证书认证</p><pre><code>设置apiserver的启动参数：--client_ca_file=SOMEFILE ，这个被引用的文件中包含的验证client的证书，如果被验证通过，那么这个验证记录中的主体对象将会作为请求的username。</code></pre><p>②　Token认证（<code>本次使用token认证的方式</code>）</p><pre><code>设置apiserver的启动参数：--token_auth_file=SOMEFILE。 token file的格式包含三列：token，username，userid。当使用token作为验证方式时，在对apiserver的http请求中，增加 一个Header字段：Authorization ，将它的值设置为：Bearer SOMETOKEN。</code></pre><p>③　基本信息认证</p><pre><code>设置apiserver的启动参数：--basic_auth_file=SOMEFILE，如果更改了文件中的密码，只有重新启动apiserver使 其重新生效。其文件的基本格式包含三列：password，username，userid。当使用此作为认证方式时，在对apiserver的http 请求中，增加一个Header字段：Authorization，将它的值设置为： Basic BASE64ENCODEDUSER:PASSWORD。</code></pre><h2 id="-1"><a href="#-1" class="headerlink" title=", "></a>, </h2><blockquote><p><strong><em>创建 TLS Bootstrapping Token</em></strong></p></blockquote><p><strong>Token auth file</strong><br>Token可以是任意的包涵128 bit的字符串，可以使用安全的随机数发生器生成。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">basedir=$(cd `dirname $0`;pwd)</span><br><span class="line"></span><br><span class="line">## set param </span><br><span class="line">BOOTSTRAP_TOKEN=$(head -c 16 /dev/urandom | od -An -t x | tr -d &apos; &apos;)</span><br><span class="line"></span><br><span class="line">## function and implments</span><br><span class="line">function save_BOOTSTRAP_TOKEN()&#123;</span><br><span class="line">cat &gt; $configConfDir/BOOTSTRAP_TOKEN &lt;&lt;EOF</span><br><span class="line">$BOOTSTRAP_TOKEN</span><br><span class="line">EOF</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">save_BOOTSTRAP_TOKEN</span><br><span class="line"></span><br><span class="line">function create_token()&#123;</span><br><span class="line">cat &gt; $kubernetesDir/token.csv &lt;&lt;EOF</span><br><span class="line">$BOOTSTRAP_TOKEN,kubelet-bootstrap,10001,&quot;system:kubelet-bootstrap&quot;</span><br><span class="line">EOF</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">create_token</span><br></pre></td></tr></table></figure><p>后续将token.csv发到所有机器（Master 和 Node）的 /etc/kubernetes/ 目录。</p><hr><blockquote><p><strong><em>创建admin用户的集群参数</em></strong></p></blockquote><p>在前面使用openssl创建TLS证书的时候已经对证书的用户以及组签名至证书之中，那么下一步就是定义admin用户在集群中的参数了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">basedir=$(cd `dirname $0`;pwd)</span><br><span class="line"></span><br><span class="line">## set param </span><br><span class="line">MASTER_IP=`python -c &quot;import socket;print([(s.connect((&apos;8.8.8.8&apos;, 53)), s.getsockname()[0], s.close()) for s in [socket.socket(socket.AF_INET, socket.SOCK_DGRAM)]][0][1])&quot;`</span><br><span class="line">KUBE_APISERVER=&quot;https://$MASTER_IP:6443&quot;</span><br><span class="line"></span><br><span class="line"># 设置集群参数</span><br><span class="line">function config_cluster_param()&#123;</span><br><span class="line">  kubectl config set-cluster kubernetes \</span><br><span class="line">    --certificate-authority=$kubernetesTLSDir/ca.pem \</span><br><span class="line">    --embed-certs=true \</span><br><span class="line">    --server=$KUBE_APISERVER</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">config_cluster_param</span><br><span class="line"></span><br><span class="line"># 设置管理员认证参数</span><br><span class="line">function config_admin_credentials()&#123;</span><br><span class="line">  kubectl config set-credentials admin \</span><br><span class="line">    --client-certificate=$kubernetesTLSDir/admin.pem \</span><br><span class="line">    --client-key=$kubernetesTLSDir/admin.key \</span><br><span class="line">    --embed-certs=true</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">config_admin_credentials</span><br><span class="line"></span><br><span class="line"># 设置管理员上下文参数</span><br><span class="line">function config_admin_context()&#123;</span><br><span class="line">  kubectl config set-context kubernetes --cluster=kubernetes --user=admin</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">config_admin_context</span><br><span class="line"></span><br><span class="line"># 设置集群默认上下文参数</span><br><span class="line">function config_default_context()&#123;</span><br><span class="line">  kubectl config use-context kubernetes</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">config_default_context</span><br></pre></td></tr></table></figure></p><p>值得注意的采用<code>token认证</code>的方式，<code>kubernetes</code>在后续是需要创建<code>bootstrap.kubeconfig</code>的文件的，那么我们需要将<code>admin</code>相关的<code>TLS证书文件</code>写入这个<code>bootstrap.kubeconfig</code>文件。</p><blockquote><p><strong>该如何将admin的TLS文件参数写入bootstrap.kubeconfig呢？</strong></p></blockquote><p>这时候就要借助这个<code>--embed-certs</code> 的参数了，当该参数为 <code>true</code> 时表示将 <code>certificate-authority 证书</code>写入到生成的 <code>bootstrap.kubeconfig</code>文件中。<br>在指定了参数之后，后续由 <code>kube-apiserver</code> 自动生成；</p><hr><blockquote><p><strong><em>安装kube-apiserver</em></strong></p></blockquote><blockquote><ol><li>编写kube-apiserver.service（/usr/lib/systemd/system）</li></ol></blockquote><p>将kube-apiserver.service文件写入/usr/lib/systemd/system/中，后续用来启动二进制文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Kube-apiserver Service</span><br><span class="line">Documentation=https://github.com/GoogleCloudPlatform/kubernetes</span><br><span class="line"></span><br><span class="line">After=network.target</span><br><span class="line">[Service]</span><br><span class="line">Type=notify</span><br><span class="line">EnvironmentFile=-/etc/kubernetes/config</span><br><span class="line">EnvironmentFile=-/etc/kubernetes/apiserver</span><br><span class="line">ExecStart=/usr/bin/kube-apiserver \</span><br><span class="line">        $KUBE_LOGTOSTDERR \</span><br><span class="line">        $KUBE_LOG_LEVEL \</span><br><span class="line">        $KUBE_ETCD_SERVERS \</span><br><span class="line">        $KUBE_API_ADDRESS \</span><br><span class="line">        $KUBE_API_PORT \</span><br><span class="line">        $KUBELET_PORT \</span><br><span class="line">        $KUBE_ALLOW_PRIV \</span><br><span class="line">        $KUBE_SERVICE_ADDRESSES \</span><br><span class="line">        $KUBE_ADMISSION_CONTROL \</span><br><span class="line">        $KUBE_API_ARGS</span><br><span class="line">Restart=always</span><br><span class="line">LimitNOFILE=65536</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=default.target</span><br></pre></td></tr></table></figure></p><blockquote><p>kube-apiserver.service参数说明</p></blockquote><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">EnvironmentFile=-/etc/kubernetes/config</span><br><span class="line">EnvironmentFile=-/etc/kubernetes/apiserver</span><br></pre></td></tr></table></figure><p>说明：定义apiserver加载的两个配置文件</p><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">ExecStart=/usr/bin/kube-apiserver \</span><br><span class="line">        $KUBE_LOGTOSTDERR \</span><br><span class="line">        $KUBE_LOG_LEVEL \</span><br><span class="line">        $KUBE_ETCD_SERVERS \</span><br><span class="line">        $KUBE_API_ADDRESS \</span><br><span class="line">        $KUBE_API_PORT \</span><br><span class="line">        $KUBELET_PORT \</span><br><span class="line">        $KUBE_ALLOW_PRIV \</span><br><span class="line">        $KUBE_SERVICE_ADDRESSES \</span><br><span class="line">        $KUBE_ADMISSION_CONTROL \</span><br><span class="line">        $KUBE_API_ARGS</span><br></pre></td></tr></table></figure><p>说明：定义二进制可执行文件启用的文件路径<code>/usr/bin/kube-apiserver</code>,并且设置多个启用参数的变量。这些变量都是从配置文件中获取的。</p><hr><blockquote><p>2.编写config配置文件（/etc/kubernetes）</p></blockquote><p><code>config配置文件</code>是提供<code>apiserver、controller-manager、scheduler</code>服务读取<code>kubernetes</code>相关通用参数配置的。<br>将<code>config配置文件</code>写入<code>/etc/kubernetes</code>目录下，当然这个<code>/etc/kubernetes</code>也是可以自定义的，需要改动的话，注意要在<code>service</code>的环境变量文件填写处修改即可。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">[root@server81 kubernetes]# vim config </span><br><span class="line"></span><br><span class="line">###</span><br><span class="line"># kubernetes system config</span><br><span class="line">#</span><br><span class="line"># The following values are used to configure various aspects of all</span><br><span class="line"># kubernetes services, including</span><br><span class="line">#</span><br><span class="line">#   kube-apiserver.service</span><br><span class="line">#   kube-controller-manager.service</span><br><span class="line">#   kube-scheduler.service</span><br><span class="line">#   kubelet.service</span><br><span class="line">#   kube-proxy.service</span><br><span class="line"># logging to stderr means we get it in the systemd journal</span><br><span class="line"># 表示错误日志记录到文件还是输出到stderr。</span><br><span class="line">KUBE_LOGTOSTDERR=&quot;--logtostderr=true&quot;</span><br><span class="line"></span><br><span class="line"># journal message level, 0 is debug</span><br><span class="line"># 日志等级。设置0则是debug等级</span><br><span class="line">KUBE_LOG_LEVEL=&quot;--v=0&quot;</span><br><span class="line"></span><br><span class="line"># Should this cluster be allowed to run privileged docker containers</span><br><span class="line"># 允许运行特权容器。</span><br><span class="line">KUBE_ALLOW_PRIV=&quot;--allow-privileged=true&quot;</span><br><span class="line"></span><br><span class="line"># How the controller-manager, scheduler, and proxy find the apiserver</span><br><span class="line"># 设置master服务器的访问</span><br><span class="line">KUBE_MASTER=&quot;--master=http://172.16.5.81:8080&quot;</span><br></pre></td></tr></table></figure></p><hr><blockquote><ol start="2"><li>编写apiserver配置文件（/etc/kubernetes）</li></ol></blockquote><p><code>apiserver配置文件</code>是单独提供<code>apiserver服务</code>读取相关参数的。<br>将<code>apiserver配置文件</code>写入<code>/etc/kubernetes</code>目录下。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">###</span><br><span class="line">## kubernetes system config</span><br><span class="line">##</span><br><span class="line">## The following values are used to configure the kube-apiserver</span><br><span class="line">##</span><br><span class="line">#</span><br><span class="line">## The address on the local server to listen to.</span><br><span class="line">KUBE_API_ADDRESS=&quot;--advertise-address=172.16.5.81 --bind-address=172.16.5.81 --insecure-bind-address=172.16.5.81&quot;</span><br><span class="line">#</span><br><span class="line">## The port on the local server to listen on.</span><br><span class="line">#KUBE_API_PORT=&quot;--port=8080&quot;</span><br><span class="line">#</span><br><span class="line">## Port minions listen on</span><br><span class="line">#KUBELET_PORT=&quot;--kubelet-port=10250&quot;</span><br><span class="line">#</span><br><span class="line">## Comma separated list of nodes in the etcd cluster</span><br><span class="line">KUBE_ETCD_SERVERS=&quot;--etcd-servers=https://172.16.5.81:2379,https://172.16.5.86:2379,https://172.16.5.87:2379&quot;</span><br><span class="line">#</span><br><span class="line">## Address range to use for services</span><br><span class="line">KUBE_SERVICE_ADDRESSES=&quot;--service-cluster-ip-range=10.0.6.0/24&quot;</span><br><span class="line">#</span><br><span class="line">## default admission control policies</span><br><span class="line">KUBE_ADMISSION_CONTROL=&quot;--admission-control=ServiceAccount,NamespaceLifecycle,NamespaceExists,LimitRanger,ResourceQuota,NodeRestriction&quot;</span><br><span class="line"></span><br><span class="line">## Add your own!</span><br><span class="line">KUBE_API_ARGS=&quot;--authorization-mode=Node,RBAC  --runtime-config=rbac.authorization.k8s.io/v1beta1  --kubelet-https=true  --token-auth-file=/etc/kubernetes/token.csv  --service-node-port-range=30000-32767  --tls-cert-file=/etc/kubernetes/kubernetesTLS/apiserver.pem  --tls-private-key-file=/etc/kubernetes/kubernetesTLS/apiserver.key  --client-ca-file=/etc/kubernetes/kubernetesTLS/ca.pem  --service-account-key-file=/etc/kubernetes/kubernetesTLS/ca.key  --storage-backend=etcd3  --etcd-cafile=/etc/etcd/etcdSSL/ca.pem  --etcd-certfile=/etc/etcd/etcdSSL/etcd.pem  --etcd-keyfile=/etc/etcd/etcdSSL/etcd-key.pem  --enable-swagger-ui=true  --apiserver-count=3  --audit-log-maxage=30  --audit-log-maxbackup=3  --audit-log-maxsize=100  --audit-log-path=/var/lib/audit.log  --event-ttl=1h&quot;</span><br></pre></td></tr></table></figure></p><blockquote><p><strong>配置文件相关参数说明如下：</strong></p></blockquote><blockquote><p>MASTER IP地址以及节点IP地址的绑定<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">## The address on the local server to listen to.</span><br><span class="line">KUBE_API_ADDRESS=&quot;--advertise-address=$MASTER_IP --bind-address=$MASTER_IP --insecure-bind-address=$MASTER_IP&quot;</span><br></pre></td></tr></table></figure></p></blockquote><p>说明：MASTER_IP就是填写安装master节点服务的IP地址，示例：<br>–advertise-address=172.16.5.81 –bind-address=172.16.5.81 –insecure-bind-address=172.16.5.81</p><blockquote><p>etcd集群的endpoint访问地址<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">## Comma separated list of nodes in the etcd cluster</span><br><span class="line">KUBE_ETCD_SERVERS=&quot;--etcd-servers=$ETCD_ENDPOINT&quot;</span><br></pre></td></tr></table></figure></p></blockquote><p>说明：ETCD_ENDPOINT访问etcd集群的方式，示例：<br>–etcd-servers=<a href="https://172.16.5.81:2379,https://172.16.5.86:2379,https://172.16.5.87:2379" target="_blank" rel="noopener">https://172.16.5.81:2379,https://172.16.5.86:2379,https://172.16.5.87:2379</a><br>如果是单台etcd的话，那么一个的单台IP即可，示例：<br>–etcd-servers=<a href="">https://172.16.5.81:2379</a></p><blockquote><p>kubernetes中service定义的虚拟网段</p></blockquote><p>kubernetes主要分为pods的IP网段、service的IP网段，这里定义的是service的虚拟IP网段。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">## Address range to use for services</span><br><span class="line">KUBE_SERVICE_ADDRESSES=&quot;--service-cluster-ip-range=10.0.6.0/24&quot;</span><br></pre></td></tr></table></figure><blockquote><p>配置kubernetes的认证控制启动插件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">## default admission control policies</span><br><span class="line">KUBE_ADMISSION_CONTROL=&quot;--admission-control=ServiceAccount,NamespaceLifecycle,NamespaceExists,LimitRanger,ResourceQuota,NodeRestriction&quot;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>配置多个自定义参数</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">## Add your own!</span><br><span class="line">KUBE_API_ARGS=&quot;--authorization-mode=Node,RBAC \</span><br><span class="line"> --runtime-config=rbac.authorization.k8s.io/v1beta1 \</span><br><span class="line"> --kubelet-https=true \                                                         </span><br><span class="line"> --token-auth-file=$kubernetesDir/token.csv \                  </span><br><span class="line"> --service-node-port-range=30000-32767 \</span><br><span class="line"> --tls-cert-file=$kubernetesTLSDir/apiserver.pem \</span><br><span class="line"> --tls-private-key-file=$kubernetesTLSDir/apiserver.key \</span><br><span class="line"> --client-ca-file=$kubernetesTLSDir/ca.pem \</span><br><span class="line"> --service-account-key-file=$kubernetesTLSDir/ca.key \</span><br><span class="line"> --storage-backend=etcd3 \</span><br><span class="line"> --etcd-cafile=$etcdCaPem \</span><br><span class="line"> --etcd-certfile=$etcdPem \</span><br><span class="line"> --etcd-keyfile=$etcdKeyPem \</span><br><span class="line"> --enable-swagger-ui=true \</span><br><span class="line"> --apiserver-count=3 \</span><br><span class="line"> --audit-log-maxage=30 \</span><br><span class="line"> --audit-log-maxbackup=3 \</span><br><span class="line"> --audit-log-maxsize=100 \</span><br><span class="line"> --audit-log-path=/var/lib/audit.log \</span><br><span class="line"> --event-ttl=1h&quot;</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td>–authorization-mode=Node,RBAC</td><td style="text-align:left">启用Node RBAC插件</td></tr><tr><td>–runtime-config=rbac.authorization.k8s.io/v1beta1</td><td style="text-align:left">运行的rabc配置文件</td></tr><tr><td>–kubelet-https=true</td><td style="text-align:left">启用https</td></tr><tr><td>–token-auth-file=$kubernetesDir/token.csv</td><td style="text-align:left">指定生成token文件</td></tr><tr><td>–service-node-port-range=30000-32767</td><td style="text-align:left">设置node port端口号范围30000~32767</td></tr><tr><td>–tls-cert-file=$kubernetesTLSDir/apiserver.pem</td><td style="text-align:left">指定apiserver的tls公钥证书</td></tr><tr><td>–tls-private-key-file=$kubernetesTLSDir/apiserver.key</td><td style="text-align:left">指定apiserver的tls私钥证书</td></tr><tr><td>–client-ca-file=$kubernetesTLSDir/ca.pem</td><td style="text-align:left">指定TLS证书的ca根证书公钥</td></tr><tr><td>–service-account-key-file=$kubernetesTLSDir/ca.key</td><td style="text-align:left">指定apiserver的tls证书</td></tr><tr><td>–storage-backend=etcd3</td><td style="text-align:left">指定etcd存储为version 3系列</td></tr><tr><td>–etcd-cafile=$etcdCaPem</td><td style="text-align:left">指定etcd访问的ca根证书公钥</td></tr><tr><td>–etcd-certfile=$etcdPem</td><td style="text-align:left">指定etcd访问的TLS证书公钥</td></tr><tr><td>–etcd-keyfile=$etcdKeyPem</td><td style="text-align:left">指定etcd访问的TLS证书私钥</td></tr><tr><td>–enable-swagger-ui=true</td><td style="text-align:left">启用 swagger-ui 功能，Kubernetes使用了swagger-ui提供API在线查询功能</td></tr><tr><td>–apiserver-count=3</td><td style="text-align:left">设置集群中运行的API Sever数量，这种使用单个也没关系</td></tr><tr><td>–event-ttl=1h</td><td style="text-align:left">API Server 对于各种审计时间保存1小时</td></tr></tbody></table><p><strong><em>到此，关于apiserver的service以及配置文件基本说明清楚了。还有疑问的就给我留言吧。</em></strong></p><blockquote><p>3.启动apiserver<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl enable kube-apiserver</span><br><span class="line">systemctl start kube-apiserver</span><br><span class="line">systemctl status kube-apiserver</span><br></pre></td></tr></table></figure></p></blockquote><p>执行如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">[root@server81 install_kubernetes]# systemctl daemon-reload</span><br><span class="line">[root@server81 install_kubernetes]# systemctl enable kube-apiserver</span><br><span class="line">[root@server81 install_kubernetes]# systemctl start kube-apiserver</span><br><span class="line">[root@server81 install_kubernetes]# systemctl status kube-apiserver</span><br><span class="line">● kube-apiserver.service - Kube-apiserver Service</span><br><span class="line">   Loaded: loaded (/usr/lib/systemd/system/kube-apiserver.service; enabled; vendor preset: disabled)</span><br><span class="line">   Active: active (running) since Sun 2018-08-19 22:57:48 HKT; 11h ago</span><br><span class="line">     Docs: https://github.com/GoogleCloudPlatform/kubernetes</span><br><span class="line"> Main PID: 1688 (kube-apiserver)</span><br><span class="line">   CGroup: /system.slice/kube-apiserver.service</span><br><span class="line">           └─1688 /usr/bin/kube-apiserver --logtostderr=true --v=0 --etcd-servers=https://172.16.5.81:2379,https://172.16.5.86:2379,...</span><br><span class="line"></span><br><span class="line">Aug 19 22:57:51 server81 kube-apiserver[1688]: I0819 22:57:51.415631    1688 storage_rbac.go:246] created role.rbac.authorizat...public</span><br><span class="line">Aug 19 22:57:51 server81 kube-apiserver[1688]: I0819 22:57:51.448673    1688 controller.go:597] quota admission added evaluato...dings&#125;</span><br><span class="line">Aug 19 22:57:51 server81 kube-apiserver[1688]: I0819 22:57:51.454356    1688 storage_rbac.go:276] created rolebinding.rbac.aut...system</span><br><span class="line">Aug 19 22:57:51 server81 kube-apiserver[1688]: I0819 22:57:51.496380    1688 storage_rbac.go:276] created rolebinding.rbac.aut...system</span><br><span class="line">Aug 19 22:57:51 server81 kube-apiserver[1688]: I0819 22:57:51.534031    1688 storage_rbac.go:276] created rolebinding.rbac.aut...system</span><br><span class="line">Aug 19 22:57:51 server81 kube-apiserver[1688]: I0819 22:57:51.579370    1688 storage_rbac.go:276] created rolebinding.rbac.aut...system</span><br><span class="line">Aug 19 22:57:51 server81 kube-apiserver[1688]: I0819 22:57:51.612662    1688 storage_rbac.go:276] created rolebinding.rbac.aut...system</span><br><span class="line">Aug 19 22:57:51 server81 kube-apiserver[1688]: I0819 22:57:51.652351    1688 storage_rbac.go:276] created rolebinding.rbac.aut...public</span><br><span class="line">Aug 20 01:00:00 server81 kube-apiserver[1688]: I0820 01:00:00.330487    1688 trace.go:76] Trace[864267216]: &quot;GuaranteedUpdate ...75ms):</span><br><span class="line">Aug 20 01:00:00 server81 kube-apiserver[1688]: Trace[864267216]: [683.232535ms] [674.763984ms] Transaction prepared</span><br><span class="line">Hint: Some lines were ellipsized, use -l to show in full.</span><br><span class="line">[root@server81 install_kubernetes]#</span><br></pre></td></tr></table></figure></p><blockquote><h2 id="安装kube-controller-manager"><a href="#安装kube-controller-manager" class="headerlink" title="安装kube-controller-manager"></a>安装kube-controller-manager</h2></blockquote><blockquote><p><strong>1. 编写kube-controller-manager.service（/usr/lib/systemd/system）</strong></p></blockquote><p>将<code>kube-controller-manager.service</code>写入<code>/usr/lib/systemd/system</code>目录下，提供二进制文件的<code>service</code>启动文件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[root@server81 install_k8s_master]# cat /usr/lib/systemd/system/kube-controller-manager.service </span><br><span class="line">[Unit]</span><br><span class="line">Description=Kube-controller-manager Service</span><br><span class="line">Documentation=https://github.com/GoogleCloudPlatform/kubernetes</span><br><span class="line">After=network.target</span><br><span class="line">After=kube-apiserver.service</span><br><span class="line">Requires=kube-apiserver.service</span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">EnvironmentFile=-/etc/kubernetes/config</span><br><span class="line">EnvironmentFile=-/etc/kubernetes/controller-manager</span><br><span class="line">ExecStart=/usr/bin/kube-controller-manager \</span><br><span class="line">        $KUBE_LOGTOSTDERR \</span><br><span class="line">        $KUBE_LOG_LEVEL \</span><br><span class="line">        $KUBE_MASTER \</span><br><span class="line">        $KUBE_CONTROLLER_MANAGER_ARGS</span><br><span class="line">Restart=always</span><br><span class="line">LimitNOFILE=65536</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=default.target</span><br><span class="line">[root@server81 install_k8s_master]#</span><br></pre></td></tr></table></figure></p><blockquote><p>kube-controller-manager.service的参数说明<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">EnvironmentFile=-/etc/kubernetes/config</span><br><span class="line">EnvironmentFile=-/etc/kubernetes/controller-manager</span><br></pre></td></tr></table></figure></p></blockquote><p>说明：定义<code>kube-controller-manager.service</code>启用的环境变量配置文件</p><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ExecStart=/usr/bin/kube-controller-manager \</span><br><span class="line">        $KUBE_LOGTOSTDERR \</span><br><span class="line">        $KUBE_LOG_LEVEL \</span><br><span class="line">        $KUBE_MASTER \</span><br><span class="line">        $KUBE_CONTROLLER_MANAGER_ARGS</span><br></pre></td></tr></table></figure><p>说明：定义service启用的二进制可执行文件的路径(<code>/usr/bin/kube-controller-manager</code>)，以及启动该<code>go</code>服务后面多个<code>flag</code>参数，当然这些参数都是从配置文件中读取的。</p><hr><blockquote><p><strong>2.配置文件controller-manager（/etc/kubernetes）</strong></p></blockquote><p>将<code>controller-manager</code>文件写入<code>/etc/kubernetes</code>目录下。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@server81 install_k8s_master]# cat /etc/kubernetes/</span><br><span class="line">apiserver           config              controller-manager  kubernetesTLS/      token.csv           </span><br><span class="line">[root@server81 install_k8s_master]# cat /etc/kubernetes/controller-manager </span><br><span class="line">###</span><br><span class="line"># The following values are used to configure the kubernetes controller-manager</span><br><span class="line"></span><br><span class="line"># defaults from config and apiserver should be adequate</span><br><span class="line"></span><br><span class="line"># Add your own!</span><br><span class="line">KUBE_CONTROLLER_MANAGER_ARGS=&quot;--master=http://172.16.5.81:8080  --address=127.0.0.1  --service-cluster-ip-range=10.0.6.0/24  --cluster-name=kubernetes  --cluster-signing-cert-file=/etc/kubernetes/kubernetesTLS/ca.pem  --cluster-signing-key-file=/etc/kubernetes/kubernetesTLS/ca.key  --service-account-private-key-file=/etc/kubernetes/kubernetesTLS/ca.key  --root-ca-file=/etc/kubernetes/kubernetesTLS/ca.pem  --leader-elect=true  --cluster-cidr=10.1.0.0/16&quot;</span><br><span class="line">[root@server81 install_k8s_master]#</span><br></pre></td></tr></table></figure></p><blockquote><p>controller-manager的参数说明</p></blockquote><table><thead><tr><th style="text-align:left">参数</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">–master=<a href="http://172.16.5.81:8080" target="_blank" rel="noopener">http://172.16.5.81:8080</a></td><td style="text-align:left">配置master访问地址</td></tr><tr><td style="text-align:left">–address=127.0.0.1</td><td style="text-align:left">配置监听本地IP地址，address 值必须为 127.0.0.1，因为当前 kube-apiserver 期望 scheduler 和 controller-manager 在同一台机器</td></tr><tr><td style="text-align:left">–service-cluster-ip-range=10.0.6.0/24</td><td style="text-align:left">设置kubernetes的service的网段</td></tr><tr><td style="text-align:left">–cluster-name=kubernetes</td><td style="text-align:left">设置集群的域名为kubernetes</td></tr><tr><td style="text-align:left">–cluster-signing-cert-file=$kubernetesTLSDir/ca.pem</td><td style="text-align:left">设置集群签署TLS的ca根证书公钥 。指定的证书和私钥文件用来签名为 TLS BootStrap 创建的证书和私钥；</td></tr><tr><td style="text-align:left">–cluster-signing-key-file=$kubernetesTLSDir/ca.key</td><td style="text-align:left">设置集群签署TLS的ca根证书私钥 ；指定的证书和私钥文件用来签名为 TLS BootStrap 创建的证书和私钥；</td></tr><tr><td style="text-align:left">–service-account-private-key-file=$kubernetesTLSDir/ca.key</td><td style="text-align:left">设置集群<a href="">安全账号</a>签署TLS的ca根证书私钥</td></tr><tr><td style="text-align:left">–root-ca-file=$kubernetesTLSDir/ca.pem</td><td style="text-align:left">设置集群root用户签署TLS的ca根证书公钥；用来对 kube-apiserver 证书进行校验，指定该参数后，才会在Pod 容器的 ServiceAccount 中放置该 CA 证书文件；</td></tr><tr><td style="text-align:left">–leader-elect=true</td><td style="text-align:left">设置启动选举，但是目前只启动一个，也没地方要选择，主要在于API Sever有多个的时候</td></tr><tr><td style="text-align:left">–cluster-cidr=$podClusterIP</td><td style="text-align:left">设置集群pod的IP网段</td></tr></tbody></table><hr><blockquote><ol start="3"><li>controller-manager启动服务<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl enable kube-controller-manager</span><br><span class="line">systemctl start kube-controller-manager</span><br><span class="line">systemctl status kube-controller-manager</span><br></pre></td></tr></table></figure></li></ol></blockquote><p>运行结果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">[root@server81 conf]# systemctl daemon-reload</span><br><span class="line">[root@server81 conf]# systemctl enable kube-controller-manager</span><br><span class="line">[root@server81 conf]# systemctl start kube-controller-manager</span><br><span class="line">[root@server81 conf]# systemctl status kube-controller-manager</span><br><span class="line">● kube-controller-manager.service - Kube-controller-manager Service</span><br><span class="line">   Loaded: loaded (/usr/lib/systemd/system/kube-controller-manager.service; enabled; vendor preset: disabled)</span><br><span class="line">   Active: active (running) since Mon 2018-08-20 10:22:37 HKT; 33min ago</span><br><span class="line">     Docs: https://github.com/GoogleCloudPlatform/kubernetes</span><br><span class="line"> Main PID: 2246 (kube-controller)</span><br><span class="line">   CGroup: /system.slice/kube-controller-manager.service</span><br><span class="line">           └─2246 /usr/bin/kube-controller-manager --logtostderr=true --v=0 --master=http://172.16.5.81:8080 --master=http://172.16....</span><br><span class="line"></span><br><span class="line">Aug 20 10:22:37 server81 kube-controller-manager[2246]: I0820 10:22:37.577898    2246 controller_utils.go:1032] Caches are sync...oller</span><br><span class="line">Aug 20 10:22:38 server81 kube-controller-manager[2246]: I0820 10:22:38.548284    2246 controller_utils.go:1025] Waiting for cac...oller</span><br><span class="line">Aug 20 10:22:38 server81 kube-controller-manager[2246]: I0820 10:22:38.568248    2246 controller_utils.go:1025] Waiting for cac...oller</span><br><span class="line">Aug 20 10:22:38 server81 kube-controller-manager[2246]: I0820 10:22:38.595675    2246 controller_utils.go:1032] Caches are sync...oller</span><br><span class="line">Aug 20 10:22:38 server81 kube-controller-manager[2246]: I0820 10:22:38.595716    2246 garbagecollector.go:142] Garbage collecto...rbage</span><br><span class="line">Aug 20 10:22:38 server81 kube-controller-manager[2246]: I0820 10:22:38.650186    2246 controller_utils.go:1032] Caches are sync...oller</span><br><span class="line">Aug 20 10:22:38 server81 kube-controller-manager[2246]: I0820 10:22:38.668935    2246 controller_utils.go:1032] Caches are sync...oller</span><br><span class="line">Aug 20 10:29:56 server81 kube-controller-manager[2246]: W0820 10:29:56.356490    2246 reflector.go:341] k8s.io/kubernetes/vendo... old.</span><br><span class="line">Aug 20 10:39:47 server81 kube-controller-manager[2246]: W0820 10:39:47.125097    2246 reflector.go:341] k8s.io/kubernetes/vendo... old.</span><br><span class="line">Aug 20 10:51:45 server81 kube-controller-manager[2246]: W0820 10:51:45.878609    2246 reflector.go:341] k8s.io/kubernetes/vendo... old.</span><br><span class="line">Hint: Some lines were ellipsized, use -l to show in full.</span><br><span class="line">[root@server81 conf]#</span><br></pre></td></tr></table></figure></p><hr><blockquote><p>##安装kube-scheduler</p></blockquote><blockquote><p><strong>1.编写kube-scheduler.service（/usr/lib/systemd/system）</strong></p></blockquote><p>将<code>kube-scheduler.service</code>写入<code>/usr/lib/systemd/system</code>目录下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[root@server81 install_k8s_master]# cat /usr/lib/systemd/system/kube-scheduler.service </span><br><span class="line">[Unit]</span><br><span class="line">Description=Kube-scheduler Service</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">EnvironmentFile=-/etc/kubernetes/config</span><br><span class="line">EnvironmentFile=-/etc/kubernetes/scheduler</span><br><span class="line">ExecStart=/usr/bin/kube-scheduler \</span><br><span class="line">    $KUBE_LOGTOSTDERR \</span><br><span class="line">    $KUBE_LOG_LEVEL \</span><br><span class="line">    $KUBE_MASTER \</span><br><span class="line">    $KUBE_SCHEDULER_ARGS</span><br><span class="line"></span><br><span class="line">Restart=always</span><br><span class="line">LimitNOFILE=65536</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=default.target</span><br><span class="line">[root@server81 install_k8s_master]#</span><br></pre></td></tr></table></figure></p><blockquote><p>kube-scheduler.service参数说明</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">EnvironmentFile=-/etc/kubernetes/config</span><br><span class="line">EnvironmentFile=-/etc/kubernetes/scheduler</span><br></pre></td></tr></table></figure><p>说明：定义配置两个服务启用读取的配置文件</p><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ExecStart=/usr/bin/kube-scheduler \</span><br><span class="line">    $KUBE_LOGTOSTDERR \</span><br><span class="line">    $KUBE_LOG_LEVEL \</span><br><span class="line">    $KUBE_MASTER \</span><br><span class="line">    $KUBE_SCHEDULER_ARGS</span><br></pre></td></tr></table></figure><p>说明：定义启用的二进制可执行文件的路径（<code>/usr/bin/kube-scheduler</code>）以及启用相关参数。</p><hr><blockquote><p><strong>2.配置文件scheduler（/etc/kubernetes）</strong></p></blockquote><p>将<code>scheduler</code>文件写入<code>/etc/kubernetes</code>目录下。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@server81 install_k8s_master]# cat /etc/kubernetes/</span><br><span class="line">apiserver           config              controller-manager  kubernetesTLS/      scheduler           token.csv</span><br><span class="line">[root@server81 install_k8s_master]# cat /etc/kubernetes/scheduler </span><br><span class="line">###</span><br><span class="line"># The following values are used to configure the kubernetes scheduler</span><br><span class="line"></span><br><span class="line"># defaults from config and scheduler should be adequate</span><br><span class="line"></span><br><span class="line"># Add your own!</span><br><span class="line">KUBE_SCHEDULER_ARGS=&quot;--master=http://172.16.5.81:8080 --leader-elect=true --address=127.0.0.1&quot;</span><br><span class="line">[root@server81 install_k8s_master]#</span><br></pre></td></tr></table></figure></p><blockquote><p>scheduler的参数说明</p></blockquote><table><thead><tr><th style="text-align:left">参数</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">–master=<a href="http://172.16.5.81:8080" target="_blank" rel="noopener">http://172.16.5.81:8080</a></td><td style="text-align:left">定义配置master的apiserver访问地址</td></tr><tr><td style="text-align:left">–leader-elect=true</td><td style="text-align:left">设置启动选举，但是目前只启动一个，也没地方要选择，主要在于API Sever有多个的时候</td></tr><tr><td style="text-align:left">–address=127.0.0.1</td><td style="text-align:left">配置监听本地IP地址，address 值必须为 127.0.0.1，因为当前 kube-apiserver 期望 scheduler 和 controller-manager 在同一台机器</td></tr></tbody></table><hr><blockquote><p><strong>3.启用scheduler服务</strong></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl enable kube-scheduler</span><br><span class="line">systemctl restart kube-scheduler</span><br><span class="line">systemctl status kube-scheduler</span><br></pre></td></tr></table></figure><p>运行结果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[root@server81 install_k8s_master]# systemctl daemon-reload</span><br><span class="line">[root@server81 install_k8s_master]# systemctl enable kube-scheduler</span><br><span class="line">[root@server81 install_k8s_master]# systemctl restart kube-scheduler</span><br><span class="line">[root@server81 install_k8s_master]# systemctl status kube-scheduler</span><br><span class="line">● kube-scheduler.service - Kube-scheduler Service</span><br><span class="line">   Loaded: loaded (/usr/lib/systemd/system/kube-scheduler.service; enabled; vendor preset: disabled)</span><br><span class="line">   Active: active (running) since Mon 2018-08-20 11:12:28 HKT; 686ms ago</span><br><span class="line"> Main PID: 2459 (kube-scheduler)</span><br><span class="line">   CGroup: /system.slice/kube-scheduler.service</span><br><span class="line">           └─2459 /usr/bin/kube-scheduler --logtostderr=true --v=0 --master=http://172.16.5.81:8080 --master=http://172.16.5.81:8080...</span><br><span class="line"></span><br><span class="line">Aug 20 11:12:28 server81 systemd[1]: Started Kube-scheduler Service.</span><br><span class="line">Aug 20 11:12:28 server81 systemd[1]: Starting Kube-scheduler Service...</span><br><span class="line">Aug 20 11:12:28 server81 kube-scheduler[2459]: W0820 11:12:28.724918    2459 options.go:148] WARNING: all flags other than --c... ASAP.</span><br><span class="line">Aug 20 11:12:28 server81 kube-scheduler[2459]: I0820 11:12:28.727302    2459 server.go:126] Version: v1.11.0</span><br><span class="line">Aug 20 11:12:28 server81 kube-scheduler[2459]: W0820 11:12:28.728311    2459 authorization.go:47] Authorization is disabled</span><br><span class="line">Aug 20 11:12:28 server81 kube-scheduler[2459]: W0820 11:12:28.728332    2459 authentication.go:55] Authentication is disabled</span><br><span class="line">Aug 20 11:12:28 server81 kube-scheduler[2459]: I0820 11:12:28.728341    2459 insecure_serving.go:47] Serving healthz insecurel...:10251</span><br><span class="line">Hint: Some lines were ellipsized, use -l to show in full.</span><br><span class="line">[root@server81 install_k8s_master]#</span><br></pre></td></tr></table></figure></p><hr><blockquote><p><strong><em>执行到这里，master所需要的服务都已经安装完毕了，下面我们可以查看一下组件的情况：</em></strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@server81 install_k8s_master]# ls /etc/kubernetes/</span><br><span class="line">apiserver  config  controller-manager  kubernetesTLS  scheduler  token.csv</span><br><span class="line">[root@server81 install_k8s_master]# </span><br><span class="line">[root@server81 install_k8s_master]# kubectl get cs</span><br><span class="line">NAME                 STATUS    MESSAGE              ERROR</span><br><span class="line">controller-manager   Healthy   ok                   </span><br><span class="line">scheduler            Healthy   ok                   </span><br><span class="line">etcd-0               Healthy   &#123;&quot;health&quot;: &quot;true&quot;&#125;   </span><br><span class="line">etcd-2               Healthy   &#123;&quot;health&quot;: &quot;true&quot;&#125;   </span><br><span class="line">etcd-1               Healthy   &#123;&quot;health&quot;: &quot;true&quot;&#125;   </span><br><span class="line">[root@server81 install_k8s_master]#</span><br></pre></td></tr></table></figure></p></blockquote><p>可以看出，各个组件包含<code>etcd</code>都是正常运行着的。</p><p>那么下面我们就要创建为<code>node</code>节点TLS认证服务的<code>kube-proxy kubeconfig</code> 、<code>kubelet bootstrapping kubeconfig</code> 文件了。<br>这两个文件主要就提供<code>proxy</code>和<code>kubelet</code>访问<code>apiserver</code>的。</p><hr><blockquote><p>##创建 kube-proxy kubeconfig 文件以及相关集群参数</p></blockquote><p> <code>kube-proxy kubeconfig</code> 文件是提供<code>kube-proxy</code>用户请求<code>apiserver</code>所有<code>API</code>权限的集群参数的。<br>执行完以下命令之后，自动生成到<code>/etc/kubernetes</code>目录下即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">basedir=$(cd `dirname $0`;pwd)</span><br><span class="line">serviceDir=/usr/lib/systemd/system</span><br><span class="line">binDir=/usr/bin</span><br><span class="line"></span><br><span class="line">kubernetesDir=/etc/kubernetes</span><br><span class="line">kubernetesTLSDir=/etc/kubernetes/kubernetesTLS</span><br><span class="line"></span><br><span class="line">## set param </span><br><span class="line">MASTER_IP=`python -c &quot;import socket;print([(s.connect((&apos;8.8.8.8&apos;, 53)), s.getsockname()[0], s.close()) for s in [socket.socket(socket.AF_INET, socket.SOCK_DGRAM)]][0][1])&quot;`</span><br><span class="line"></span><br><span class="line">BOOTSTRAP_TOKEN=前面记录的，需要一致。</span><br><span class="line"></span><br><span class="line">## proxy</span><br><span class="line">## 设置proxy的集群参数</span><br><span class="line">  kubectl config set-cluster kubernetes \</span><br><span class="line">   --certificate-authority=$kubernetesTLSDir/ca.pem \</span><br><span class="line">   --embed-certs=true \ ## true将证书自动写入kubeconfig文件</span><br><span class="line">   --server=https://$MASTER_IP:6443 \  ## 设置访问的master地址</span><br><span class="line">   --kubeconfig=$kubernetesDir/kube-proxy.kubeconfig ## 生成kubeconfig的路径</span><br><span class="line"></span><br><span class="line">## 设置kube-proxy用户的参数</span><br><span class="line">  kubectl config set-credentials kube-proxy \</span><br><span class="line">   --client-certificate=$kubernetesTLSDir/proxy.pem \</span><br><span class="line">   --client-key=$kubernetesTLSDir/proxy.key \</span><br><span class="line">   --embed-certs=true \</span><br><span class="line">   --kubeconfig=$kubernetesDir/kube-proxy.kubeconfig</span><br><span class="line"></span><br><span class="line">## 设置kubernetes集群中kube-proxy用户的上下文参数</span><br><span class="line">  kubectl config set-context default \</span><br><span class="line">   --cluster=kubernetes \</span><br><span class="line">   --user=kube-proxy \</span><br><span class="line">   --kubeconfig=$kubernetesDir/kube-proxy.kubeconfig</span><br><span class="line"></span><br><span class="line">## 设置kube-proxy用户的默认上下文参数</span><br><span class="line">kubectl config use-context default --kubeconfig=$kubernetesDir/kube-proxy.kubeconfig</span><br></pre></td></tr></table></figure><blockquote><h2 id="创建-kubelet-bootstrapping-kubeconfig-文件以及相关集群参数"><a href="#创建-kubelet-bootstrapping-kubeconfig-文件以及相关集群参数" class="headerlink" title="创建 kubelet bootstrapping kubeconfig 文件以及相关集群参数"></a>创建 kubelet bootstrapping kubeconfig 文件以及相关集群参数</h2></blockquote><p>创建<code>kubelet</code>响应式的<code>kubeconfig</code>文件，用于提供<code>apiserver</code>自动生成<code>kubeconfig</code>文件、以及公钥私钥。<br>该文件创建之后，在<code>node</code>节点<code>kubelet</code>启用的时候，自动会创建三个文件，后续在部署<code>node</code>部分的时候说明。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">## 设置kubelet的集群参数</span><br><span class="line">  kubectl config set-cluster kubernetes \</span><br><span class="line">   --certificate-authority=$kubernetesTLSDir/ca.pem \</span><br><span class="line">   --embed-certs=true \</span><br><span class="line">   --server=https://$MASTER_IP:6443 \</span><br><span class="line">   --kubeconfig=$kubernetesDir/bootstrap.kubeconfig</span><br><span class="line"></span><br><span class="line">## 设置kubelet用户的参数</span><br><span class="line">  kubectl config set-credentials kubelet-bootstrap \</span><br><span class="line">   --token=$BOOTSTRAP_TOKEN \</span><br><span class="line">   --kubeconfig=$kubernetesDir/bootstrap.kubeconfig</span><br><span class="line"></span><br><span class="line">## 设置kubernetes集群中kubelet用户的默认上下文参数</span><br><span class="line">  kubectl config set-context default \</span><br><span class="line">   --cluster=kubernetes \</span><br><span class="line">   --user=kubelet-bootstrap \</span><br><span class="line">   --kubeconfig=$kubernetesDir/bootstrap.kubeconfig</span><br><span class="line"></span><br><span class="line">## 设置kubelet用户的默认上下文参数</span><br><span class="line">  kubectl config use-context default \</span><br><span class="line">   --kubeconfig=$kubernetesDir/bootstrap.kubeconfig</span><br><span class="line"></span><br><span class="line">## 创建kubelet的RABC角色</span><br><span class="line"> kubectl create --insecure-skip-tls-verify clusterrolebinding kubelet-bootstrap \</span><br><span class="line">   --clusterrole=system:node-bootstrapper \</span><br><span class="line">   --user=kubelet-bootstrap</span><br><span class="line"></span><br><span class="line">##参数说明：</span><br><span class="line">#1、跳过tls安全认证直接创建kubelet-bootstrap角色</span><br><span class="line">#2、设置集群角色：system:node-bootstrapper</span><br><span class="line">#3、设置集群用户：kubelet-bootstrap</span><br></pre></td></tr></table></figure></p><blockquote><p>##自动化创建kube-proxy kubeconfig、kubelet bootstrapping kubeconfig 文件</p></blockquote><p>在看到这里的读者肯定会角色指令很多，很麻烦。没关系，送上一段咖啡代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line">[root@server81 install_k8s_master]# cat configDir/conf/BOOTSTRAP_TOKEN </span><br><span class="line">4b395732894828d5a34737d83c334330</span><br><span class="line">[root@server81 install_k8s_master]# </span><br><span class="line">[root@server81 install_k8s_master]# cat Step6_create_kubeconfig_file.sh </span><br><span class="line">#!/bin/bash</span><br><span class="line">basedir=$(cd `dirname $0`;pwd)</span><br><span class="line">serviceDir=/usr/lib/systemd/system</span><br><span class="line">binDir=/usr/bin</span><br><span class="line"></span><br><span class="line">kubernetesDir=/etc/kubernetes</span><br><span class="line">kubernetesTLSDir=/etc/kubernetes/kubernetesTLS</span><br><span class="line"></span><br><span class="line">configdir=$basedir/configDir</span><br><span class="line">configServiceDir=$configdir/service</span><br><span class="line">configConfDir=$configdir/conf</span><br><span class="line"></span><br><span class="line">## set param </span><br><span class="line">MASTER_IP=`python -c &quot;import socket;print([(s.connect((&apos;8.8.8.8&apos;, 53)), s.getsockname()[0], s.close()) for s in [socket.socket(socket.AF_INET, socket.SOCK_DGRAM)]][0][1])&quot;`</span><br><span class="line"></span><br><span class="line">BOOTSTRAP_TOKEN=`cat $configConfDir/BOOTSTRAP_TOKEN`</span><br><span class="line"></span><br><span class="line">#echo $BOOTSTRAP_TOKEN</span><br><span class="line"></span><br><span class="line">## function and implments</span><br><span class="line"># set proxy</span><br><span class="line">function create_proxy_kubeconfig()&#123;</span><br><span class="line">  kubectl config set-cluster kubernetes \</span><br><span class="line">   --certificate-authority=$kubernetesTLSDir/ca.pem \</span><br><span class="line">   --embed-certs=true \</span><br><span class="line">   --server=https://$MASTER_IP:6443 \</span><br><span class="line">   --kubeconfig=$kubernetesDir/kube-proxy.kubeconfig</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">create_proxy_kubeconfig</span><br><span class="line"></span><br><span class="line">function config_proxy_credentials()&#123;</span><br><span class="line">  kubectl config set-credentials kube-proxy \</span><br><span class="line">   --client-certificate=$kubernetesTLSDir/proxy.pem \</span><br><span class="line">   --client-key=$kubernetesTLSDir/proxy.key \</span><br><span class="line">   --embed-certs=true \</span><br><span class="line">   --kubeconfig=$kubernetesDir/kube-proxy.kubeconfig</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">config_proxy_credentials</span><br><span class="line"></span><br><span class="line">function config_proxy_context()&#123;</span><br><span class="line">  kubectl config set-context default \</span><br><span class="line">   --cluster=kubernetes \</span><br><span class="line">   --user=kube-proxy \</span><br><span class="line">   --kubeconfig=$kubernetesDir/kube-proxy.kubeconfig</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">config_proxy_context</span><br><span class="line"></span><br><span class="line">function set_proxy_context()&#123;</span><br><span class="line">  kubectl config use-context default --kubeconfig=$kubernetesDir/kube-proxy.kubeconfig</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">set_proxy_context</span><br><span class="line"></span><br><span class="line">## set bootstrapping</span><br><span class="line">function create_kubelet_bootstrapping_kubeconfig()&#123;</span><br><span class="line">  kubectl config set-cluster kubernetes \</span><br><span class="line">   --certificate-authority=$kubernetesTLSDir/ca.pem \</span><br><span class="line">   --embed-certs=true \</span><br><span class="line">   --server=https://$MASTER_IP:6443 \</span><br><span class="line">   --kubeconfig=$kubernetesDir/bootstrap.kubeconfig</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">create_kubelet_bootstrapping_kubeconfig</span><br><span class="line"></span><br><span class="line">function config_kubelet_bootstrapping_credentials()&#123;</span><br><span class="line">  kubectl config set-credentials kubelet-bootstrap \</span><br><span class="line">   --token=$BOOTSTRAP_TOKEN \</span><br><span class="line">   --kubeconfig=$kubernetesDir/bootstrap.kubeconfig</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">config_kubelet_bootstrapping_credentials</span><br><span class="line"></span><br><span class="line">function config_kubernetes_bootstrap_kubeconfig()&#123;</span><br><span class="line">  kubectl config set-context default \</span><br><span class="line">   --cluster=kubernetes \</span><br><span class="line">   --user=kubelet-bootstrap \</span><br><span class="line">   --kubeconfig=$kubernetesDir/bootstrap.kubeconfig</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">config_kubernetes_bootstrap_kubeconfig</span><br><span class="line"></span><br><span class="line">function set_bootstrap_context()&#123;</span><br><span class="line">  kubectl config use-context default \</span><br><span class="line">   --kubeconfig=$kubernetesDir/bootstrap.kubeconfig</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">set_bootstrap_context</span><br><span class="line"></span><br><span class="line">## create rolebinding</span><br><span class="line">function create_cluster_rolebinding()&#123;</span><br><span class="line">  kubectl create --insecure-skip-tls-verify clusterrolebinding kubelet-bootstrap \</span><br><span class="line">   --clusterrole=system:node-bootstrapper \</span><br><span class="line">   --user=kubelet-bootstrap</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">create_cluster_rolebinding</span><br><span class="line">[root@server81 install_k8s_master]#</span><br></pre></td></tr></table></figure></p><p>执行结果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[root@server81 install_k8s_master]# ./Step6_create_kubeconfig_file.sh </span><br><span class="line">Cluster &quot;kubernetes&quot; set.</span><br><span class="line">User &quot;kube-proxy&quot; set.</span><br><span class="line">Context &quot;default&quot; created.</span><br><span class="line">Switched to context &quot;default&quot;.</span><br><span class="line">Cluster &quot;kubernetes&quot; set.</span><br><span class="line">User &quot;kubelet-bootstrap&quot; set.</span><br><span class="line">Context &quot;default&quot; created.</span><br><span class="line">Switched to context &quot;default&quot;.</span><br><span class="line">clusterrolebinding.rbac.authorization.k8s.io/kubelet-bootstrap created</span><br><span class="line">[root@server81 install_k8s_master]# </span><br><span class="line">[root@server81 install_k8s_master]# ls /etc/kubernetes/</span><br><span class="line">apiserver              config                 kube-proxy.kubeconfig  scheduler              </span><br><span class="line">bootstrap.kubeconfig   controller-manager     kubernetesTLS/         token.csv              </span><br><span class="line">[root@server81 install_k8s_master]# ls /etc/kubernetes/</span><br><span class="line">apiserver  bootstrap.kubeconfig  config  controller-manager  kube-proxy.kubeconfig  kubernetesTLS  scheduler  token.csv</span><br><span class="line">[root@server81 install_k8s_master]#</span><br></pre></td></tr></table></figure></p><p>查看生成的kube-proxy.kubeconfig的内容，如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[root@server81 install_k8s_master]# cat /etc/kubernetes/kube-proxy.kubeconfig </span><br><span class="line">apiVersion: v1</span><br><span class="line">clusters:</span><br><span class="line">- cluster:</span><br><span class="line">    certificate-authority-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURHVENDQWdHZ0F3SUJBZ0lKQVAxbEpzOTFHbG9wTUEwR0NTcUdTSWIzRFFFQkN3VUFNQ014RXpBUkJnTlYKQkFNTUNtdDFZbVZ5Ym1WMFpYTXhEREFLQmdOVkJBb01BMnM0Y3pBZUZ3MHhPREE0TVRreE5ESXhORFJhRncwMApOakF4TURReE5ESXhORFJhTUNNeEV6QVJCZ05WQkFNTUNtdDFZbVZ5Ym1WMFpYTXhEREFLQmdOVkJBb01BMnM0CmN6Q0NBU0l3RFFZSktvWklodmNOQVFFQkJRQURnZ0VQQURDQ0FRb0NnZ0VCQU5BejJxOUNsVWozZmNTY20wVTYKWnhrTVFCVVJzSFpFeUpIbXhMWUR1RmNzbGlyUjZxZHFSbExjM3Z1SnlVSHB3dUF5QzZxYzlaZE52clNCUkhOegpxUVFSREVuUENMQXQ0ZFVkUjh2NnQvOVhKbnJ0Y0k3My94U0RKNno2eFh3K2MvTy95c0NET3pQNkFDcmE5cHlPCmJpQ1ZRSEJ4eEI3bGxuM0ErUEFaRWEzOHZSNmhTSklzRndxVjAwKy9iNSt5K3FvVVdtNWFtcS83OWNIM2Zwd0kKNnRmUlZIeHAweXBKNi9TckYyZWVWVU1KVlJxZWtiNjBuZkJRUUNEZ2YyL3lSOGNxVDZlV3VDdmZnVEdCV01QSQpPSjVVM1VxekNMVGNpNHpDSFhaTUlra25EWVFuNFR6Qm05MitzTGhXMlpFZk5DOUxycFZYWHpzTm45alFzeTA3ClliOENBd0VBQWFOUU1FNHdIUVlEVlIwT0JCWUVGRWQ0bUxtN292MFdxL2FUTVJLUnlaaVVMOTFNTUI4R0ExVWQKSXdRWU1CYUFGRWQ0bUxtN292MFdxL2FUTVJLUnlaaVVMOTFNTUF3R0ExVWRFd1FGTUFNQkFmOHdEUVlKS29aSQpodmNOQVFFTEJRQURnZ0VCQUtNVGJXcng5WXJmSXByY3RHMThTanJCZHVTYkhLL05FRGcySHNCb1BrU2YwbE1TCmdGTnNzOGZURlliKzY3UWhmTnA1MjBodnk3M3JKU29OVkJweWpBWDR1SnRjVG9aZDdCZVhyUHdNVWVjNXRjQWoKSFdvY1dKaXNpck0vdFV4cUxLekdRdnFhVDhmQy9UUW5kTGUxTkJ0cEFQbjM5RzE5VFVialMvUTlKVE1qZVdMWAo0dU5MVExGUVUrYTAwTWMrMGVSWjdFYUVRSks2U0h1OUNuSEtNZnhIVC81UTdvbXBrZlBtTTZLT0VOVndaK0Q5Clh0ZzlIUmlrampFMGtsNHB3TmlHRnZQYVhuY0V5RDlwVW5vdWI0RGc2UHJ1MU9zTjYxakwyd2VneVY4WU1nUVEKWEdkVTIveExMcEh2cVlPVDNRay9mNWw5MHpackQvYm5vZGhxNS84PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==</span><br><span class="line">    server: https://172.16.5.81:6443</span><br><span class="line">  name: kubernetes</span><br><span class="line">contexts:</span><br><span class="line">- context:</span><br><span class="line">    cluster: kubernetes</span><br><span class="line">    user: kube-proxy</span><br><span class="line">  name: default</span><br><span class="line">current-context: default</span><br><span class="line">kind: Config</span><br><span class="line">preferences: &#123;&#125;</span><br><span class="line">users:</span><br><span class="line">- name: kube-proxy</span><br><span class="line">  user:</span><br><span class="line">    client-certificate-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUN1ekNDQWFNQ0NRRFZDSG9rSldveEdEQU5CZ2txaGtpRzl3MEJBUXNGQURBak1STXdFUVlEVlFRRERBcHIKZFdKbGNtNWxkR1Z6TVF3d0NnWURWUVFLREFOck9ITXdIaGNOTVRnd09ERTVNVFF5TVRRMFdoY05Namd3T0RFMgpNVFF5TVRRMFdqQWNNUm93R0FZRFZRUUREQkZ6ZVhOMFpXMDZhM1ZpWlMxd2NtOTRlVENDQVNJd0RRWUpLb1pJCmh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBTWpOVitwVGVFU2d6di9rcDZvQ3Z2T3NoUXFYS0t3RWFrTWEKcDRvNEdoZUZySzVUbW53eTc4YWpJdHM4b0Nyb3l2Q1lVR2VVcVJqaG1xSUdRWWJxWVFPTy9NZ21pZmdFMVFlego3RzNYKzJsQ25qRThOVnZBd011QXpYU0w4L3dkU1NEUTZDdGdvUkVCcFhTQUJWYStaMldXVy9VSm53ZFlFWHlGClh2N3ZERWRJZG1pUWNjWEtMcHRuMWFzV25nek1aVG9EMDVjMWxQSTlZZ1ZqMFVsNldWMkVMdHhxdGVqdXJHT2kKN3R0K3hRanY0ckdQZ01udTNqOEF1QTNLZXpSUFJ0TVA1RkF6SHZ4WVQ3RU0rRzVmU2JGWFY0ZVVMb0czS3pzWQo3eitDYlF1bnYyNmhXMFM5dWtZT0lNWnA4eVJtcHJ6cGxSVnh5d0dJUUw2ajhqdndkcXNDQXdFQUFUQU5CZ2txCmhraUc5dzBCQVFzRkFBT0NBUUVBQmNUazU0TUY5YnNpaDZaVXJiakh0MmFXR3VaTzZBODlZa3ZUL21VcTRoTHUKd2lUcHRKZWNJWEh5RkZYemVCSDJkUGZIZ1lldEMrQTJGS0dsZFJ1SHJuUW1iTWFkdjN6bGNjbEl2ald6dU1GUQpnenhUQUJ0dGVNYkYvL2M5cE9TL2ZmQS9OcVV0akVEUzlJVXZUTDdjUEs3Z0dMSzRrQWY2N2hPTERLb1NGT2ZjCnp0bEpXWkhPaEpGRjM0bkQySytXMmZzb0g4WFdTeDd1N3FmSHFFRkFNOW5BRjRyQjNZdUFHKzdIOUxMbmVaK1IKbHBTeThLNzBVZUdUVFpFdW5yMzJwMmJEZWxQN0tCTWsvbmUxV01PbzRnL01QUUhOTm5XZHlNeFJ6bHBOeTBregpOekVydVlhbHpINDVTVHIrNytCMkNhcS9sWDFTSWpENXBYVDhZMXRtSFE9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==</span><br><span class="line">    client-key-data: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBeU0xWDZsTjRSS0RPLytTbnFnSys4NnlGQ3Bjb3JBUnFReHFuaWpnYUY0V3NybE9hCmZETHZ4cU1pMnp5Z0t1aks4SmhRWjVTcEdPR2FvZ1pCaHVwaEE0Nzh5Q2FKK0FUVkI3UHNiZGY3YVVLZU1UdzEKVzhEQXk0RE5kSXZ6L0IxSklORG9LMkNoRVFHbGRJQUZWcjVuWlpaYjlRbWZCMWdSZklWZS91OE1SMGgyYUpCeAp4Y291bTJmVnF4YWVETXhsT2dQVGx6V1U4ajFpQldQUlNYcFpYWVF1M0dxMTZPNnNZNkx1MjM3RkNPL2lzWStBCnllN2VQd0M0RGNwN05FOUcwdy9rVURNZS9GaFBzUXo0Ymw5SnNWZFhoNVF1Z2Jjck94anZQNEp0QzZlL2JxRmIKUkwyNlJnNGd4bW56SkdhbXZPbVZGWEhMQVloQXZxUHlPL0IycXdJREFRQUJBb0lCQVFDeU5KcmJXT3laYTJXSgo4REZrVGorTkhnU01XNDQ2NjBncStaTEt0Zk5pQUw0NWovVEFXS3czU3p4NStSbmtPdWt3RU56NnNCSktCSjRwClFRZ1NaaHRtL3hVVHhEQVpycUFveitMNXNQNXNjalRXV1NxNW5SejgvZmhZZ0lRdHNRZmZXY2RTQjlXcHRCNVUKZi9FOUJJbmF2RkFyN1RmM1dvOWFSVHNEWUw4eTJtVjJrakNpMkd4S3U4K3BQWXN3ZUIrbGZjc1QyNlB3ODBsRgpXTmZVODRzdDE1SjBCNitRSmhEQnNDb3NpbGxrcFZnaDhPMzVNNmE3WjZlL3IrZnZuYjcycXd2MkdGQm0rNEpmCmRydVJtTHRLdHUxVGhzUGQ4YkQ2MXpTblMrSXoyUGxGWnk0RkY3cFhWU2RwbjVlSm00dkJMM3NOem9HWGlGUmIKOTAydFo5d1JBb0dCQVB6ZXZEZWhEYVBiZ1FLTU5hMFBzN2dlNDZIUkF6Rzl4RDh2RXk4dEVXcVVVY2c3Mndqawp6MGFvLzZvRkFDM0tkM3VkUmZXdmhrV2RrcE9CMXIzMml6Y29Ka3lOQmxDc2YxSDF2dVJDb0gwNTZwM3VCa3dHCjFsZjFWeDV0cjVHMU5laXdzQjdsTklDa2pPNTg2b3F6M3NNWmZMcHM1ZlMxeVZFUExrVmErL2N0QW9HQkFNdEoKbnhpQXNCMnZKaXRaTTdrTjZjTzJ1S0lwNHp0WjZDMFhBZmtuNnd5Zk9zd3lyRHdNUnA2Yk56OTNCZzk0azE4aQpIdlJ3YzJPVVBkeXVrU2YyVGZVbXN6L0h1OWY0emRCdFdYM2lkOE50b29MYUd6RnVVN3hObVlrUWJaL2Y1ZmpNCmtpZzlVZVJYdng5THJTa3RDdEdyRWMvK0JubHNrRk1xc2IrZ1FVdzNBb0dCQUs0SzA3cnFFNHhMQVNGeXhXTG0KNHNpQUlpWjJ5RjhOQUt5SVJ3ajZXUGxsT21DNXFja1dTditVUTl1T2M1QVF3V29JVm1XQ09NVmpiY1l1NEZHQgpCbEtoUkxMOWdYSTNONjUrbUxOY2xEOThoRm5Nd1BMRTVmUkdQWDhJK1lVdEZ2eWYxNmg4RTBYVGU5aU5pNVNKCnRuSEw4Z2dSK2JnVEFvdlRDZ0xjVzMzRkFvR0FSZWFYelM0YTRPb2ovczNhYWl4dGtEMlpPVEdjRUFGM1EySGcKN05LY0VTZ0RhTW1YemNJTzJtVFcxM3pPMmEwRlI3WU0zTko1NnVqRGFNbWg0aExnZFlhTUprZEF3Uit0YlpqYwpKOXdpZ0ZHSGl1VUNhcm5jRXlpL3ZaQ25rVXpFNEFzL3lwUmpQMWdvd05NZHhNWFhMWWRjUlorOGpDNFhabkdNCjB5NkFwWHNDZ1lFQXh6aUkyK2tUekNJcENnOGh3WXdiQ21sTVBaM3RBNXRLRHhKZmNjdWpXSExHVkNnMVd6QTAKdHZuUmxJbnZxdzFXOWtsSGlHTlhmTUpqczhpeXk5WUl4S0NKeTdhUU85WXZ1SVR6OC9PMHVCRURlQ1gvOHFDTwpzRGJ0eHpsa3A2NVdaYTFmR2FLRWVwcHFtWUU2NUdiZk91eHNxRENDSG1WWXcvZmR0M2NnMjI0PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=</span><br><span class="line">[root@server81 install_k8s_master]#</span><br></pre></td></tr></table></figure></p><p>查看生成的bootstrap.kubeconfig的内容，如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[root@server81 install_k8s_master]# cat /etc/kubernetes/bootstrap.kubeconfig </span><br><span class="line">apiVersion: v1</span><br><span class="line">clusters:</span><br><span class="line">- cluster:</span><br><span class="line">    certificate-authority-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURHVENDQWdHZ0F3SUJBZ0lKQVAxbEpzOTFHbG9wTUEwR0NTcUdTSWIzRFFFQkN3VUFNQ014RXpBUkJnTlYKQkFNTUNtdDFZbVZ5Ym1WMFpYTXhEREFLQmdOVkJBb01BMnM0Y3pBZUZ3MHhPREE0TVRreE5ESXhORFJhRncwMApOakF4TURReE5ESXhORFJhTUNNeEV6QVJCZ05WQkFNTUNtdDFZbVZ5Ym1WMFpYTXhEREFLQmdOVkJBb01BMnM0CmN6Q0NBU0l3RFFZSktvWklodmNOQVFFQkJRQURnZ0VQQURDQ0FRb0NnZ0VCQU5BejJxOUNsVWozZmNTY20wVTYKWnhrTVFCVVJzSFpFeUpIbXhMWUR1RmNzbGlyUjZxZHFSbExjM3Z1SnlVSHB3dUF5QzZxYzlaZE52clNCUkhOegpxUVFSREVuUENMQXQ0ZFVkUjh2NnQvOVhKbnJ0Y0k3My94U0RKNno2eFh3K2MvTy95c0NET3pQNkFDcmE5cHlPCmJpQ1ZRSEJ4eEI3bGxuM0ErUEFaRWEzOHZSNmhTSklzRndxVjAwKy9iNSt5K3FvVVdtNWFtcS83OWNIM2Zwd0kKNnRmUlZIeHAweXBKNi9TckYyZWVWVU1KVlJxZWtiNjBuZkJRUUNEZ2YyL3lSOGNxVDZlV3VDdmZnVEdCV01QSQpPSjVVM1VxekNMVGNpNHpDSFhaTUlra25EWVFuNFR6Qm05MitzTGhXMlpFZk5DOUxycFZYWHpzTm45alFzeTA3ClliOENBd0VBQWFOUU1FNHdIUVlEVlIwT0JCWUVGRWQ0bUxtN292MFdxL2FUTVJLUnlaaVVMOTFNTUI4R0ExVWQKSXdRWU1CYUFGRWQ0bUxtN292MFdxL2FUTVJLUnlaaVVMOTFNTUF3R0ExVWRFd1FGTUFNQkFmOHdEUVlKS29aSQpodmNOQVFFTEJRQURnZ0VCQUtNVGJXcng5WXJmSXByY3RHMThTanJCZHVTYkhLL05FRGcySHNCb1BrU2YwbE1TCmdGTnNzOGZURlliKzY3UWhmTnA1MjBodnk3M3JKU29OVkJweWpBWDR1SnRjVG9aZDdCZVhyUHdNVWVjNXRjQWoKSFdvY1dKaXNpck0vdFV4cUxLekdRdnFhVDhmQy9UUW5kTGUxTkJ0cEFQbjM5RzE5VFVialMvUTlKVE1qZVdMWAo0dU5MVExGUVUrYTAwTWMrMGVSWjdFYUVRSks2U0h1OUNuSEtNZnhIVC81UTdvbXBrZlBtTTZLT0VOVndaK0Q5Clh0ZzlIUmlrampFMGtsNHB3TmlHRnZQYVhuY0V5RDlwVW5vdWI0RGc2UHJ1MU9zTjYxakwyd2VneVY4WU1nUVEKWEdkVTIveExMcEh2cVlPVDNRay9mNWw5MHpackQvYm5vZGhxNS84PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==</span><br><span class="line">    server: https://172.16.5.81:6443</span><br><span class="line">  name: kubernetes</span><br><span class="line">contexts:</span><br><span class="line">- context:</span><br><span class="line">    cluster: kubernetes</span><br><span class="line">    user: kubelet-bootstrap</span><br><span class="line">  name: default</span><br><span class="line">current-context: default</span><br><span class="line">kind: Config</span><br><span class="line">preferences: &#123;&#125;</span><br><span class="line">users:</span><br><span class="line">- name: kubelet-bootstrap</span><br><span class="line">  user:</span><br><span class="line">    token: 4b395732894828d5a34737d83c334330</span><br><span class="line">[root@server81 install_k8s_master]#</span><br></pre></td></tr></table></figure></p><blockquote><h2 id="最后总结一下master部署"><a href="#最后总结一下master部署" class="headerlink" title="最后总结一下master部署"></a>最后总结一下master部署</h2></blockquote><blockquote><p>检查master组件情况以及集群情况<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@server81 install_k8s_master]# kubectl get cs</span><br><span class="line">NAME                 STATUS    MESSAGE              ERROR</span><br><span class="line">controller-manager   Healthy   ok                   </span><br><span class="line">scheduler            Healthy   ok                   </span><br><span class="line">etcd-0               Healthy   &#123;&quot;health&quot;: &quot;true&quot;&#125;   </span><br><span class="line">etcd-2               Healthy   &#123;&quot;health&quot;: &quot;true&quot;&#125;   </span><br><span class="line">etcd-1               Healthy   &#123;&quot;health&quot;: &quot;true&quot;&#125;   </span><br><span class="line">[root@server81 install_k8s_master]# </span><br><span class="line">[root@server81 install_k8s_master]# kubectl cluster-info</span><br><span class="line">Kubernetes master is running at https://172.16.5.81:6443</span><br><span class="line"></span><br><span class="line">To further debug and diagnose cluster problems, use &apos;kubectl cluster-info dump&apos;.</span><br><span class="line">[root@server81 install_k8s_master]#</span><br></pre></td></tr></table></figure></p></blockquote><hr><blockquote><p>确认后续master需要拷贝到node的相关证书文件</p></blockquote><p>因为<code>node</code>部署的时候，<code>proxy</code>和<code>kubelet</code>是需要拷贝上面生成的证书以及<code>kubeconfig</code>文件的，这里罗列如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[root@server81 install_k8s_master]# tree /etc/kubernetes/</span><br><span class="line">/etc/kubernetes/</span><br><span class="line">├── apiserver</span><br><span class="line">├── bootstrap.kubeconfig</span><br><span class="line">├── config</span><br><span class="line">├── controller-manager</span><br><span class="line">├── kube-proxy.kubeconfig</span><br><span class="line">├── kubernetesTLS</span><br><span class="line">│   ├── admin.key</span><br><span class="line">│   ├── admin.pem</span><br><span class="line">│   ├── apiserver.key</span><br><span class="line">│   ├── apiserver.pem</span><br><span class="line">│   ├── ca.key</span><br><span class="line">│   ├── ca.pem</span><br><span class="line">│   ├── proxy.key</span><br><span class="line">│   └── proxy.pem</span><br><span class="line">├── scheduler</span><br><span class="line">└── token.csv</span><br><span class="line"></span><br><span class="line">1 directory, 15 files</span><br><span class="line">[root@server81 install_k8s_master]#</span><br></pre></td></tr></table></figure></p><p>其中<code>apiserver、controller-manager、scheduler</code>三个配置文件不需要拷贝到<code>node</code>节点服务器上，但是个人比较懒惰，干脆整个文件夹目录拷贝过去了。</p><p>好了，这里已经写清楚了部署<code>master</code>以及相关证书需要知道的知识了，那么下一步我们就切换到<code>node</code>部署的环节。</p><hr><p><img src="https://upload-images.jianshu.io/upload_images/13423234-908fd626817d259d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h2 id="部署Node节点服务"><a href="#部署Node节点服务" class="headerlink" title="部署Node节点服务"></a>部署Node节点服务</h2><p>在部署完毕上面的步骤之后，我们就可以开始部署<code>Node</code>的节点服务了，在部署之前，首先淡定将<code>master</code>部署时候创建的<code>TLS</code>以及相关<code>kubeconfig</code>文件都拷贝至各台<code>node</code>节点上。</p><blockquote><p><strong>Node服务器拓扑</strong></p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/13423234-1ab880bd4e5996c1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>因为上面已经写了很多内容了，相信读者还要找拓扑来看比较麻烦，那么就在这里部署<code>Node</code>服务之前，再次讲述一下。</p><p>1.首先我在之前的篇章已经部署好了三台<code>etcd</code>的集群服务<br>2.在<a href="">server81</a>的服务器上我部署好了<code>Master</code>节点的服务<br>3.那么下一步就是要给<a href="">Server81、86、87</a>三台服务器都部署上<code>Node</code>节点的服务了。</p><p><strong><em>那么下面我们就开始动手部署Node节点的服务吧。</em></strong></p><hr><blockquote><p><strong>拷贝Master节点创建的TLS以及kubeconfig文件至Node节点服务</strong></p></blockquote><p>因为Server81就是<code>Master</code>节点服务，所以不需要拷贝证书。<br>而Server86、87服务器就需要拷贝了，执行命名如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">[root@server81 etc]# scp -r kubernetes root@server86:/etc</span><br><span class="line">ca.pem                                                                                               100% 1135   243.9KB/s   00:00    </span><br><span class="line">ca.key                                                                                               100% 1679   383.9KB/s   00:00    </span><br><span class="line">apiserver.pem                                                                                        100% 1302   342.6KB/s   00:00    </span><br><span class="line">apiserver.key                                                                                        100% 1675   378.4KB/s   00:00    </span><br><span class="line">admin.pem                                                                                            100% 1050   250.3KB/s   00:00    </span><br><span class="line">admin.key                                                                                            100% 1675   401.5KB/s   00:00    </span><br><span class="line">proxy.pem                                                                                            100% 1009   253.2KB/s   00:00    </span><br><span class="line">proxy.key                                                                                            100% 1679    74.5KB/s   00:00    </span><br><span class="line">token.csv                                                                                            100%   84     4.5KB/s   00:00    </span><br><span class="line">config                                                                                               100%  656    45.9KB/s   00:00    </span><br><span class="line">apiserver                                                                                            100% 1656   484.7KB/s   00:00    </span><br><span class="line">controller-manager                                                                                   100%  615   163.8KB/s   00:00    </span><br><span class="line">scheduler                                                                                            100%  243    10.9KB/s   00:00    </span><br><span class="line">kube-proxy.kubeconfig                                                                                100% 5451   335.3KB/s   00:00    </span><br><span class="line">bootstrap.kubeconfig                                                                                 100% 1869   468.9KB/s   00:00    </span><br><span class="line">[root@server81 etc]# </span><br><span class="line">[root@server81 etc]# scp -r kubernetes root@server87:/etc</span><br><span class="line">ca.pem                                                                                               100% 1135   373.4KB/s   00:00    </span><br><span class="line">ca.key                                                                                               100% 1679   470.8KB/s   00:00    </span><br><span class="line">apiserver.pem                                                                                        100% 1302   511.5KB/s   00:00    </span><br><span class="line">apiserver.key                                                                                        100% 1675   565.6KB/s   00:00    </span><br><span class="line">admin.pem                                                                                            100% 1050   340.2KB/s   00:00    </span><br><span class="line">admin.key                                                                                            100% 1675   468.4KB/s   00:00    </span><br><span class="line">proxy.pem                                                                                            100% 1009   247.8KB/s   00:00    </span><br><span class="line">proxy.key                                                                                            100% 1679   516.4KB/s   00:00    </span><br><span class="line">token.csv                                                                                            100%   84    30.2KB/s   00:00    </span><br><span class="line">config                                                                                               100%  656   217.0KB/s   00:00    </span><br><span class="line">apiserver                                                                                            100% 1656   415.7KB/s   00:00    </span><br><span class="line">controller-manager                                                                                   100%  615   240.0KB/s   00:00    </span><br><span class="line">scheduler                                                                                            100%  243    92.1KB/s   00:00    </span><br><span class="line">kube-proxy.kubeconfig                                                                                100% 5451     1.3MB/s   00:00    </span><br><span class="line">bootstrap.kubeconfig                                                                                 100% 1869   614.0KB/s   00:00    </span><br><span class="line">[root@server81 etc]#</span><br></pre></td></tr></table></figure></p><hr><blockquote><p>查看Server86的拷贝文件情况，如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">[root@server86 etc]# pwd</span><br><span class="line">/etc</span><br><span class="line">[root@server86 etc]# </span><br><span class="line">[root@server86 etc]# tree kubernetes/</span><br><span class="line">kubernetes/</span><br><span class="line">├── apiserver</span><br><span class="line">├── bootstrap.kubeconfig</span><br><span class="line">├── config</span><br><span class="line">├── controller-manager</span><br><span class="line">├── kube-proxy.kubeconfig</span><br><span class="line">├── kubernetesTLS</span><br><span class="line">│   ├── admin.key</span><br><span class="line">│   ├── admin.pem</span><br><span class="line">│   ├── apiserver.key</span><br><span class="line">│   ├── apiserver.pem</span><br><span class="line">│   ├── ca.key</span><br><span class="line">│   ├── ca.pem</span><br><span class="line">│   ├── proxy.key</span><br><span class="line">│   └── proxy.pem</span><br><span class="line">├── scheduler</span><br><span class="line">└── token.csv</span><br><span class="line"></span><br><span class="line">1 directory, 15 files</span><br><span class="line">[root@server86 etc]# </span><br><span class="line">[root@server86 etc]# cd kubernetes/</span><br><span class="line">[root@server86 kubernetes]# ls</span><br><span class="line">apiserver  bootstrap.kubeconfig  config  controller-manager  kube-proxy.kubeconfig  kubernetesTLS  scheduler  token.csv</span><br><span class="line">[root@server86 kubernetes]# ls kubernetesTLS/</span><br><span class="line">admin.key  admin.pem  apiserver.key  apiserver.pem  ca.key  ca.pem  proxy.key  proxy.pem</span><br><span class="line">[root@server86 kubernetes]#</span><br></pre></td></tr></table></figure></p></blockquote><hr><blockquote><p>查看Server87的拷贝文件情况，如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">[root@server87 ~]# cd /etc/</span><br><span class="line">[root@server87 etc]# pwd</span><br><span class="line">/etc</span><br><span class="line">[root@server87 etc]# tree kubernetes/</span><br><span class="line">kubernetes/</span><br><span class="line">├── apiserver</span><br><span class="line">├── bootstrap.kubeconfig</span><br><span class="line">├── config</span><br><span class="line">├── controller-manager</span><br><span class="line">├── kube-proxy.kubeconfig</span><br><span class="line">├── kubernetesTLS</span><br><span class="line">│   ├── admin.key</span><br><span class="line">│   ├── admin.pem</span><br><span class="line">│   ├── apiserver.key</span><br><span class="line">│   ├── apiserver.pem</span><br><span class="line">│   ├── ca.key</span><br><span class="line">│   ├── ca.pem</span><br><span class="line">│   ├── proxy.key</span><br><span class="line">│   └── proxy.pem</span><br><span class="line">├── scheduler</span><br><span class="line">└── token.csv</span><br><span class="line"></span><br><span class="line">1 directory, 15 files</span><br><span class="line">[root@server87 etc]# cd kubernetes/</span><br><span class="line">[root@server87 kubernetes]# ls</span><br><span class="line">apiserver  bootstrap.kubeconfig  config  controller-manager  kube-proxy.kubeconfig  kubernetesTLS  scheduler  token.csv</span><br><span class="line">[root@server87 kubernetes]# </span><br><span class="line">[root@server87 kubernetes]# ls kubernetesTLS/</span><br><span class="line">admin.key  admin.pem  apiserver.key  apiserver.pem  ca.key  ca.pem  proxy.key  proxy.pem</span><br><span class="line">[root@server87 kubernetes]#</span><br></pre></td></tr></table></figure></p></blockquote><hr><blockquote><p><strong>拷贝访问etcd集群的TLS证书文件</strong></p></blockquote><ul><li>因为每台<code>Node</code>都需要访问Etcd集群服务，在后面部署<code>Calico</code>或者<code>flanneld</code>网络的时候都是需要证书访问etcd集群的，该部分就会在后面的部署中说明了。</li><li>但是因为恰好<code>Server81、86、87</code>服务器节点，我是用来做<code>etcd</code>三台服务集群的，在部署的时候已经拷贝好相关证书目录了。</li><li>可是，如果<a href="">新增一台服务器想要加入Node</a>的话，这时候该台服务器就需要单独将证书拷贝至相应的文件目录了。<br><strong><em>那么这里展示一下etcd集群TLS证书文件应该放在Node节点的哪个目录文件下</em></strong><br>其实哪个文件目录在<a href="https://www.jianshu.com/p/33b5f47ababc" target="_blank" rel="noopener">部署etcd集群</a>的时候我有说明过是可以自定义的，不过每个Node文件夹需要<strong>相同的服务器路径</strong>而已。</li></ul><blockquote><p>Server81存放etcd的TLS文件路径(<code>/etc/etcd/etcdSSL</code>)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">[root@server81 etc]# cd etcd/</span><br><span class="line">[root@server81 etcd]# ls</span><br><span class="line">etcd.conf  etcdSSL</span><br><span class="line">[root@server81 etcd]# </span><br><span class="line">[root@server81 etcd]# cd etcdSSL/</span><br><span class="line">[root@server81 etcdSSL]# </span><br><span class="line">[root@server81 etcdSSL]# pwd</span><br><span class="line">/etc/etcd/etcdSSL</span><br><span class="line">[root@server81 etcdSSL]# </span><br><span class="line">[root@server81 etcdSSL]# ls</span><br><span class="line">ca-config.json  ca.csr  ca-csr.json  ca-key.pem  ca.pem  etcd.csr  etcd-csr.json  etcd-key.pem  etcd.pem</span><br><span class="line">[root@server81 etcdSSL]# </span><br><span class="line">[root@server81 etcdSSL]# ls -ll</span><br><span class="line">total 36</span><br><span class="line">-rw-r--r-- 1 root root  288 Aug 14 14:05 ca-config.json</span><br><span class="line">-rw-r--r-- 1 root root  997 Aug 14 14:05 ca.csr</span><br><span class="line">-rw-r--r-- 1 root root  205 Aug 14 14:05 ca-csr.json</span><br><span class="line">-rw------- 1 root root 1675 Aug 14 14:05 ca-key.pem</span><br><span class="line">-rw-r--r-- 1 root root 1350 Aug 14 14:05 ca.pem</span><br><span class="line">-rw-r--r-- 1 root root 1066 Aug 14 14:05 etcd.csr</span><br><span class="line">-rw-r--r-- 1 root root  296 Aug 14 14:05 etcd-csr.json</span><br><span class="line">-rw------- 1 root root 1675 Aug 14 14:05 etcd-key.pem</span><br><span class="line">-rw-r--r-- 1 root root 1436 Aug 14 14:05 etcd.pem</span><br><span class="line">[root@server81 etcdSSL]#</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>Server86存在etcd的TLS文件路径(<code>/etc/etcd/etcdSSL</code>)</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@server86 etcd]# cd etcdSSL/</span><br><span class="line">[root@server86 etcdSSL]# </span><br><span class="line">[root@server86 etcdSSL]# pwd</span><br><span class="line">/etc/etcd/etcdSSL</span><br><span class="line">[root@server86 etcdSSL]# ls -ll</span><br><span class="line">total 36</span><br><span class="line">-rw-r--r-- 1 root root  288 Aug 14 16:42 ca-config.json</span><br><span class="line">-rw-r--r-- 1 root root  997 Aug 14 16:42 ca.csr</span><br><span class="line">-rw-r--r-- 1 root root  205 Aug 14 16:42 ca-csr.json</span><br><span class="line">-rw------- 1 root root 1675 Aug 14 16:42 ca-key.pem</span><br><span class="line">-rw-r--r-- 1 root root 1350 Aug 14 16:42 ca.pem</span><br><span class="line">-rw-r--r-- 1 root root 1066 Aug 14 16:42 etcd.csr</span><br><span class="line">-rw-r--r-- 1 root root  296 Aug 14 16:42 etcd-csr.json</span><br><span class="line">-rw------- 1 root root 1675 Aug 14 16:42 etcd-key.pem</span><br><span class="line">-rw-r--r-- 1 root root 1436 Aug 14 16:42 etcd.pem</span><br><span class="line">[root@server86 etcdSSL]#</span><br></pre></td></tr></table></figure><blockquote><p>Server87存在etcd的TLS文件路径(<code>/etc/etcd/etcdSSL</code>)</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[root@server87 etcd]# cd etcdSSL/</span><br><span class="line">[root@server87 etcdSSL]# ls</span><br><span class="line">ca-config.json  ca.csr  ca-csr.json  ca-key.pem  ca.pem  etcd.csr  etcd-csr.json  etcd-key.pem  etcd.pem</span><br><span class="line">[root@server87 etcdSSL]# </span><br><span class="line">[root@server87 etcdSSL]# pwd</span><br><span class="line">/etc/etcd/etcdSSL</span><br><span class="line">[root@server87 etcdSSL]# </span><br><span class="line">[root@server87 etcdSSL]# ls -ll</span><br><span class="line">total 36</span><br><span class="line">-rw-r--r-- 1 root root  288 Aug 14 16:52 ca-config.json</span><br><span class="line">-rw-r--r-- 1 root root  997 Aug 14 16:52 ca.csr</span><br><span class="line">-rw-r--r-- 1 root root  205 Aug 14 16:52 ca-csr.json</span><br><span class="line">-rw------- 1 root root 1675 Aug 14 16:52 ca-key.pem</span><br><span class="line">-rw-r--r-- 1 root root 1350 Aug 14 16:52 ca.pem</span><br><span class="line">-rw-r--r-- 1 root root 1066 Aug 14 16:52 etcd.csr</span><br><span class="line">-rw-r--r-- 1 root root  296 Aug 14 16:52 etcd-csr.json</span><br><span class="line">-rw------- 1 root root 1675 Aug 14 16:52 etcd-key.pem</span><br><span class="line">-rw-r--r-- 1 root root 1436 Aug 14 16:52 etcd.pem</span><br><span class="line">[root@server87 etcdSSL]#</span><br></pre></td></tr></table></figure><hr><blockquote><p><strong>部署Node步骤说明</strong></p></blockquote><ul><li>部署docker-ce （如果是直接部署docker的话，那就要启用cgroup参数了，用docker-ce则不需要）</li><li>部署kubelet服务</li><li>部署kube-proxy服务</li></ul><p>基本上每台Node节点都需要部署这三个服务的，我就单独拿一台Server81部署进行说明先吧。其余Server86、87的部署过程都是跟Server81的Node节点部署一致的。</p><hr><blockquote><p><strong>部署Docker-ce</strong></p></blockquote><p>如果不太懂docker安装的读者，可以访问<a href="https://docs.docker.com/install/linux/docker-ce/centos/#install-docker-ce-1" target="_blank" rel="noopener">docker官网的部署文档说明</a>（官网需要翻墙访问比较顺畅）<br><img src="https://upload-images.jianshu.io/upload_images/13423234-800b034e476c0159.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><hr><blockquote><p>1.下载docker-ce的rpm包</p></blockquote><p>点击<a href="https://download.docker.com/linux/centos/7/x86_64/stable/Packages/" target="_blank" rel="noopener">这里</a>，下载docker-ce的rpm安装包。<br><img src="https://upload-images.jianshu.io/upload_images/13423234-68cf69c73e13898d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><hr><blockquote><p>2.执行安装docker-ce<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install docker-ce-18.03.0.ce-1.el7.centos.x86_64.rpm -y</span><br></pre></td></tr></table></figure></p></blockquote><p>执行安装过程如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">[root@server81 docker]# ls</span><br><span class="line">certs.d      docker-ce-18.03.0.ce-1.el7.centos.x86_64.rpm  docker.service.simple  install_docker-ce.sh  set_docker_network.sh</span><br><span class="line">daemon.json  docker.service                                erase_docker-ce.sh     login_registry.sh     test.sh</span><br><span class="line">[root@server81 docker]# </span><br><span class="line">[root@server81 docker]# yum install docker-ce-18.03.0.ce-1.el7.centos.x86_64.rpm -y</span><br><span class="line">Loaded plugins: fastestmirror</span><br><span class="line">Examining docker-ce-18.03.0.ce-1.el7.centos.x86_64.rpm: docker-ce-18.03.0.ce-1.el7.centos.x86_64</span><br><span class="line">Marking docker-ce-18.03.0.ce-1.el7.centos.x86_64.rpm to be installed</span><br><span class="line">Resolving Dependencies</span><br><span class="line">--&gt; Running transaction check</span><br><span class="line">---&gt; Package docker-ce.x86_64 0:18.03.0.ce-1.el7.centos will be installed</span><br><span class="line">--&gt; Processing Dependency: container-selinux &gt;= 2.9 for package: docker-ce-18.03.0.ce-1.el7.centos.x86_64</span><br><span class="line">Loading mirror speeds from cached hostfile</span><br><span class="line"></span><br><span class="line">......</span><br><span class="line"></span><br><span class="line">Installed:</span><br><span class="line">  docker-ce.x86_64 0:18.03.0.ce-1.el7.centos                                                                                           </span><br><span class="line"></span><br><span class="line">Dependency Installed:</span><br><span class="line">  audit-libs-python.x86_64 0:2.8.1-3.el7     checkpolicy.x86_64 0:2.5-6.el7                 container-selinux.noarch 2:2.66-1.el7     </span><br><span class="line">  libcgroup.x86_64 0:0.41-15.el7             libseccomp.x86_64 0:2.3.1-3.el7                libsemanage-python.x86_64 0:2.5-11.el7    </span><br><span class="line">  pigz.x86_64 0:2.3.4-1.el7                  policycoreutils-python.x86_64 0:2.5-22.el7     python-IPy.noarch 0:0.75-6.el7            </span><br><span class="line">  setools-libs.x86_64 0:3.3.8-2.el7         </span><br><span class="line"></span><br><span class="line">Dependency Updated:</span><br><span class="line">  audit.x86_64 0:2.8.1-3.el7                          audit-libs.x86_64 0:2.8.1-3.el7      libselinux.x86_64 0:2.5-12.el7            </span><br><span class="line">  libselinux-python.x86_64 0:2.5-12.el7               libselinux-utils.x86_64 0:2.5-12.el7 libsemanage.x86_64 0:2.5-11.el7           </span><br><span class="line">  libsepol.x86_64 0:2.5-8.1.el7                       policycoreutils.x86_64 0:2.5-22.el7  selinux-policy.noarch 0:3.13.1-192.el7_5.4</span><br><span class="line">  selinux-policy-targeted.noarch 0:3.13.1-192.el7_5.4</span><br><span class="line"></span><br><span class="line">Complete!</span><br><span class="line">[root@server81 docker]#</span><br></pre></td></tr></table></figure></p><hr><blockquote><p>3.启用docker-ce</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl enable docker</span><br><span class="line">systemctl restart docker</span><br><span class="line">systemctl status docker</span><br></pre></td></tr></table></figure><p>执行如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">[root@server81 install_k8s_node]# systemctl daemon-reload</span><br><span class="line">[root@server81 install_k8s_node]# systemctl enable docker</span><br><span class="line">Created symlink from /etc/systemd/system/multi-user.target.wants/docker.service to /usr/lib/systemd/system/docker.service.</span><br><span class="line">[root@server81 install_k8s_node]# systemctl restart docker</span><br><span class="line">[root@server81 install_k8s_node]# systemctl status docker</span><br><span class="line">● docker.service - Docker Application Container Engine</span><br><span class="line">   Loaded: loaded (/usr/lib/systemd/system/docker.service; enabled; vendor preset: disabled)</span><br><span class="line">   Active: active (running) since Mon 2018-08-20 14:11:17 HKT; 639ms ago</span><br><span class="line">     Docs: https://docs.docker.com</span><br><span class="line"> Main PID: 3014 (dockerd)</span><br><span class="line">   Memory: 36.4M</span><br><span class="line">   CGroup: /system.slice/docker.service</span><br><span class="line">           ├─3014 /usr/bin/dockerd</span><br><span class="line">           └─3021 docker-containerd --config /var/run/docker/containerd/containerd.toml</span><br><span class="line"></span><br><span class="line">Aug 20 14:11:17 server81 dockerd[3014]: time=&quot;2018-08-20T14:11:17+08:00&quot; level=info msg=serving... address=&quot;/var/run/docker/c...d/grpc&quot;</span><br><span class="line">Aug 20 14:11:17 server81 dockerd[3014]: time=&quot;2018-08-20T14:11:17+08:00&quot; level=info msg=&quot;containerd successfully booted in 0....tainerd</span><br><span class="line">Aug 20 14:11:17 server81 dockerd[3014]: time=&quot;2018-08-20T14:11:17.492174891+08:00&quot; level=info msg=&quot;Graph migration to content...econds&quot;</span><br><span class="line">Aug 20 14:11:17 server81 dockerd[3014]: time=&quot;2018-08-20T14:11:17.493087053+08:00&quot; level=info msg=&quot;Loading containers: start.&quot;</span><br><span class="line">Aug 20 14:11:17 server81 dockerd[3014]: time=&quot;2018-08-20T14:11:17.608563905+08:00&quot; level=info msg=&quot;Default bridge (docker0) i...ddress&quot;</span><br><span class="line">Aug 20 14:11:17 server81 dockerd[3014]: time=&quot;2018-08-20T14:11:17.645395453+08:00&quot; level=info msg=&quot;Loading containers: done.&quot;</span><br><span class="line">Aug 20 14:11:17 server81 dockerd[3014]: time=&quot;2018-08-20T14:11:17.659457843+08:00&quot; level=info msg=&quot;Docker daemon&quot; commit=0520...03.0-ce</span><br><span class="line">Aug 20 14:11:17 server81 dockerd[3014]: time=&quot;2018-08-20T14:11:17.659619134+08:00&quot; level=info msg=&quot;Daemon has completed initialization&quot;</span><br><span class="line">Aug 20 14:11:17 server81 dockerd[3014]: time=&quot;2018-08-20T14:11:17.669961967+08:00&quot; level=info msg=&quot;API listen on /var/run/docker.sock&quot;</span><br><span class="line">Aug 20 14:11:17 server81 systemd[1]: Started Docker Application Container Engine.</span><br><span class="line">Hint: Some lines were ellipsized, use -l to show in full.</span><br><span class="line">[root@server81 install_k8s_node]# </span><br><span class="line">[root@server81 install_k8s_node]# docker version</span><br><span class="line">Client:</span><br><span class="line"> Version:18.03.0-ce</span><br><span class="line"> API version:1.37</span><br><span class="line"> Go version:go1.9.4</span><br><span class="line"> Git commit:0520e24</span><br><span class="line"> Built:Wed Mar 21 23:09:15 2018</span><br><span class="line"> OS/Arch:linux/amd64</span><br><span class="line"> Experimental:false</span><br><span class="line"> Orchestrator:swarm</span><br><span class="line"></span><br><span class="line">Server:</span><br><span class="line"> Engine:</span><br><span class="line">  Version:18.03.0-ce</span><br><span class="line">  API version:1.37 (minimum version 1.12)</span><br><span class="line">  Go version:go1.9.4</span><br><span class="line">  Git commit:0520e24</span><br><span class="line">  Built:Wed Mar 21 23:13:03 2018</span><br><span class="line">  OS/Arch:linux/amd64</span><br><span class="line">  Experimental:false</span><br><span class="line">[root@server81 install_k8s_node]#</span><br></pre></td></tr></table></figure></p><hr><blockquote><p><strong>拷贝二进制可执行文件至Node服务器（<code>/usr/bin</code>）</strong></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">basedir=$(cd `dirname $0`;pwd)</span><br><span class="line">softwareDir=$basedir/../install_kubernetes_software</span><br><span class="line">binDir=/usr/bin</span><br><span class="line"></span><br><span class="line">## function and implments</span><br><span class="line">function check_firewalld_selinux()&#123;</span><br><span class="line">  systemctl status firewalld</span><br><span class="line">  /usr/sbin/sestatus -v</span><br><span class="line">  swapoff -a</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">check_firewalld_selinux</span><br><span class="line"></span><br><span class="line">function copy_bin()&#123;</span><br><span class="line">cp -v $softwareDir/kubectl $binDir</span><br><span class="line">cp -v $softwareDir/kubelet $binDir</span><br><span class="line">cp -v $softwareDir/kube-proxy $binDir</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">copy_bin</span><br></pre></td></tr></table></figure><p>执行结果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[root@server81 install_k8s_node]# ./Step1_config.sh </span><br><span class="line">● firewalld.service - firewalld - dynamic firewall daemon</span><br><span class="line">   Loaded: loaded (/usr/lib/systemd/system/firewalld.service; disabled; vendor preset: enabled)</span><br><span class="line">   Active: inactive (dead)</span><br><span class="line">     Docs: man:firewalld(1)</span><br><span class="line">SELinux status:                 disabled</span><br><span class="line">‘/opt/install_kubernetes/install_k8s_node/../install_kubernetes_software/kubectl’ -&gt; ‘/usr/bin/kubectl’</span><br><span class="line">‘/opt/install_kubernetes/install_k8s_node/../install_kubernetes_software/kubelet’ -&gt; ‘/usr/bin/kubelet’</span><br><span class="line">‘/opt/install_kubernetes/install_k8s_node/../install_kubernetes_software/kube-proxy’ -&gt; ‘/usr/bin/kube-proxy’</span><br><span class="line">[root@server81 install_k8s_node]# </span><br><span class="line">[root@server81 install_k8s_node]# ls -ll /usr/bin/kube*</span><br><span class="line">-rwxr-xr-x 1 root root 185471375 Aug 19 22:57 /usr/bin/kube-apiserver</span><br><span class="line">-rwxr-xr-x 1 root root 154056749 Aug 19 22:57 /usr/bin/kube-controller-manager</span><br><span class="line">-rwxr-xr-x 1 root root  55421261 Aug 20 14:14 /usr/bin/kubectl</span><br><span class="line">-rwxr-xr-x 1 root root 162998216 Aug 20 14:14 /usr/bin/kubelet</span><br><span class="line">-rwxr-xr-x 1 root root  52055519 Aug 20 14:14 /usr/bin/kube-proxy</span><br><span class="line">-rwxr-xr-x 1 root root  55610654 Aug 19 22:57 /usr/bin/kube-scheduler</span><br><span class="line">[root@server81 install_k8s_node]#</span><br></pre></td></tr></table></figure></p><p>首先关闭每台<code>Node</code>服务器的<code>swap分区、防火墙、selinux</code>，然后将<code>二进制可执行文件</code>拷贝至<code>/usr/bin</code>目录下。<br>那么下面开始部署<code>Node</code>节点的<code>kubelet</code>和<code>kube-proxy</code>服务。</p><hr><blockquote><p><strong>部署kubelet服务</strong></p></blockquote><blockquote><p>1.编写kubelet.service文件（/usr/lib/systemd/system）</p></blockquote><p>编写<code>kubelet.service</code>写入<code>/usr/lib/systemd/system</code>目录下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">[root@server81 install_k8s_node]# cat /usr/lib/systemd/system/kubelet.service </span><br><span class="line">[Unit]</span><br><span class="line">Description=Kubernetes Kubelet Server</span><br><span class="line">Documentation=https://github.com/GoogleCloudPlatform/kubernetes</span><br><span class="line">After=docker.service</span><br><span class="line">Requires=docker.service</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">EnvironmentFile=-/etc/kubernetes/config</span><br><span class="line">EnvironmentFile=-/etc/kubernetes/kubelet</span><br><span class="line">ExecStart=/usr/bin/kubelet \</span><br><span class="line">            $KUBE_LOGTOSTDERR \</span><br><span class="line">            $KUBE_LOG_LEVEL \</span><br><span class="line">            $KUBELET_CONFIG\</span><br><span class="line">            $KUBELET_ADDRESS \</span><br><span class="line">            $KUBELET_PORT \</span><br><span class="line">            $KUBELET_HOSTNAME \</span><br><span class="line">            $KUBELET_POD_INFRA_CONTAINER \</span><br><span class="line">            $KUBELET_ARGS</span><br><span class="line">Restart=on-failure</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">[root@server81 install_k8s_node]#</span><br></pre></td></tr></table></figure><hr><blockquote><p>kubelet.service参数说明<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">EnvironmentFile=-/etc/kubernetes/config</span><br><span class="line">EnvironmentFile=-/etc/kubernetes/kubelet</span><br></pre></td></tr></table></figure></p></blockquote><p>说明：配置<code>kubelet</code>启用读取的两个配置文件<code>config、kubelet</code>，其中<code>config</code>在部署<code>master</code>服务的时候已经写好了，这是一个通用的配置文件。那么下面则单独编写<code>kubelet</code>的配置文件。</p><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ExecStart=/usr/bin/kubelet \</span><br><span class="line">            $KUBE_LOGTOSTDERR \</span><br><span class="line">            $KUBE_LOG_LEVEL \</span><br><span class="line">            $KUBELET_CONFIG\</span><br><span class="line">            $KUBELET_ADDRESS \</span><br><span class="line">            $KUBELET_PORT \</span><br><span class="line">            $KUBELET_HOSTNAME \</span><br><span class="line">            $KUBELET_POD_INFRA_CONTAINER \</span><br><span class="line">            $KUBELET_ARGS</span><br></pre></td></tr></table></figure><p>说明：定义service启用的时候运行的二进制可执行文件（<code>/usr/bin/kubelet</code>）以及相关服务启动所需的参数（<code>这些参数从配置文件中读取</code>）。</p><hr><blockquote><p><strong>配置文件kubelet（/etc/kubernetes）</strong></p></blockquote><p>编写<code>kubelet</code>配置文件至<code>/etc/kubernetes/</code>目录下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">[root@server81 install_k8s_node]# cat /etc/kubernetes/</span><br><span class="line">apiserver              config                 kubelet                kubernetesTLS/         token.csv              </span><br><span class="line">bootstrap.kubeconfig   controller-manager     kube-proxy.kubeconfig  scheduler              </span><br><span class="line">[root@server81 install_k8s_node]# cat /etc/kubernetes/kubelet </span><br><span class="line"></span><br><span class="line">###</span><br><span class="line">## kubernetes kubelet (minion) config</span><br><span class="line">#</span><br><span class="line">## The address for the info server to serve on (set to 0.0.0.0 or &quot;&quot; for all interfaces)</span><br><span class="line">#KUBELET_ADDRESS=&quot;--address=0.0.0.0&quot;</span><br><span class="line">#</span><br><span class="line">## The port for the info server to serve on</span><br><span class="line">#KUBELET_PORT=&quot;--port=10250&quot;</span><br><span class="line">#</span><br><span class="line">## You may leave this blank to use the actual hostname</span><br><span class="line">KUBELET_HOSTNAME=&quot;--hostname-override=172.16.5.81&quot;</span><br><span class="line">#</span><br><span class="line">## location of the api-server</span><br><span class="line">KUBELET_CONFIG=&quot;--kubeconfig=/etc/kubernetes/kubelet.kubeconfig&quot;</span><br><span class="line">#</span><br><span class="line">## pod infrastructure container</span><br><span class="line">KUBELET_POD_INFRA_CONTAINER=&quot;--pod-infra-container-image=172.16.5.81:5000/pause-amd64:3.1&quot;</span><br><span class="line">#</span><br><span class="line">## Add your own!</span><br><span class="line">KUBELET_ARGS=&quot;--cluster-dns=10.0.6.200  --serialize-image-pulls=false  --bootstrap-kubeconfig=/etc/kubernetes/bootstrap.kubeconfig  --kubeconfig=/etc/kubernetes/kubelet.kubeconfig  --cert-dir=/etc/kubernetes/kubernetesTLS  --cluster-domain=cluster.local.  --hairpin-mode promiscuous-bridge  --network-plugin=cni&quot;</span><br><span class="line"></span><br><span class="line">[root@server81 install_k8s_node]#</span><br></pre></td></tr></table></figure></p><blockquote><p><strong>kubelet配置文件中的相关参数说明</strong></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">## You may leave this blank to use the actual hostname</span><br><span class="line">KUBELET_HOSTNAME=&quot;--hostname-override=172.16.5.81&quot;</span><br></pre></td></tr></table></figure><p>说明：这里是写<code>Node</code>节点的名称，我使用该服务器的IP地址进行覆盖。如果是在<code>Server87、Server86</code>上部署，则修改相应的IP地址即可。<br>在部署完毕之后，执行<code>kubectl get node</code>，你就可以看到你定义的<code>node</code>节点名称的了。</p><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">## location of the api-server</span><br><span class="line">KUBELET_CONFIG=&quot;--kubeconfig=/etc/kubernetes/kubelet.kubeconfig&quot;</span><br></pre></td></tr></table></figure><p>说明：定义<code>kubelet</code>的<code>kubeconfig</code>文件路径，之前在<code>master</code>部署的时候创建的。</p><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">## pod infrastructure container</span><br><span class="line">KUBELET_POD_INFRA_CONTAINER=&quot;--pod-infra-container-image=172.16.5.81:5000/pause-amd64:3.1&quot;</span><br></pre></td></tr></table></figure><p>说明：</p><ul><li>在创建应用的时候，<code>kubelet</code>是需要依赖于<code>pause</code>镜像的，如果没有<code>pause</code>镜像，那么<strong>镜像就会启用失败</strong>。</li><li>所以每个<code>Node</code>节点上必须要有<code>pause</code>的镜像，但是默认<code>pause</code>镜像需要翻墙后再去官网下载的，这样会影响镜像启动的效率，那么我就将<code>pause</code>镜像下载到我的<strong>私有仓库</strong>中，方便内网启动。<br>这里pause镜像的私有地址：<code>172.16.5.81:5000/pause-amd64:3.1</code></li><li><p>对于读者可以从以下地址地址<code>pause</code>镜像，然后再搭设一个自己的私有仓库。下载地址如下：（<a href="http://blog.51cto.com/tryingstuff/2120374" target="_blank" rel="noopener">该仓库是另一位博客作者提供的，在此感谢他</a>）该作者写的<code>kuberntes</code>部署是没有启用<code>RBAC</code>模式的，是极简模式，有兴趣的读者也可以去看看。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker pull  mirrorgooglecontainers/pause-amd64:3.1</span><br><span class="line">docker tag mirrorgooglecontainers/pause-amd64:3.1 k8s.gcr.io/pause-amd64:3.1</span><br></pre></td></tr></table></figure></li><li><p>如果你可以翻墙，直接下载官网的镜像地址即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull   k8s.gcr.io/pause-amd64:3.1</span><br></pre></td></tr></table></figure></li></ul><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">## Add your own!</span><br><span class="line">KUBELET_ARGS=&quot;--cluster-dns=10.0.6.200  \</span><br><span class="line">--serialize-image-pulls=false \</span><br><span class="line">--bootstrap-kubeconfig=/etc/kubernetes/bootstrap.kubeconfig  \</span><br><span class="line">--kubeconfig=/etc/kubernetes/kubelet.kubeconfig \</span><br><span class="line">--cert-dir=/etc/kubernetes/kubernetesTLS \</span><br><span class="line">--cluster-domain=cluster.local. \</span><br><span class="line">--hairpin-mode promiscuous-bridge \</span><br><span class="line">--network-plugin=cni&quot;</span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:left">参数</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left"><code>--cluster-dns=10.0.6.200</code></td><td style="text-align:left">设置<code>kubernetes</code>集群网络中内部<code>DNS</code>的<code>IP</code>地址，后续用于<code>CoreDNS</code></td></tr><tr><td style="text-align:left"><code>--serialize-image-pulls=false</code></td><td style="text-align:left">设置<code>kubernetes</code>集群允许使用<code>http</code>非安全镜像拉取</td></tr><tr><td style="text-align:left"><code>--bootstrap-kubeconfig=/etc/kubernetes/bootstrap.kubeconfig</code></td><td style="text-align:left">设置<code>bootstrap.kubeconfig</code>的文件路径</td></tr><tr><td style="text-align:left"><code>--cert-dir=/etc/kubernetes/kubernetesTLS</code></td><td style="text-align:left">设置<code>kubernetes</code>的<code>TLS</code>文件路径，后续<code>kubelet</code>服务启动之后，会在该文件夹自动创建<code>kubelet</code>相关公钥和私钥文件</td></tr><tr><td style="text-align:left"><code>--cluster-domain=cluster.local.</code></td><td style="text-align:left">设置<code>kubernetes</code>集群的<code>DNS</code>域名</td></tr><tr><td style="text-align:left"><code>--hairpin-mode promiscuous-bridge</code></td><td style="text-align:left">设置<code>pod</code>桥接网络模式</td></tr><tr><td style="text-align:left"><code>--network-plugin=cni</code></td><td style="text-align:left">设置启用<code>CNI</code>网络插件，因为后续是使用<code>Calico</code>网络，所以需要配置</td></tr></tbody></table><p>如果你还想更加详细了解kubelet的参数配置，可以访问官网，点击<a href="https://kubernetes.io/docs/tasks/administer-cluster/kubelet-config-file/" target="_blank" rel="noopener">这里</a>。</p><hr><blockquote><p><strong>启动kubelet服务</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl enable kubelet</span><br><span class="line">systemctl start kubelet</span><br><span class="line">systemctl status kubelet</span><br></pre></td></tr></table></figure></p></blockquote><p>执行运行如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">[root@server81 kubernetesTLS]# ls -ll</span><br><span class="line">total 32</span><br><span class="line">-rw-r--r-- 1 root root 1675 Aug 19 22:21 admin.key</span><br><span class="line">-rw-r--r-- 1 root root 1050 Aug 19 22:21 admin.pem</span><br><span class="line">-rw-r--r-- 1 root root 1675 Aug 19 22:21 apiserver.key</span><br><span class="line">-rw-r--r-- 1 root root 1302 Aug 19 22:21 apiserver.pem</span><br><span class="line">-rw-r--r-- 1 root root 1679 Aug 19 22:21 ca.key</span><br><span class="line">-rw-r--r-- 1 root root 1135 Aug 19 22:21 ca.pem</span><br><span class="line">-rw-r--r-- 1 root root 1679 Aug 19 22:21 proxy.key</span><br><span class="line">-rw-r--r-- 1 root root 1009 Aug 19 22:21 proxy.pem</span><br><span class="line">[root@server81 kubernetesTLS]# </span><br><span class="line">[root@server81 kubernetesTLS]# systemctl daemon-reload</span><br><span class="line">[root@server81 kubernetesTLS]# systemctl enable kubelet</span><br><span class="line">[root@server81 kubernetesTLS]# systemctl start kubelet</span><br><span class="line">[root@server81 kubernetesTLS]# systemctl status kubelet</span><br><span class="line">● kubelet.service - Kubernetes Kubelet Server</span><br><span class="line">   Loaded: loaded (/usr/lib/systemd/system/kubelet.service; enabled; vendor preset: disabled)</span><br><span class="line">   Active: active (running) since Mon 2018-08-20 15:07:26 HKT; 640ms ago</span><br><span class="line">     Docs: https://github.com/GoogleCloudPlatform/kubernetes</span><br><span class="line"> Main PID: 3589 (kubelet)</span><br><span class="line">   Memory: 16.1M</span><br><span class="line">   CGroup: /system.slice/kubelet.service</span><br><span class="line">           └─3589 /usr/bin/kubelet --logtostderr=true --v=0 --kubeconfig=/etc/kubernetes/kubelet.kubeconfig --hostname-override=172.16.5.81 --pod-infra-container-image=172.16.5.81:5000/...</span><br><span class="line"></span><br><span class="line">Aug 20 15:07:26 server81 systemd[1]: Started Kubernetes Kubelet Server.</span><br><span class="line">Aug 20 15:07:26 server81 systemd[1]: Starting Kubernetes Kubelet Server...</span><br><span class="line">Aug 20 15:07:26 server81 kubelet[3589]: Flag --cluster-dns has been deprecated, This parameter should be set via the config file specified by the Kubelet&apos;s --config flag. Se...information.</span><br><span class="line">Aug 20 15:07:26 server81 kubelet[3589]: Flag --serialize-image-pulls has been deprecated, This parameter should be set via the config file specified by the Kubelet&apos;s --confi...information.</span><br><span class="line">Aug 20 15:07:26 server81 kubelet[3589]: Flag --cluster-domain has been deprecated, This parameter should be set via the config file specified by the Kubelet&apos;s --config flag....information.</span><br><span class="line">Aug 20 15:07:26 server81 kubelet[3589]: Flag --hairpin-mode has been deprecated, This parameter should be set via the config file specified by the Kubelet&apos;s --config flag. S...information.</span><br><span class="line">Aug 20 15:07:26 server81 kubelet[3589]: I0820 15:07:26.364083    3589 feature_gate.go:230] feature gates: &amp;&#123;map[]&#125;</span><br><span class="line">Aug 20 15:07:26 server81 kubelet[3589]: I0820 15:07:26.364224    3589 feature_gate.go:230] feature gates: &amp;&#123;map[]&#125;</span><br><span class="line">Hint: Some lines were ellipsized, use -l to show in full.</span><br><span class="line">[root@server81 kubernetesTLS]# </span><br><span class="line">[root@server81 kubernetesTLS]# ls -ll</span><br><span class="line">total 44</span><br><span class="line">-rw-r--r-- 1 root root 1675 Aug 19 22:21 admin.key</span><br><span class="line">-rw-r--r-- 1 root root 1050 Aug 19 22:21 admin.pem</span><br><span class="line">-rw-r--r-- 1 root root 1675 Aug 19 22:21 apiserver.key</span><br><span class="line">-rw-r--r-- 1 root root 1302 Aug 19 22:21 apiserver.pem</span><br><span class="line">-rw-r--r-- 1 root root 1679 Aug 19 22:21 ca.key</span><br><span class="line">-rw-r--r-- 1 root root 1135 Aug 19 22:21 ca.pem</span><br><span class="line">-rw------- 1 root root  227 Aug 20 15:07 kubelet-client.key.tmp</span><br><span class="line">-rw-r--r-- 1 root root 2177 Aug 20 15:07 kubelet.crt</span><br><span class="line">-rw------- 1 root root 1679 Aug 20 15:07 kubelet.key</span><br><span class="line">-rw-r--r-- 1 root root 1679 Aug 19 22:21 proxy.key</span><br><span class="line">-rw-r--r-- 1 root root 1009 Aug 19 22:21 proxy.pem</span><br><span class="line">[root@server81 kubernetesTLS]#</span><br></pre></td></tr></table></figure></p><p><strong>注意</strong>：</p><ul><li>可以从文件夹中看出，<code>kubelet</code>服务启动之后，<strong>自动响应生成</strong>了这三个文件：<code>kubelet-client.key.tmp  kubelet.crt  kubelet.key</code>。</li><li>如果需要重新部署<code>kubelet</code>服务，那么就需要<strong>删除这三个文件</strong>即可。不然会<strong>提示过期</strong>，服务启动异常。</li><li>另外，可以看到<code>kubelet-client.key.tmp</code>该文件还没有亮色，不可以运行起来，原因是<code>kubelet</code>向<code>apiserver</code>发出<code>CSR</code>认证的请求，此时<code>apiserver</code>还没有认证通过。</li><li>那么下一步就需要回到<code>master</code>服务认证<code>csr</code>。</li></ul><blockquote><p><strong>在master节点服务器认证通过csr</strong></p></blockquote><p>master认证通过csr脚本如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">basedir=$(cd `dirname $0`;pwd)</span><br><span class="line"></span><br><span class="line">## function </span><br><span class="line">function node_approve_csr()&#123;</span><br><span class="line">  CSR=`kubectl get csr | grep csr | grep Pending |  awk &apos;&#123;print $1&#125;&apos; | head -n 1`</span><br><span class="line">  kubectl certificate approve $CSR</span><br><span class="line">  kubectl get nodes</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">node_approve_csr</span><br></pre></td></tr></table></figure></p><p>执行通过csr过程如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">[root@server81 kubernetesTLS]# ls</span><br><span class="line">admin.key  admin.pem  apiserver.key  apiserver.pem  ca.key  ca.pem  kubelet-client.key.tmp  kubelet.crt  kubelet.key  proxy.key  proxy.pem</span><br><span class="line">[root@server81 kubernetesTLS]# </span><br><span class="line">[root@server81 kubernetesTLS]# kubectl get node</span><br><span class="line">No resources found.</span><br><span class="line">[root@server81 kubernetesTLS]# </span><br><span class="line">[root@server81 kubernetesTLS]# kubectl get csr</span><br><span class="line">NAME                                                   AGE       REQUESTOR           CONDITION</span><br><span class="line">node-csr-_xuU6rY0NNn9v2kgY58dOI86X_F1PBcbziXByJXnB7s   54m       kubelet-bootstrap   Pending</span><br><span class="line">node-csr-fH4Ct4Fg4TgzFV0dP-SlfVCtTo9XNCJjajzPohDVxHE   6m        kubelet-bootstrap   Pending</span><br><span class="line">[root@server81 kubernetesTLS]# </span><br><span class="line">[root@server81 kubernetesTLS]# kubectl certificate approve node-csr-fH4Ct4Fg4TgzFV0dP-SlfVCtTo9XNCJjajzPohDVxHE</span><br><span class="line">certificatesigningrequest.certificates.k8s.io/node-csr-fH4Ct4Fg4TgzFV0dP-SlfVCtTo9XNCJjajzPohDVxHE approved</span><br><span class="line">[root@server81 kubernetesTLS]# </span><br><span class="line">[root@server81 kubernetesTLS]# kubectl get node</span><br><span class="line">NAME          STATUS     ROLES     AGE       VERSION</span><br><span class="line">172.16.5.81   NotReady   &lt;none&gt;    5s        v1.11.0</span><br><span class="line">[root@server81 kubernetesTLS]# </span><br><span class="line">[root@server81 kubernetesTLS]# kubectl get csr</span><br><span class="line">NAME                                                   AGE       REQUESTOR           CONDITION</span><br><span class="line">node-csr-_xuU6rY0NNn9v2kgY58dOI86X_F1PBcbziXByJXnB7s   54m       kubelet-bootstrap   Pending</span><br><span class="line">node-csr-fH4Ct4Fg4TgzFV0dP-SlfVCtTo9XNCJjajzPohDVxHE   7m        kubelet-bootstrap   Approved,Issued</span><br><span class="line">[root@server81 kubernetesTLS]# </span><br><span class="line">[root@server81 kubernetesTLS]# ls -ll</span><br><span class="line">total 44</span><br><span class="line">-rw-r--r-- 1 root root 1675 Aug 19 22:21 admin.key</span><br><span class="line">-rw-r--r-- 1 root root 1050 Aug 19 22:21 admin.pem</span><br><span class="line">-rw-r--r-- 1 root root 1675 Aug 19 22:21 apiserver.key</span><br><span class="line">-rw-r--r-- 1 root root 1302 Aug 19 22:21 apiserver.pem</span><br><span class="line">-rw-r--r-- 1 root root 1679 Aug 19 22:21 ca.key</span><br><span class="line">-rw-r--r-- 1 root root 1135 Aug 19 22:21 ca.pem</span><br><span class="line">-rw------- 1 root root 1183 Aug 20 15:14 kubelet-client-2018-08-20-15-14-35.pem</span><br><span class="line">lrwxrwxrwx 1 root root   68 Aug 20 15:14 kubelet-client-current.pem -&gt; /etc/kubernetes/kubernetesTLS/kubelet-client-2018-08-20-15-14-35.pem</span><br><span class="line">-rw-r--r-- 1 root root 2177 Aug 20 15:07 kubelet.crt</span><br><span class="line">-rw------- 1 root root 1679 Aug 20 15:07 kubelet.key</span><br><span class="line">-rw-r--r-- 1 root root 1679 Aug 19 22:21 proxy.key</span><br><span class="line">-rw-r--r-- 1 root root 1009 Aug 19 22:21 proxy.pem</span><br><span class="line">[root@server81 kubernetesTLS]#</span><br></pre></td></tr></table></figure><p>说明：</p><ul><li>可以看到执行<code>kubectl certificate approve node-csr-fH4Ct4Fg4TgzFV0dP-SlfVCtTo9XNCJjajzPohDVxHE</code>之后，</li><li>再次执行<code>kubectl get csr</code> 查看<code>csr</code>的时候，在<code>node-csr</code>的状态就变成了 <code>Approved,Issued</code>了，</li><li>此时<code>kubectl get node</code>的时候就可以看到<code>node</code>节点了，只是状态为<code>NotReady</code>而已</li><li>另外，查看<code>TLS</code>文件夹，可以看到<code>kubelet-client.key.tmp</code>该临时文件在<code>csr</code>通过之后，变成了文件如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-rw------- 1 root root 1183 Aug 20 15:14 kubelet-client-2018-08-20-15-14-35.pem</span><br><span class="line">lrwxrwxrwx 1 root root   68 Aug 20 15:14 kubelet-client-current.pem -&gt; /etc/kubernetes/kubernetesTLS/kubelet-client-2018-08-20-15-14-35.pem</span><br></pre></td></tr></table></figure></li></ul><hr><blockquote><p>最后查看一下kubelet启动后的日志：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@server81 install_k8s_node]# journalctl -f -u kubelet</span><br><span class="line">-- Logs begin at Sun 2018-08-19 21:26:42 HKT. --</span><br><span class="line">Aug 20 15:20:51 server81 kubelet[3589]: W0820 15:20:51.476453    3589 cni.go:172] Unable to update cni config: No networks found in /etc/cni/net.d</span><br><span class="line">Aug 20 15:20:51 server81 kubelet[3589]: E0820 15:20:51.477201    3589 kubelet.go:2112] Container runtime network not ready: NetworkReady=false reason:NetworkPluginNotReady message:docker: network plugin is not ready: cni config uninitialized</span><br><span class="line">Aug 20 15:20:56 server81 kubelet[3589]: W0820 15:20:56.479691    3589 cni.go:172] Unable to update cni config: No networks found in /etc/cni/net.d</span><br><span class="line">Aug 20 15:20:56 server81 kubelet[3589]: E0820 15:20:56.480061    3589 kubelet.go:2112] Container runtime network not ready: NetworkReady=false reason:NetworkPluginNotReady message:docker: network plugin is not ready: cni config uninitialized</span><br><span class="line">Aug 20 15:21:01 server81 kubelet[3589]: W0820 15:21:01.483272    3589 cni.go:172] Unable to update cni config: No networks found in /etc/cni/net.d</span><br><span class="line">Aug 20 15:21:01 server81 kubelet[3589]: E0820 15:21:01.484824    3589 kubelet.go:2112] Container runtime network not ready: NetworkReady=false reason:NetworkPluginNotReady message:docker: network plugin is not ready: cni config uninitialized</span><br><span class="line">Aug 20 15:21:06 server81 kubelet[3589]: W0820 15:21:06.488203    3589 cni.go:172] Unable to update cni config: No networks found in /etc/cni/net.d</span><br><span class="line">Aug 20 15:21:06 server81 kubelet[3589]: E0820 15:21:06.489788    3589 kubelet.go:2112] Container runtime network not ready: NetworkReady=false reason:NetworkPluginNotReady message:docker: network plugin is not ready: cni config uninitialized</span><br><span class="line">Aug 20 15:21:11 server81 kubelet[3589]: W0820 15:21:11.497281    3589 cni.go:172] Unable to update cni config: No networks found in /etc/cni/net.d</span><br><span class="line">Aug 20 15:21:11 server81 kubelet[3589]: E0820 15:21:11.497941    3589 kubelet.go:2112] Container runtime network not ready: NetworkReady=false reason:NetworkPluginNotReady message:docker: network plugin is not ready: cni config uninitialized</span><br><span class="line">Aug 20 15:21:16 server81 kubelet[3589]: W0820 15:21:16.502290    3589 cni.go:172] Unable to update cni config: No networks found in /etc/cni/net.d</span><br><span class="line">Aug 20 15:21:16 server81 kubelet[3589]: E0820 15:21:16.502733    3589 kubelet.go:2112] Container runtime network not ready: NetworkReady=false reason:NetworkPluginNotReady message:docker: network plugin is not ready: cni config uninitialized</span><br></pre></td></tr></table></figure></p></blockquote><p>说明：此时日志提示没有<code>cni</code>网络，这个后续在安装<code>Calico</code>网络的时候说明。</p><hr><blockquote><p><strong>部署kube-proxy服务</strong></p></blockquote><blockquote><p><strong>编写kube-proxy.service文件（<code>/usr/lib/systemd/system</code>）</strong></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[root@server81 install_k8s_node]# cat /usr/lib/systemd/system/kube-proxy.service </span><br><span class="line">[Unit]</span><br><span class="line">Description=Kube Proxy Service</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">EnvironmentFile=-/etc/kubernetes/config</span><br><span class="line">EnvironmentFile=-/etc/kubernetes/proxy</span><br><span class="line">ExecStart=/usr/bin/kube-proxy \</span><br><span class="line">    $KUBE_LOGTOSTDERR \</span><br><span class="line">    $KUBE_LOG_LEVEL \</span><br><span class="line">    $KUBE_MASTER \</span><br><span class="line">    $KUBE_PROXY_ARGS</span><br><span class="line"></span><br><span class="line">Restart=always</span><br><span class="line">LimitNOFILE=65536</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=default.target</span><br><span class="line"></span><br><span class="line">[root@server81 install_k8s_node]#</span><br></pre></td></tr></table></figure><blockquote><p>kube-proxy.service 说明：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">EnvironmentFile=-/etc/kubernetes/config</span><br><span class="line">EnvironmentFile=-/etc/kubernetes/proxy</span><br></pre></td></tr></table></figure></p></blockquote><p>配置<code>kube-proxy</code>启用读取的两个配置文件<code>config、proxy</code>，其中<code>config</code>在部署<code>master</code>服务的时候已经写好了，这是一个通用的配置文件。那么下面则单独编写<code>proxy</code>的配置文件。</p><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ExecStart=/usr/bin/kube-proxy \</span><br><span class="line">        $KUBE_LOGTOSTDERR \</span><br><span class="line">        $KUBE_LOG_LEVEL \</span><br><span class="line">        $KUBE_MASTER \</span><br><span class="line">        $KUBE_PROXY_ARGS</span><br></pre></td></tr></table></figure><p>配置kube-proxy服务启动使用的二进制可执行文件的路径（<code>/usr/bin/kube-proxy</code>）以及相关启动参数</p><hr><blockquote><p><strong>配置文件proxy（<code>/etc/kubernetes</code>）</strong></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@server81 install_k8s_node]# cat /etc/kubernetes/</span><br><span class="line">apiserver              config                 kubelet                kube-proxy.kubeconfig  proxy                  token.csv              </span><br><span class="line">bootstrap.kubeconfig   controller-manager     kubelet.kubeconfig     kubernetesTLS/         scheduler              </span><br><span class="line">[root@server81 install_k8s_node]# cat /etc/kubernetes/proxy </span><br><span class="line">###</span><br><span class="line"># kubernetes proxy config</span><br><span class="line"></span><br><span class="line"># defaults from config and proxy should be adequate</span><br><span class="line"></span><br><span class="line"># Add your own!</span><br><span class="line">KUBE_PROXY_ARGS=&quot;--kubeconfig=/etc/kubernetes/kube-proxy.kubeconfig  --cluster-cidr=10.1.0.0/16&quot;</span><br><span class="line"></span><br><span class="line">[root@server81 install_k8s_node]#</span><br></pre></td></tr></table></figure><p><strong>参数说明：</strong></p><ul><li><code>--kubeconfig=/etc/kubernetes/kube-proxy.kubeconfig</code> 指定<code>proxy</code>运行的<code>kubeconfig</code>文件路径</li><li><code>--cluster-cidr=10.1.0.0/16</code>指定<code>pod</code>在<code>kubernetes</code>启动的虚拟IP网段(CNI网络),提供后续<code>calico</code>使用参数</li></ul><hr><blockquote><p><strong>启动kube-proxy服务</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl enable kube-proxy</span><br><span class="line">systemctl start kube-proxy</span><br><span class="line">systemctl status kube-proxy</span><br></pre></td></tr></table></figure></p></blockquote><p>执行如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[root@server81 install_k8s_node]# systemctl daemon-reload</span><br><span class="line">[root@server81 install_k8s_node]# systemctl enable kube-proxy</span><br><span class="line">[root@server81 install_k8s_node]# systemctl start kube-proxy</span><br><span class="line">[root@server81 install_k8s_node]# systemctl status kube-proxy</span><br><span class="line">● kube-proxy.service - Kube Proxy Service</span><br><span class="line">   Loaded: loaded (/usr/lib/systemd/system/kube-proxy.service; enabled; vendor preset: disabled)</span><br><span class="line">   Active: active (running) since Mon 2018-08-20 15:32:10 HKT; 11min ago</span><br><span class="line"> Main PID: 3988 (kube-proxy)</span><br><span class="line">   CGroup: /system.slice/kube-proxy.service</span><br><span class="line">           ‣ 3988 /usr/bin/kube-proxy --logtostderr=true --v=0 --master=http://172.16.5.81:8080 --kubeconfig=/etc/kubernetes/kube-proxy.kubeconfig --cluster-cidr=10.1.0.0/16</span><br><span class="line"></span><br><span class="line">Aug 20 15:32:10 server81 kube-proxy[3988]: I0820 15:32:10.742562    3988 conntrack.go:52] Setting nf_conntrack_max to 131072</span><br><span class="line">Aug 20 15:32:10 server81 kube-proxy[3988]: I0820 15:32:10.748678    3988 conntrack.go:83] Setting conntrack hashsize to 32768</span><br><span class="line">Aug 20 15:32:10 server81 kube-proxy[3988]: I0820 15:32:10.749216    3988 conntrack.go:98] Set sysctl &apos;net/netfilter/nf_conntrack_tcp_timeout_established&apos; to 86400</span><br><span class="line">Aug 20 15:32:10 server81 kube-proxy[3988]: I0820 15:32:10.749266    3988 conntrack.go:98] Set sysctl &apos;net/netfilter/nf_conntrack_tcp_timeout_close_wait&apos; to 3600</span><br><span class="line">Aug 20 15:32:10 server81 kube-proxy[3988]: I0820 15:32:10.749762    3988 config.go:102] Starting endpoints config controller</span><br><span class="line">Aug 20 15:32:10 server81 kube-proxy[3988]: I0820 15:32:10.749807    3988 controller_utils.go:1025] Waiting for caches to sync for endpoints config controller</span><br><span class="line">Aug 20 15:32:10 server81 kube-proxy[3988]: I0820 15:32:10.749838    3988 config.go:202] Starting service config controller</span><br><span class="line">Aug 20 15:32:10 server81 kube-proxy[3988]: I0820 15:32:10.749845    3988 controller_utils.go:1025] Waiting for caches to sync for service config controller</span><br><span class="line">Aug 20 15:32:10 server81 kube-proxy[3988]: I0820 15:32:10.850911    3988 controller_utils.go:1032] Caches are synced for endpoints config controller</span><br><span class="line">Aug 20 15:32:10 server81 kube-proxy[3988]: I0820 15:32:10.850959    3988 controller_utils.go:1032] Caches are synced for service config controller</span><br><span class="line">[root@server81 install_k8s_node]#</span><br></pre></td></tr></table></figure></p><hr><blockquote><p><strong><em>执行到这里，关于node的服务也已经部署好了，而其他Server86和87的服务，我这边使用脚本快速部署一下，执行过程于Server81一致。</em></strong></p></blockquote><blockquote><p><strong>使用脚本快速部署Server86服务器</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br></pre></td><td class="code"><pre><span class="line">[root@server86 kubernetesTLS]# cd /opt/</span><br><span class="line">[root@server86 opt]# ls</span><br><span class="line">install_etcd_cluster  install_kubernetes  rh</span><br><span class="line">[root@server86 opt]# </span><br><span class="line">[root@server86 opt]# </span><br><span class="line">[root@server86 opt]# cd install_kubernetes/</span><br><span class="line">[root@server86 install_kubernetes]# ls</span><br><span class="line">check_etcd  install_Calico  install_CoreDNS  install_k8s_master  install_k8s_node  install_kubernetes_software  install_RAS_node  MASTER_INFO  reademe.txt</span><br><span class="line">[root@server86 install_kubernetes]# </span><br><span class="line">[root@server86 install_kubernetes]# cd install_k8s_node/</span><br><span class="line">[root@server86 install_k8s_node]# ls</span><br><span class="line">nodefile  Step1_config.sh  Step2_install_docker.sh  Step3_install_kubelet.sh  Step4_install_proxy.sh  Step5_node_approve_csr.sh  Step6_master_node_context.sh</span><br><span class="line">[root@server86 install_k8s_node]# </span><br><span class="line">[root@server86 install_k8s_node]# ./Step1_config.sh </span><br><span class="line">● firewalld.service - firewalld - dynamic firewall daemon</span><br><span class="line">   Loaded: loaded (/usr/lib/systemd/system/firewalld.service; disabled; vendor preset: enabled)</span><br><span class="line">   Active: inactive (dead)</span><br><span class="line">     Docs: man:firewalld(1)</span><br><span class="line">SELinux status:                 disabled</span><br><span class="line">‘/opt/install_kubernetes/install_k8s_node/../install_kubernetes_software/kubectl’ -&gt; ‘/usr/bin/kubectl’</span><br><span class="line">‘/opt/install_kubernetes/install_k8s_node/../install_kubernetes_software/kubelet’ -&gt; ‘/usr/bin/kubelet’</span><br><span class="line">‘/opt/install_kubernetes/install_k8s_node/../install_kubernetes_software/kube-proxy’ -&gt; ‘/usr/bin/kube-proxy’</span><br><span class="line">[root@server86 install_k8s_node]# </span><br><span class="line">[root@server86 install_k8s_node]# ./Step2_install_docker.sh </span><br><span class="line">Loaded plugins: fastestmirror, langpacks</span><br><span class="line">Examining /opt/install_kubernetes/install_k8s_node/nodefile/docker/docker-ce-18.03.0.ce-1.el7.centos.x86_64.rpm: docker-ce-18.03.0.ce-1.el7.centos.x86_64</span><br><span class="line">Marking /opt/install_kubernetes/install_k8s_node/nodefile/docker/docker-ce-18.03.0.ce-1.el7.centos.x86_64.rpm to be installed</span><br><span class="line">Resolving Dependencies</span><br><span class="line">--&gt; Running transaction check</span><br><span class="line">---&gt; Package docker-ce.x86_64 0:18.03.0.ce-1.el7.centos will be installed</span><br><span class="line">--&gt; Processing Dependency: container-selinux &gt;= 2.9 for package: docker-ce-18.03.0.ce-1.el7.centos.x86_64</span><br><span class="line">Loading mirror speeds from cached hostfile</span><br><span class="line"> * base: mirrors.aliyun.com</span><br><span class="line"> * epel: mirrors.tongji.edu.cn</span><br><span class="line"> * extras: mirrors.aliyun.com</span><br><span class="line"> * updates: mirrors.163.com</span><br><span class="line">--&gt; Processing Dependency: pigz for package: docker-ce-18.03.0.ce-1.el7.centos.x86_64</span><br><span class="line">--&gt; Running transaction check</span><br><span class="line">---&gt; Package container-selinux.noarch 2:2.66-1.el7 will be installed</span><br><span class="line">--&gt; Processing Dependency: selinux-policy-targeted &gt;= 3.13.1-192 for package: 2:container-selinux-2.66-1.el7.noarch</span><br><span class="line">--&gt; Processing Dependency: selinux-policy-base &gt;= 3.13.1-192 for package: 2:container-selinux-2.66-1.el7.noarch</span><br><span class="line">--&gt; Processing Dependency: selinux-policy &gt;= 3.13.1-192 for package: 2:container-selinux-2.66-1.el7.noarch</span><br><span class="line">---&gt; Package pigz.x86_64 0:2.3.4-1.el7 will be installed</span><br><span class="line">--&gt; Running transaction check</span><br><span class="line">---&gt; Package selinux-policy.noarch 0:3.13.1-166.el7_4.5 will be updated</span><br><span class="line">---&gt; Package selinux-policy.noarch 0:3.13.1-192.el7_5.4 will be an update</span><br><span class="line">--&gt; Processing Dependency: policycoreutils &gt;= 2.5-18 for package: selinux-policy-3.13.1-192.el7_5.4.noarch</span><br><span class="line">---&gt; Package selinux-policy-targeted.noarch 0:3.13.1-166.el7_4.5 will be updated</span><br><span class="line">---&gt; Package selinux-policy-targeted.noarch 0:3.13.1-192.el7_5.4 will be an update</span><br><span class="line">--&gt; Running transaction check</span><br><span class="line">---&gt; Package policycoreutils.x86_64 0:2.5-17.1.el7 will be updated</span><br><span class="line">--&gt; Processing Dependency: policycoreutils = 2.5-17.1.el7 for package: policycoreutils-python-2.5-17.1.el7.x86_64</span><br><span class="line">---&gt; Package policycoreutils.x86_64 0:2.5-22.el7 will be an update</span><br><span class="line">--&gt; Processing Dependency: libsepol &gt;= 2.5-8 for package: policycoreutils-2.5-22.el7.x86_64</span><br><span class="line">--&gt; Processing Dependency: libselinux-utils &gt;= 2.5-12 for package: policycoreutils-2.5-22.el7.x86_64</span><br><span class="line">--&gt; Running transaction check</span><br><span class="line">---&gt; Package libselinux-utils.x86_64 0:2.5-11.el7 will be updated</span><br><span class="line">---&gt; Package libselinux-utils.x86_64 0:2.5-12.el7 will be an update</span><br><span class="line">--&gt; Processing Dependency: libselinux(x86-64) = 2.5-12.el7 for package: libselinux-utils-2.5-12.el7.x86_64</span><br><span class="line">---&gt; Package libsepol.i686 0:2.5-6.el7 will be updated</span><br><span class="line">---&gt; Package libsepol.x86_64 0:2.5-6.el7 will be updated</span><br><span class="line">---&gt; Package libsepol.i686 0:2.5-8.1.el7 will be an update</span><br><span class="line">---&gt; Package libsepol.x86_64 0:2.5-8.1.el7 will be an update</span><br><span class="line">---&gt; Package policycoreutils-python.x86_64 0:2.5-17.1.el7 will be updated</span><br><span class="line">---&gt; Package policycoreutils-python.x86_64 0:2.5-22.el7 will be an update</span><br><span class="line">--&gt; Processing Dependency: setools-libs &gt;= 3.3.8-2 for package: policycoreutils-python-2.5-22.el7.x86_64</span><br><span class="line">--&gt; Processing Dependency: libsemanage-python &gt;= 2.5-9 for package: policycoreutils-python-2.5-22.el7.x86_64</span><br><span class="line">--&gt; Running transaction check</span><br><span class="line">---&gt; Package libselinux.i686 0:2.5-11.el7 will be updated</span><br><span class="line">---&gt; Package libselinux.x86_64 0:2.5-11.el7 will be updated</span><br><span class="line">--&gt; Processing Dependency: libselinux(x86-64) = 2.5-11.el7 for package: libselinux-python-2.5-11.el7.x86_64</span><br><span class="line">---&gt; Package libselinux.i686 0:2.5-12.el7 will be an update</span><br><span class="line">---&gt; Package libselinux.x86_64 0:2.5-12.el7 will be an update</span><br><span class="line">---&gt; Package libsemanage-python.x86_64 0:2.5-8.el7 will be updated</span><br><span class="line">---&gt; Package libsemanage-python.x86_64 0:2.5-11.el7 will be an update</span><br><span class="line">--&gt; Processing Dependency: libsemanage = 2.5-11.el7 for package: libsemanage-python-2.5-11.el7.x86_64</span><br><span class="line">---&gt; Package setools-libs.x86_64 0:3.3.8-1.1.el7 will be updated</span><br><span class="line">---&gt; Package setools-libs.x86_64 0:3.3.8-2.el7 will be an update</span><br><span class="line">--&gt; Running transaction check</span><br><span class="line">---&gt; Package libselinux-python.x86_64 0:2.5-11.el7 will be updated</span><br><span class="line">---&gt; Package libselinux-python.x86_64 0:2.5-12.el7 will be an update</span><br><span class="line">---&gt; Package libsemanage.x86_64 0:2.5-8.el7 will be updated</span><br><span class="line">---&gt; Package libsemanage.x86_64 0:2.5-11.el7 will be an update</span><br><span class="line">--&gt; Finished Dependency Resolution</span><br><span class="line"></span><br><span class="line">Dependencies Resolved</span><br><span class="line"></span><br><span class="line">===========================================================================================================================================================================</span><br><span class="line"> Package                                 Arch                   Version                                    Repository                                                 Size</span><br><span class="line">===========================================================================================================================================================================</span><br><span class="line">Installing:</span><br><span class="line"> docker-ce                               x86_64                 18.03.0.ce-1.el7.centos                    /docker-ce-18.03.0.ce-1.el7.centos.x86_64                 151 M</span><br><span class="line">Installing for dependencies:</span><br><span class="line"> container-selinux                       noarch                 2:2.66-1.el7                               extras                                                     35 k</span><br><span class="line"> pigz                                    x86_64                 2.3.4-1.el7                                epel                                                       81 k</span><br><span class="line">Updating for dependencies:</span><br><span class="line"> libselinux                              i686                   2.5-12.el7                                 base                                                      166 k</span><br><span class="line"> libselinux                              x86_64                 2.5-12.el7                                 base                                                      162 k</span><br><span class="line"> libselinux-python                       x86_64                 2.5-12.el7                                 base                                                      235 k</span><br><span class="line"> libselinux-utils                        x86_64                 2.5-12.el7                                 base                                                      151 k</span><br><span class="line"> libsemanage                             x86_64                 2.5-11.el7                                 base                                                      150 k</span><br><span class="line"> libsemanage-python                      x86_64                 2.5-11.el7                                 base                                                      112 k</span><br><span class="line"> libsepol                                i686                   2.5-8.1.el7                                base                                                      293 k</span><br><span class="line"> libsepol                                x86_64                 2.5-8.1.el7                                base                                                      297 k</span><br><span class="line"> policycoreutils                         x86_64                 2.5-22.el7                                 base                                                      867 k</span><br><span class="line"> policycoreutils-python                  x86_64                 2.5-22.el7                                 base                                                      454 k</span><br><span class="line"> selinux-policy                          noarch                 3.13.1-192.el7_5.4                         updates                                                   453 k</span><br><span class="line"> selinux-policy-targeted                 noarch                 3.13.1-192.el7_5.4                         updates                                                   6.6 M</span><br><span class="line"> setools-libs                            x86_64                 3.3.8-2.el7                                base                                                      619 k</span><br><span class="line"></span><br><span class="line">Transaction Summary</span><br><span class="line">===========================================================================================================================================================================</span><br><span class="line">Install  1 Package  (+ 2 Dependent packages)</span><br><span class="line">Upgrade             ( 13 Dependent packages)</span><br><span class="line"></span><br><span class="line">Total size: 161 M</span><br><span class="line">Total download size: 11 M</span><br><span class="line">Downloading packages:</span><br><span class="line">No Presto metadata available for base</span><br><span class="line">updates/7/x86_64/prestodelta                                                                                                                        | 420 kB  00:00:00     </span><br><span class="line">(1/15): container-selinux-2.66-1.el7.noarch.rpm                                                                                                     |  35 kB  00:00:00     </span><br><span class="line">(2/15): libselinux-2.5-12.el7.i686.rpm                                                                                                              | 166 kB  00:00:00     </span><br><span class="line">(3/15): libsemanage-2.5-11.el7.x86_64.rpm                                                                                                           | 150 kB  00:00:00     </span><br><span class="line">(4/15): libsemanage-python-2.5-11.el7.x86_64.rpm                                                                                                    | 112 kB  00:00:00     </span><br><span class="line">(5/15): libselinux-utils-2.5-12.el7.x86_64.rpm                                                                                                      | 151 kB  00:00:00     </span><br><span class="line">(6/15): libselinux-2.5-12.el7.x86_64.rpm                                                                                                            | 162 kB  00:00:00     </span><br><span class="line">(7/15): libsepol-2.5-8.1.el7.i686.rpm                                                                                                               | 293 kB  00:00:00     </span><br><span class="line">(8/15): libsepol-2.5-8.1.el7.x86_64.rpm                                                                                                             | 297 kB  00:00:00     </span><br><span class="line">(9/15): selinux-policy-3.13.1-192.el7_5.4.noarch.rpm                                                                                                | 453 kB  00:00:00     </span><br><span class="line">(10/15): policycoreutils-2.5-22.el7.x86_64.rpm                                                                                                      | 867 kB  00:00:00     </span><br><span class="line">(11/15): selinux-policy-targeted-3.13.1-192.el7_5.4.noarch.rpm                                                                                      | 6.6 MB  00:00:00     </span><br><span class="line">(12/15): policycoreutils-python-2.5-22.el7.x86_64.rpm                                                                                               | 454 kB  00:00:01     </span><br><span class="line">(13/15): setools-libs-3.3.8-2.el7.x86_64.rpm                                                                                                        | 619 kB  00:00:00     </span><br><span class="line">(14/15): pigz-2.3.4-1.el7.x86_64.rpm                                                                                                                |  81 kB  00:00:01     </span><br><span class="line">(15/15): libselinux-python-2.5-12.el7.x86_64.rpm                                                                                                    | 235 kB  00:00:01     </span><br><span class="line">---------------------------------------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line">Total                                                                                                                                      4.7 MB/s |  11 MB  00:00:02     </span><br><span class="line">Running transaction check</span><br><span class="line">Running transaction test</span><br><span class="line">Transaction test succeeded</span><br><span class="line">Running transaction</span><br><span class="line">  Updating   : libsepol-2.5-8.1.el7.x86_64                                                                                                                            1/29 </span><br><span class="line">  Updating   : libselinux-2.5-12.el7.x86_64                                                                                                                           2/29 </span><br><span class="line">  Updating   : libsemanage-2.5-11.el7.x86_64                                                                                                                          3/29 </span><br><span class="line">  Updating   : libselinux-utils-2.5-12.el7.x86_64                                                                                                                     4/29 </span><br><span class="line">  Updating   : policycoreutils-2.5-22.el7.x86_64                                                                                                                      5/29 </span><br><span class="line">  Updating   : selinux-policy-3.13.1-192.el7_5.4.noarch                                                                                                               6/29 </span><br><span class="line">  Updating   : selinux-policy-targeted-3.13.1-192.el7_5.4.noarch                                                                                                      7/29 </span><br><span class="line">  Updating   : libsemanage-python-2.5-11.el7.x86_64                                                                                                                   8/29 </span><br><span class="line">  Updating   : libselinux-python-2.5-12.el7.x86_64                                                                                                                    9/29 </span><br><span class="line">  Updating   : setools-libs-3.3.8-2.el7.x86_64                                                                                                                       10/29 </span><br><span class="line">  Updating   : policycoreutils-python-2.5-22.el7.x86_64                                                                                                              11/29 </span><br><span class="line">  Installing : 2:container-selinux-2.66-1.el7.noarch                                                                                                                 12/29 </span><br><span class="line">setsebool:  SELinux is disabled.</span><br><span class="line">  Installing : pigz-2.3.4-1.el7.x86_64                                                                                                                               13/29 </span><br><span class="line">  Updating   : libsepol-2.5-8.1.el7.i686                                                                                                                             14/29 </span><br><span class="line">  Installing : docker-ce-18.03.0.ce-1.el7.centos.x86_64                                                                                                              15/29 </span><br><span class="line">  Updating   : libselinux-2.5-12.el7.i686                                                                                                                            16/29 </span><br><span class="line">  Cleanup    : selinux-policy-targeted-3.13.1-166.el7_4.5.noarch                                                                                                     17/29 </span><br><span class="line">  Cleanup    : policycoreutils-python-2.5-17.1.el7.x86_64                                                                                                            18/29 </span><br><span class="line">  Cleanup    : selinux-policy-3.13.1-166.el7_4.5.noarch                                                                                                              19/29 </span><br><span class="line">  Cleanup    : libselinux-2.5-11.el7                                                                                                                                 20/29 </span><br><span class="line">  Cleanup    : policycoreutils-2.5-17.1.el7.x86_64                                                                                                                   21/29 </span><br><span class="line">  Cleanup    : libselinux-utils-2.5-11.el7.x86_64                                                                                                                    22/29 </span><br><span class="line">  Cleanup    : setools-libs-3.3.8-1.1.el7.x86_64                                                                                                                     23/29 </span><br><span class="line">  Cleanup    : libselinux-python-2.5-11.el7.x86_64                                                                                                                   24/29 </span><br><span class="line">  Cleanup    : libsemanage-python-2.5-8.el7.x86_64                                                                                                                   25/29 </span><br><span class="line">  Cleanup    : libsepol-2.5-6.el7                                                                                                                                    26/29 </span><br><span class="line">  Cleanup    : libsemanage-2.5-8.el7.x86_64                                                                                                                          27/29 </span><br><span class="line">  Cleanup    : libselinux-2.5-11.el7                                                                                                                                 28/29 </span><br><span class="line">  Cleanup    : libsepol-2.5-6.el7                                                                                                                                    29/29 </span><br><span class="line">  Verifying  : libselinux-python-2.5-12.el7.x86_64                                                                                                                    1/29 </span><br><span class="line">  Verifying  : selinux-policy-3.13.1-192.el7_5.4.noarch                                                                                                               2/29 </span><br><span class="line">  Verifying  : setools-libs-3.3.8-2.el7.x86_64                                                                                                                        3/29 </span><br><span class="line">  Verifying  : libsemanage-python-2.5-11.el7.x86_64                                                                                                                   4/29 </span><br><span class="line">  Verifying  : policycoreutils-2.5-22.el7.x86_64                                                                                                                      5/29 </span><br><span class="line">  Verifying  : libsepol-2.5-8.1.el7.i686                                                                                                                              6/29 </span><br><span class="line">  Verifying  : libsemanage-2.5-11.el7.x86_64                                                                                                                          7/29 </span><br><span class="line">  Verifying  : selinux-policy-targeted-3.13.1-192.el7_5.4.noarch                                                                                                      8/29 </span><br><span class="line">  Verifying  : pigz-2.3.4-1.el7.x86_64                                                                                                                                9/29 </span><br><span class="line">  Verifying  : policycoreutils-python-2.5-22.el7.x86_64                                                                                                              10/29 </span><br><span class="line">  Verifying  : 2:container-selinux-2.66-1.el7.noarch                                                                                                                 11/29 </span><br><span class="line">  Verifying  : libselinux-2.5-12.el7.i686                                                                                                                            12/29 </span><br><span class="line">  Verifying  : libsepol-2.5-8.1.el7.x86_64                                                                                                                           13/29 </span><br><span class="line">  Verifying  : libselinux-2.5-12.el7.x86_64                                                                                                                          14/29 </span><br><span class="line">  Verifying  : docker-ce-18.03.0.ce-1.el7.centos.x86_64                                                                                                              15/29 </span><br><span class="line">  Verifying  : libselinux-utils-2.5-12.el7.x86_64                                                                                                                    16/29 </span><br><span class="line">  Verifying  : libselinux-utils-2.5-11.el7.x86_64                                                                                                                    17/29 </span><br><span class="line">  Verifying  : libsepol-2.5-6.el7.i686                                                                                                                               18/29 </span><br><span class="line">  Verifying  : libselinux-2.5-11.el7.x86_64                                                                                                                          19/29 </span><br><span class="line">  Verifying  : libsepol-2.5-6.el7.x86_64                                                                                                                             20/29 </span><br><span class="line">  Verifying  : policycoreutils-python-2.5-17.1.el7.x86_64                                                                                                            21/29 </span><br><span class="line">  Verifying  : selinux-policy-targeted-3.13.1-166.el7_4.5.noarch                                                                                                     22/29 </span><br><span class="line">  Verifying  : policycoreutils-2.5-17.1.el7.x86_64                                                                                                                   23/29 </span><br><span class="line">  Verifying  : libsemanage-python-2.5-8.el7.x86_64                                                                                                                   24/29 </span><br><span class="line">  Verifying  : libselinux-2.5-11.el7.i686                                                                                                                            25/29 </span><br><span class="line">  Verifying  : libsemanage-2.5-8.el7.x86_64                                                                                                                          26/29 </span><br><span class="line">  Verifying  : selinux-policy-3.13.1-166.el7_4.5.noarch                                                                                                              27/29 </span><br><span class="line">  Verifying  : libselinux-python-2.5-11.el7.x86_64                                                                                                                   28/29 </span><br><span class="line">  Verifying  : setools-libs-3.3.8-1.1.el7.x86_64                                                                                                                     29/29 </span><br><span class="line"></span><br><span class="line">Installed:</span><br><span class="line">  docker-ce.x86_64 0:18.03.0.ce-1.el7.centos                                                                                                                               </span><br><span class="line"></span><br><span class="line">Dependency Installed:</span><br><span class="line">  container-selinux.noarch 2:2.66-1.el7                                                      pigz.x86_64 0:2.3.4-1.el7                                                     </span><br><span class="line"></span><br><span class="line">Dependency Updated:</span><br><span class="line">  libselinux.i686 0:2.5-12.el7                         libselinux.x86_64 0:2.5-12.el7                       libselinux-python.x86_64 0:2.5-12.el7                        </span><br><span class="line">  libselinux-utils.x86_64 0:2.5-12.el7                 libsemanage.x86_64 0:2.5-11.el7                      libsemanage-python.x86_64 0:2.5-11.el7                       </span><br><span class="line">  libsepol.i686 0:2.5-8.1.el7                          libsepol.x86_64 0:2.5-8.1.el7                        policycoreutils.x86_64 0:2.5-22.el7                          </span><br><span class="line">  policycoreutils-python.x86_64 0:2.5-22.el7           selinux-policy.noarch 0:3.13.1-192.el7_5.4           selinux-policy-targeted.noarch 0:3.13.1-192.el7_5.4          </span><br><span class="line">  setools-libs.x86_64 0:3.3.8-2.el7                   </span><br><span class="line"></span><br><span class="line">Complete!</span><br><span class="line">Created symlink from /etc/systemd/system/multi-user.target.wants/docker.service to /usr/lib/systemd/system/docker.service.</span><br><span class="line">● docker.service - Docker Application Container Engine</span><br><span class="line">   Loaded: loaded (/usr/lib/systemd/system/docker.service; enabled; vendor preset: disabled)</span><br><span class="line">   Active: active (running) since Mon 2018-08-20 15:57:07 HKT; 21ms ago</span><br><span class="line">     Docs: https://docs.docker.com</span><br><span class="line"> Main PID: 2955 (dockerd)</span><br><span class="line">   Memory: 39.0M</span><br><span class="line">   CGroup: /system.slice/docker.service</span><br><span class="line">           ├─2955 /usr/bin/dockerd</span><br><span class="line">           └─2964 docker-containerd --config /var/run/docker/containerd/containerd.toml</span><br><span class="line"></span><br><span class="line">Aug 20 15:57:06 server86 dockerd[2955]: time=&quot;2018-08-20T15:57:06.737217664+08:00&quot; level=info msg=&quot;devmapper: Creating filesystem xfs on device docker-8:3-67...8927-base]&quot;</span><br><span class="line">Aug 20 15:57:07 server86 dockerd[2955]: time=&quot;2018-08-20T15:57:07.045640563+08:00&quot; level=info msg=&quot;devmapper: Successfully created filesystem xfs on device d...18927-base&quot;</span><br><span class="line">Aug 20 15:57:07 server86 dockerd[2955]: time=&quot;2018-08-20T15:57:07.257682803+08:00&quot; level=info msg=&quot;Graph migration to content-addressability took 0.00 seconds&quot;</span><br><span class="line">Aug 20 15:57:07 server86 dockerd[2955]: time=&quot;2018-08-20T15:57:07.260865731+08:00&quot; level=info msg=&quot;Loading containers: start.&quot;</span><br><span class="line">Aug 20 15:57:07 server86 dockerd[2955]: time=&quot;2018-08-20T15:57:07.603658334+08:00&quot; level=info msg=&quot;Default bridge (docker0) is assigned with an IP address 17...IP address&quot;</span><br><span class="line">Aug 20 15:57:07 server86 dockerd[2955]: time=&quot;2018-08-20T15:57:07.763307367+08:00&quot; level=info msg=&quot;Loading containers: done.&quot;</span><br><span class="line">Aug 20 15:57:07 server86 dockerd[2955]: time=&quot;2018-08-20T15:57:07.812802202+08:00&quot; level=info msg=&quot;Docker daemon&quot; commit=0520e24 graphdriver(s)=devicemapper ...=18.03.0-ce</span><br><span class="line">Aug 20 15:57:07 server86 dockerd[2955]: time=&quot;2018-08-20T15:57:07.813732684+08:00&quot; level=info msg=&quot;Daemon has completed initialization&quot;</span><br><span class="line">Aug 20 15:57:07 server86 dockerd[2955]: time=&quot;2018-08-20T15:57:07.866979598+08:00&quot; level=info msg=&quot;API listen on /var/run/docker.sock&quot;</span><br><span class="line">Aug 20 15:57:07 server86 systemd[1]: Started Docker Application Container Engine.</span><br><span class="line">Hint: Some lines were ellipsized, use -l to show in full.</span><br><span class="line">[root@server86 install_k8s_node]# </span><br><span class="line">[root@server86 install_k8s_node]# ls</span><br><span class="line">nodefile  Step1_config.sh  Step2_install_docker.sh  Step3_install_kubelet.sh  Step4_install_proxy.sh  Step5_node_approve_csr.sh  Step6_master_node_context.sh</span><br><span class="line">[root@server86 install_k8s_node]# </span><br><span class="line">[root@server86 install_k8s_node]# ./Step3_install_kubelet.sh </span><br><span class="line">MASTER_IP=172.16.5.81</span><br><span class="line">cat: /opt/ETCD_CLUSER_INFO: No such file or directory</span><br><span class="line">Created symlink from /etc/systemd/system/multi-user.target.wants/kubelet.service to /usr/lib/systemd/system/kubelet.service.</span><br><span class="line">● kubelet.service - Kubernetes Kubelet Server</span><br><span class="line">   Loaded: loaded (/usr/lib/systemd/system/kubelet.service; enabled; vendor preset: disabled)</span><br><span class="line">   Active: active (running) since Mon 2018-08-20 15:57:15 HKT; 142ms ago</span><br><span class="line">     Docs: https://github.com/GoogleCloudPlatform/kubernetes</span><br><span class="line"> Main PID: 3195 (kubelet)</span><br><span class="line">   Memory: 5.8M</span><br><span class="line">   CGroup: /system.slice/kubelet.service</span><br><span class="line">           └─3195 /usr/bin/kubelet --logtostderr=true --v=0 --kubeconfig=/etc/kubernetes/kubelet.kubeconfig --hostname-override=172.16.5.86 --pod-infra-container-image=...</span><br><span class="line"></span><br><span class="line">Aug 20 15:57:15 server86 systemd[1]: Started Kubernetes Kubelet Server.</span><br><span class="line">Aug 20 15:57:15 server86 systemd[1]: Starting Kubernetes Kubelet Server...</span><br><span class="line">[root@server86 install_k8s_node]# </span><br><span class="line">[root@server86 install_k8s_node]# ./Step4_install_proxy.sh </span><br><span class="line">Created symlink from /etc/systemd/system/default.target.wants/kube-proxy.service to /usr/lib/systemd/system/kube-proxy.service.</span><br><span class="line">● kube-proxy.service - Kube Proxy Service</span><br><span class="line">   Loaded: loaded (/usr/lib/systemd/system/kube-proxy.service; enabled; vendor preset: disabled)</span><br><span class="line">   Active: active (running) since Mon 2018-08-20 15:57:19 HKT; 97ms ago</span><br><span class="line"> Main PID: 3282 (kube-proxy)</span><br><span class="line">   Memory: 5.5M</span><br><span class="line">   CGroup: /system.slice/kube-proxy.service</span><br><span class="line">           └─3282 /usr/bin/kube-proxy --logtostderr=true --v=0 --master=http://172.16.5.81:8080 --kubeconfig=/etc/kubernetes/kube-proxy.kubeconfig --cluster-cidr=10.1.0...</span><br><span class="line"></span><br><span class="line">Aug 20 15:57:19 server86 systemd[1]: Started Kube Proxy Service.</span><br><span class="line">Aug 20 15:57:19 server86 systemd[1]: Starting Kube Proxy Service...</span><br><span class="line">[root@server86 install_k8s_node]# </span><br><span class="line">[root@server86 install_k8s_node]#</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p><strong>使用脚本快速部署Server87服务器</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br></pre></td><td class="code"><pre><span class="line">[root@server87 ~]# cd /opt/</span><br><span class="line">[root@server87 opt]# ls</span><br><span class="line">install_etcd_cluster  install_kubernetes  rh</span><br><span class="line">[root@server87 opt]# cd install_kubernetes/</span><br><span class="line">[root@server87 install_kubernetes]# ls</span><br><span class="line">check_etcd  install_Calico  install_CoreDNS  install_k8s_master  install_k8s_node  install_kubernetes_software  install_RAS_node  MASTER_INFO  reademe.txt</span><br><span class="line">[root@server87 install_kubernetes]# cd install_k8s_node/</span><br><span class="line">[root@server87 install_k8s_node]# ls</span><br><span class="line">nodefile  Step1_config.sh  Step2_install_docker.sh  Step3_install_kubelet.sh  Step4_install_proxy.sh  Step5_node_approve_csr.sh  Step6_master_node_context.sh</span><br><span class="line">[root@server87 install_k8s_node]# ./Step1_config.sh </span><br><span class="line">● firewalld.service - firewalld - dynamic firewall daemon</span><br><span class="line">   Loaded: loaded (/usr/lib/systemd/system/firewalld.service; disabled; vendor preset: enabled)</span><br><span class="line">   Active: inactive (dead)</span><br><span class="line">SELinux status:                 disabled</span><br><span class="line">‘/opt/install_kubernetes/install_k8s_node/../install_kubernetes_software/kubectl’ -&gt; ‘/usr/bin/kubectl’</span><br><span class="line">‘/opt/install_kubernetes/install_k8s_node/../install_kubernetes_software/kubelet’ -&gt; ‘/usr/bin/kubelet’</span><br><span class="line">‘/opt/install_kubernetes/install_k8s_node/../install_kubernetes_software/kube-proxy’ -&gt; ‘/usr/bin/kube-proxy’</span><br><span class="line">[root@server87 install_k8s_node]# ./Step2_install_docker.sh </span><br><span class="line">Loaded plugins: fastestmirror, langpacks</span><br><span class="line">Examining /opt/install_kubernetes/install_k8s_node/nodefile/docker/docker-ce-18.03.0.ce-1.el7.centos.x86_64.rpm: docker-ce-18.03.0.ce-1.el7.centos.x86_64</span><br><span class="line">Marking /opt/install_kubernetes/install_k8s_node/nodefile/docker/docker-ce-18.03.0.ce-1.el7.centos.x86_64.rpm to be installed</span><br><span class="line">Resolving Dependencies</span><br><span class="line">--&gt; Running transaction check</span><br><span class="line">---&gt; Package docker-ce.x86_64 0:18.03.0.ce-1.el7.centos will be installed</span><br><span class="line">--&gt; Processing Dependency: container-selinux &gt;= 2.9 for package: docker-ce-18.03.0.ce-1.el7.centos.x86_64</span><br><span class="line">Loading mirror speeds from cached hostfile</span><br><span class="line"> * base: mirrors.aliyun.com</span><br><span class="line"> * epel: mirrors.tongji.edu.cn</span><br><span class="line"> * extras: mirrors.aliyun.com</span><br><span class="line"> * updates: mirrors.163.com</span><br><span class="line">--&gt; Processing Dependency: libseccomp &gt;= 2.3 for package: docker-ce-18.03.0.ce-1.el7.centos.x86_64</span><br><span class="line">--&gt; Processing Dependency: pigz for package: docker-ce-18.03.0.ce-1.el7.centos.x86_64</span><br><span class="line">--&gt; Running transaction check</span><br><span class="line">---&gt; Package container-selinux.noarch 2:2.66-1.el7 will be installed</span><br><span class="line">--&gt; Processing Dependency: selinux-policy-targeted &gt;= 3.13.1-192 for package: 2:container-selinux-2.66-1.el7.noarch</span><br><span class="line">--&gt; Processing Dependency: selinux-policy-base &gt;= 3.13.1-192 for package: 2:container-selinux-2.66-1.el7.noarch</span><br><span class="line">--&gt; Processing Dependency: selinux-policy &gt;= 3.13.1-192 for package: 2:container-selinux-2.66-1.el7.noarch</span><br><span class="line">--&gt; Processing Dependency: policycoreutils &gt;= 2.5-11 for package: 2:container-selinux-2.66-1.el7.noarch</span><br><span class="line">---&gt; Package libseccomp.x86_64 0:2.2.1-1.el7 will be updated</span><br><span class="line">---&gt; Package libseccomp.x86_64 0:2.3.1-3.el7 will be an update</span><br><span class="line">---&gt; Package pigz.x86_64 0:2.3.4-1.el7 will be installed</span><br><span class="line">--&gt; Running transaction check</span><br><span class="line">---&gt; Package policycoreutils.x86_64 0:2.2.5-20.el7 will be updated</span><br><span class="line">--&gt; Processing Dependency: policycoreutils = 2.2.5-20.el7 for package: policycoreutils-python-2.2.5-20.el7.x86_64</span><br><span class="line">---&gt; Package policycoreutils.x86_64 0:2.5-22.el7 will be an update</span><br><span class="line">--&gt; Processing Dependency: libsepol &gt;= 2.5-8 for package: policycoreutils-2.5-22.el7.x86_64</span><br><span class="line">--&gt; Processing Dependency: libselinux-utils &gt;= 2.5-12 for package: policycoreutils-2.5-22.el7.x86_64</span><br><span class="line">--&gt; Processing Dependency: libsepol.so.1(LIBSEPOL_1.1)(64bit) for package: policycoreutils-2.5-22.el7.x86_64</span><br><span class="line">--&gt; Processing Dependency: libsepol.so.1(LIBSEPOL_1.0)(64bit) for package: policycoreutils-2.5-22.el7.x86_64</span><br><span class="line">--&gt; Processing Dependency: libsemanage.so.1(LIBSEMANAGE_1.1)(64bit) for package: policycoreutils-2.5-22.el7.x86_64</span><br><span class="line">---&gt; Package selinux-policy.noarch 0:3.13.1-60.el7 will be updated</span><br><span class="line">---&gt; Package selinux-policy.noarch 0:3.13.1-192.el7_5.4 will be an update</span><br><span class="line">---&gt; Package selinux-policy-targeted.noarch 0:3.13.1-60.el7 will be updated</span><br><span class="line">---&gt; Package selinux-policy-targeted.noarch 0:3.13.1-192.el7_5.4 will be an update</span><br><span class="line">--&gt; Running transaction check</span><br><span class="line">---&gt; Package libselinux-utils.x86_64 0:2.2.2-6.el7 will be updated</span><br><span class="line">---&gt; Package libselinux-utils.x86_64 0:2.5-12.el7 will be an update</span><br><span class="line">--&gt; Processing Dependency: libselinux(x86-64) = 2.5-12.el7 for package: libselinux-utils-2.5-12.el7.x86_64</span><br><span class="line">---&gt; Package libsemanage.x86_64 0:2.1.10-18.el7 will be updated</span><br><span class="line">--&gt; Processing Dependency: libsemanage = 2.1.10-18.el7 for package: libsemanage-python-2.1.10-18.el7.x86_64</span><br><span class="line">---&gt; Package libsemanage.x86_64 0:2.5-11.el7 will be an update</span><br><span class="line">---&gt; Package libsepol.x86_64 0:2.1.9-3.el7 will be updated</span><br><span class="line">---&gt; Package libsepol.x86_64 0:2.5-8.1.el7 will be an update</span><br><span class="line">---&gt; Package policycoreutils-python.x86_64 0:2.2.5-20.el7 will be updated</span><br><span class="line">---&gt; Package policycoreutils-python.x86_64 0:2.5-22.el7 will be an update</span><br><span class="line">--&gt; Processing Dependency: setools-libs &gt;= 3.3.8-2 for package: policycoreutils-python-2.5-22.el7.x86_64</span><br><span class="line">--&gt; Running transaction check</span><br><span class="line">---&gt; Package libselinux.x86_64 0:2.2.2-6.el7 will be updated</span><br><span class="line">--&gt; Processing Dependency: libselinux = 2.2.2-6.el7 for package: libselinux-python-2.2.2-6.el7.x86_64</span><br><span class="line">---&gt; Package libselinux.x86_64 0:2.5-12.el7 will be an update</span><br><span class="line">---&gt; Package libsemanage-python.x86_64 0:2.1.10-18.el7 will be updated</span><br><span class="line">---&gt; Package libsemanage-python.x86_64 0:2.5-11.el7 will be an update</span><br><span class="line">---&gt; Package setools-libs.x86_64 0:3.3.7-46.el7 will be updated</span><br><span class="line">---&gt; Package setools-libs.x86_64 0:3.3.8-2.el7 will be an update</span><br><span class="line">--&gt; Running transaction check</span><br><span class="line">---&gt; Package libselinux-python.x86_64 0:2.2.2-6.el7 will be updated</span><br><span class="line">---&gt; Package libselinux-python.x86_64 0:2.5-12.el7 will be an update</span><br><span class="line">--&gt; Processing Conflict: libselinux-2.5-12.el7.x86_64 conflicts systemd &lt; 219-20</span><br><span class="line">--&gt; Restarting Dependency Resolution with new changes.</span><br><span class="line">--&gt; Running transaction check</span><br><span class="line">---&gt; Package systemd.x86_64 0:219-19.el7 will be updated</span><br><span class="line">--&gt; Processing Dependency: systemd = 219-19.el7 for package: systemd-python-219-19.el7.x86_64</span><br><span class="line">--&gt; Processing Dependency: systemd = 219-19.el7 for package: systemd-sysv-219-19.el7.x86_64</span><br><span class="line">---&gt; Package systemd.x86_64 0:219-57.el7 will be an update</span><br><span class="line">--&gt; Processing Dependency: systemd-libs = 219-57.el7 for package: systemd-219-57.el7.x86_64</span><br><span class="line">--&gt; Processing Dependency: liblz4.so.1()(64bit) for package: systemd-219-57.el7.x86_64</span><br><span class="line">--&gt; Running transaction check</span><br><span class="line">---&gt; Package lz4.x86_64 0:1.7.5-2.el7 will be installed</span><br><span class="line">---&gt; Package systemd-libs.x86_64 0:219-19.el7 will be updated</span><br><span class="line">--&gt; Processing Dependency: systemd-libs = 219-19.el7 for package: libgudev1-219-19.el7.x86_64</span><br><span class="line">---&gt; Package systemd-libs.x86_64 0:219-57.el7 will be an update</span><br><span class="line">---&gt; Package systemd-python.x86_64 0:219-19.el7 will be updated</span><br><span class="line">---&gt; Package systemd-python.x86_64 0:219-57.el7 will be an update</span><br><span class="line">---&gt; Package systemd-sysv.x86_64 0:219-19.el7 will be updated</span><br><span class="line">---&gt; Package systemd-sysv.x86_64 0:219-57.el7 will be an update</span><br><span class="line">--&gt; Running transaction check</span><br><span class="line">---&gt; Package libgudev1.x86_64 0:219-19.el7 will be updated</span><br><span class="line">---&gt; Package libgudev1.x86_64 0:219-57.el7 will be an update</span><br><span class="line">--&gt; Finished Dependency Resolution</span><br><span class="line"></span><br><span class="line">Dependencies Resolved</span><br><span class="line"></span><br><span class="line">===========================================================================================================================================================================</span><br><span class="line"> Package                                 Arch                   Version                                    Repository                                                 Size</span><br><span class="line">===========================================================================================================================================================================</span><br><span class="line">Installing:</span><br><span class="line"> docker-ce                               x86_64                 18.03.0.ce-1.el7.centos                    /docker-ce-18.03.0.ce-1.el7.centos.x86_64                 151 M</span><br><span class="line">Updating:</span><br><span class="line"> systemd                                 x86_64                 219-57.el7                                 base                                                      5.0 M</span><br><span class="line">Installing for dependencies:</span><br><span class="line"> container-selinux                       noarch                 2:2.66-1.el7                               extras                                                     35 k</span><br><span class="line"> lz4                                     x86_64                 1.7.5-2.el7                                base                                                       98 k</span><br><span class="line"> pigz                                    x86_64                 2.3.4-1.el7                                epel                                                       81 k</span><br><span class="line">Updating for dependencies:</span><br><span class="line"> libgudev1                               x86_64                 219-57.el7                                 base                                                       92 k</span><br><span class="line"> libseccomp                              x86_64                 2.3.1-3.el7                                base                                                       56 k</span><br><span class="line"> libselinux                              x86_64                 2.5-12.el7                                 base                                                      162 k</span><br><span class="line"> libselinux-python                       x86_64                 2.5-12.el7                                 base                                                      235 k</span><br><span class="line"> libselinux-utils                        x86_64                 2.5-12.el7                                 base                                                      151 k</span><br><span class="line"> libsemanage                             x86_64                 2.5-11.el7                                 base                                                      150 k</span><br><span class="line"> libsemanage-python                      x86_64                 2.5-11.el7                                 base                                                      112 k</span><br><span class="line"> libsepol                                x86_64                 2.5-8.1.el7                                base                                                      297 k</span><br><span class="line"> policycoreutils                         x86_64                 2.5-22.el7                                 base                                                      867 k</span><br><span class="line"> policycoreutils-python                  x86_64                 2.5-22.el7                                 base                                                      454 k</span><br><span class="line"> selinux-policy                          noarch                 3.13.1-192.el7_5.4                         updates                                                   453 k</span><br><span class="line"> selinux-policy-targeted                 noarch                 3.13.1-192.el7_5.4                         updates                                                   6.6 M</span><br><span class="line"> setools-libs                            x86_64                 3.3.8-2.el7                                base                                                      619 k</span><br><span class="line"> systemd-libs                            x86_64                 219-57.el7                                 base                                                      402 k</span><br><span class="line"> systemd-python                          x86_64                 219-57.el7                                 base                                                      128 k</span><br><span class="line"> systemd-sysv                            x86_64                 219-57.el7                                 base                                                       79 k</span><br><span class="line"></span><br><span class="line">Transaction Summary</span><br><span class="line">===========================================================================================================================================================================</span><br><span class="line">Install  1 Package (+ 3 Dependent packages)</span><br><span class="line">Upgrade  1 Package (+16 Dependent packages)</span><br><span class="line"></span><br><span class="line">Total size: 166 M</span><br><span class="line">Total download size: 16 M</span><br><span class="line">Downloading packages:</span><br><span class="line">No Presto metadata available for base</span><br><span class="line">updates/7/x86_64/prestodelta                                                                                                                        | 420 kB  00:00:01     </span><br><span class="line">(1/19): libselinux-2.5-12.el7.x86_64.rpm                                                                                                            | 162 kB  00:00:00     </span><br><span class="line">(2/19): libselinux-utils-2.5-12.el7.x86_64.rpm                                                                                                      | 151 kB  00:00:00     </span><br><span class="line">(3/19): libsemanage-2.5-11.el7.x86_64.rpm                                                                                                           | 150 kB  00:00:00     </span><br><span class="line">(4/19): libgudev1-219-57.el7.x86_64.rpm                                                                                                             |  92 kB  00:00:00     </span><br><span class="line">(5/19): libsemanage-python-2.5-11.el7.x86_64.rpm                                                                                                    | 112 kB  00:00:00     </span><br><span class="line">(6/19): libsepol-2.5-8.1.el7.x86_64.rpm                                                                                                             | 297 kB  00:00:00     </span><br><span class="line">(7/19): lz4-1.7.5-2.el7.x86_64.rpm                                                                                                                  |  98 kB  00:00:00     </span><br><span class="line">(8/19): libselinux-python-2.5-12.el7.x86_64.rpm                                                                                                     | 235 kB  00:00:00     </span><br><span class="line">(9/19): selinux-policy-3.13.1-192.el7_5.4.noarch.rpm                                                                                                | 453 kB  00:00:00     </span><br><span class="line">(10/19): policycoreutils-python-2.5-22.el7.x86_64.rpm                                                                                               | 454 kB  00:00:00     </span><br><span class="line">(11/19): setools-libs-3.3.8-2.el7.x86_64.rpm                                                                                                        | 619 kB  00:00:00     </span><br><span class="line">(12/19): systemd-219-57.el7.x86_64.rpm                                                                                                              | 5.0 MB  00:00:00     </span><br><span class="line">(13/19): container-selinux-2.66-1.el7.noarch.rpm                                                                                                    |  35 kB  00:00:01     </span><br><span class="line">(14/19): systemd-libs-219-57.el7.x86_64.rpm                                                                                                         | 402 kB  00:00:00     </span><br><span class="line">(15/19): systemd-sysv-219-57.el7.x86_64.rpm                                                                                                         |  79 kB  00:00:00     </span><br><span class="line">(16/19): selinux-policy-targeted-3.13.1-192.el7_5.4.noarch.rpm                                                                                      | 6.6 MB  00:00:01     </span><br><span class="line">(17/19): systemd-python-219-57.el7.x86_64.rpm                                                                                                       | 128 kB  00:00:00     </span><br><span class="line">(18/19): pigz-2.3.4-1.el7.x86_64.rpm                                                                                                                |  81 kB  00:00:01     </span><br><span class="line">(19/19): policycoreutils-2.5-22.el7.x86_64.rpm                                                                                                      | 867 kB  00:00:01     </span><br><span class="line">---------------------------------------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line">Total                                                                                                                                      7.4 MB/s |  16 MB  00:00:02     </span><br><span class="line">Running transaction check</span><br><span class="line">Running transaction test</span><br><span class="line">Transaction test succeeded</span><br><span class="line">Running transaction</span><br><span class="line">  Updating   : libsepol-2.5-8.1.el7.x86_64                                                                                                                            1/38 </span><br><span class="line">  Updating   : libselinux-2.5-12.el7.x86_64                                                                                                                           2/38 </span><br><span class="line">  Updating   : libsemanage-2.5-11.el7.x86_64                                                                                                                          3/38 </span><br><span class="line">  Installing : lz4-1.7.5-2.el7.x86_64                                                                                                                                 4/38 </span><br><span class="line">  Updating   : systemd-libs-219-57.el7.x86_64                                                                                                                         5/38 </span><br><span class="line">  Updating   : systemd-219-57.el7.x86_64                                                                                                                              6/38 </span><br><span class="line">  Updating   : libselinux-utils-2.5-12.el7.x86_64                                                                                                                     7/38 </span><br><span class="line">  Updating   : policycoreutils-2.5-22.el7.x86_64                                                                                                                      8/38 </span><br><span class="line">  Updating   : selinux-policy-3.13.1-192.el7_5.4.noarch                                                                                                               9/38 </span><br><span class="line">  Updating   : selinux-policy-targeted-3.13.1-192.el7_5.4.noarch                                                                                                     10/38 </span><br><span class="line">  Updating   : libsemanage-python-2.5-11.el7.x86_64                                                                                                                  11/38 </span><br><span class="line">  Updating   : libselinux-python-2.5-12.el7.x86_64                                                                                                                   12/38 </span><br><span class="line">  Updating   : setools-libs-3.3.8-2.el7.x86_64                                                                                                                       13/38 </span><br><span class="line">  Updating   : policycoreutils-python-2.5-22.el7.x86_64                                                                                                              14/38 </span><br><span class="line">  Installing : 2:container-selinux-2.66-1.el7.noarch                                                                                                                 15/38 </span><br><span class="line">setsebool:  SELinux is disabled.</span><br><span class="line">  Installing : pigz-2.3.4-1.el7.x86_64                                                                                                                               16/38 </span><br><span class="line">  Updating   : libseccomp-2.3.1-3.el7.x86_64                                                                                                                         17/38 </span><br><span class="line">  Installing : docker-ce-18.03.0.ce-1.el7.centos.x86_64                                                                                                              18/38 </span><br><span class="line">  Updating   : systemd-sysv-219-57.el7.x86_64                                                                                                                        19/38 </span><br><span class="line">  Updating   : systemd-python-219-57.el7.x86_64                                                                                                                      20/38 </span><br><span class="line">  Updating   : libgudev1-219-57.el7.x86_64                                                                                                                           21/38 </span><br><span class="line">  Cleanup    : selinux-policy-targeted-3.13.1-60.el7.noarch                                                                                                          22/38 </span><br><span class="line">  Cleanup    : policycoreutils-python-2.2.5-20.el7.x86_64                                                                                                            23/38 </span><br><span class="line">  Cleanup    : selinux-policy-3.13.1-60.el7.noarch                                                                                                                   24/38 </span><br><span class="line">  Cleanup    : systemd-sysv-219-19.el7.x86_64                                                                                                                        25/38 </span><br><span class="line">  Cleanup    : policycoreutils-2.2.5-20.el7.x86_64                                                                                                                   26/38 </span><br><span class="line">  Cleanup    : systemd-python-219-19.el7.x86_64                                                                                                                      27/38 </span><br><span class="line">  Cleanup    : systemd-219-19.el7.x86_64                                                                                                                             28/38 </span><br><span class="line">  Cleanup    : setools-libs-3.3.7-46.el7.x86_64                                                                                                                      29/38 </span><br><span class="line">  Cleanup    : libselinux-utils-2.2.2-6.el7.x86_64                                                                                                                   30/38 </span><br><span class="line">  Cleanup    : libselinux-python-2.2.2-6.el7.x86_64                                                                                                                  31/38 </span><br><span class="line">  Cleanup    : libsemanage-python-2.1.10-18.el7.x86_64                                                                                                               32/38 </span><br><span class="line">  Cleanup    : libsemanage-2.1.10-18.el7.x86_64                                                                                                                      33/38 </span><br><span class="line">  Cleanup    : libgudev1-219-19.el7.x86_64                                                                                                                           34/38 </span><br><span class="line">  Cleanup    : systemd-libs-219-19.el7.x86_64                                                                                                                        35/38 </span><br><span class="line">  Cleanup    : libselinux-2.2.2-6.el7.x86_64                                                                                                                         36/38 </span><br><span class="line">  Cleanup    : libsepol-2.1.9-3.el7.x86_64                                                                                                                           37/38 </span><br><span class="line">  Cleanup    : libseccomp-2.2.1-1.el7.x86_64                                                                                                                         38/38 </span><br><span class="line">  Verifying  : libsemanage-python-2.5-11.el7.x86_64                                                                                                                   1/38 </span><br><span class="line">  Verifying  : libsemanage-2.5-11.el7.x86_64                                                                                                                          2/38 </span><br><span class="line">  Verifying  : libselinux-python-2.5-12.el7.x86_64                                                                                                                    3/38 </span><br><span class="line">  Verifying  : selinux-policy-3.13.1-192.el7_5.4.noarch                                                                                                               4/38 </span><br><span class="line">  Verifying  : setools-libs-3.3.8-2.el7.x86_64                                                                                                                        5/38 </span><br><span class="line">  Verifying  : libseccomp-2.3.1-3.el7.x86_64                                                                                                                          6/38 </span><br><span class="line">  Verifying  : policycoreutils-2.5-22.el7.x86_64                                                                                                                      7/38 </span><br><span class="line">  Verifying  : selinux-policy-targeted-3.13.1-192.el7_5.4.noarch                                                                                                      8/38 </span><br><span class="line">  Verifying  : pigz-2.3.4-1.el7.x86_64                                                                                                                                9/38 </span><br><span class="line">  Verifying  : policycoreutils-python-2.5-22.el7.x86_64                                                                                                              10/38 </span><br><span class="line">  Verifying  : libgudev1-219-57.el7.x86_64                                                                                                                           11/38 </span><br><span class="line">  Verifying  : 2:container-selinux-2.66-1.el7.noarch                                                                                                                 12/38 </span><br><span class="line">  Verifying  : systemd-sysv-219-57.el7.x86_64                                                                                                                        13/38 </span><br><span class="line">  Verifying  : lz4-1.7.5-2.el7.x86_64                                                                                                                                14/38 </span><br><span class="line">  Verifying  : systemd-219-57.el7.x86_64                                                                                                                             15/38 </span><br><span class="line">  Verifying  : libsepol-2.5-8.1.el7.x86_64                                                                                                                           16/38 </span><br><span class="line">  Verifying  : systemd-libs-219-57.el7.x86_64                                                                                                                        17/38 </span><br><span class="line">  Verifying  : libselinux-2.5-12.el7.x86_64                                                                                                                          18/38 </span><br><span class="line">  Verifying  : docker-ce-18.03.0.ce-1.el7.centos.x86_64                                                                                                              19/38 </span><br><span class="line">  Verifying  : libselinux-utils-2.5-12.el7.x86_64                                                                                                                    20/38 </span><br><span class="line">  Verifying  : systemd-python-219-57.el7.x86_64                                                                                                                      21/38 </span><br><span class="line">  Verifying  : libsemanage-python-2.1.10-18.el7.x86_64                                                                                                               22/38 </span><br><span class="line">  Verifying  : selinux-policy-targeted-3.13.1-60.el7.noarch                                                                                                          23/38 </span><br><span class="line">  Verifying  : setools-libs-3.3.7-46.el7.x86_64                                                                                                                      24/38 </span><br><span class="line">  Verifying  : libsemanage-2.1.10-18.el7.x86_64                                                                                                                      25/38 </span><br><span class="line">  Verifying  : systemd-sysv-219-19.el7.x86_64                                                                                                                        26/38 </span><br><span class="line">  Verifying  : libgudev1-219-19.el7.x86_64                                                                                                                           27/38 </span><br><span class="line">  Verifying  : systemd-219-19.el7.x86_64                                                                                                                             28/38 </span><br><span class="line">  Verifying  : selinux-policy-3.13.1-60.el7.noarch                                                                                                                   29/38 </span><br><span class="line">  Verifying  : systemd-libs-219-19.el7.x86_64                                                                                                                        30/38 </span><br><span class="line">  Verifying  : libselinux-utils-2.2.2-6.el7.x86_64                                                                                                                   31/38 </span><br><span class="line">  Verifying  : libseccomp-2.2.1-1.el7.x86_64                                                                                                                         32/38 </span><br><span class="line">  Verifying  : libsepol-2.1.9-3.el7.x86_64                                                                                                                           33/38 </span><br><span class="line">  Verifying  : libselinux-python-2.2.2-6.el7.x86_64                                                                                                                  34/38 </span><br><span class="line">  Verifying  : policycoreutils-2.2.5-20.el7.x86_64                                                                                                                   35/38 </span><br><span class="line">  Verifying  : systemd-python-219-19.el7.x86_64                                                                                                                      36/38 </span><br><span class="line">  Verifying  : libselinux-2.2.2-6.el7.x86_64                                                                                                                         37/38 </span><br><span class="line">  Verifying  : policycoreutils-python-2.2.5-20.el7.x86_64                                                                                                            38/38 </span><br><span class="line"></span><br><span class="line">Installed:</span><br><span class="line">  docker-ce.x86_64 0:18.03.0.ce-1.el7.centos                                                                                                                               </span><br><span class="line"></span><br><span class="line">Dependency Installed:</span><br><span class="line">  container-selinux.noarch 2:2.66-1.el7                            lz4.x86_64 0:1.7.5-2.el7                            pigz.x86_64 0:2.3.4-1.el7                           </span><br><span class="line"></span><br><span class="line">Updated:</span><br><span class="line">  systemd.x86_64 0:219-57.el7                                                                                                                                              </span><br><span class="line"></span><br><span class="line">Dependency Updated:</span><br><span class="line">  libgudev1.x86_64 0:219-57.el7                        libseccomp.x86_64 0:2.3.1-3.el7                      libselinux.x86_64 0:2.5-12.el7                               </span><br><span class="line">  libselinux-python.x86_64 0:2.5-12.el7                libselinux-utils.x86_64 0:2.5-12.el7                 libsemanage.x86_64 0:2.5-11.el7                              </span><br><span class="line">  libsemanage-python.x86_64 0:2.5-11.el7               libsepol.x86_64 0:2.5-8.1.el7                        policycoreutils.x86_64 0:2.5-22.el7                          </span><br><span class="line">  policycoreutils-python.x86_64 0:2.5-22.el7           selinux-policy.noarch 0:3.13.1-192.el7_5.4           selinux-policy-targeted.noarch 0:3.13.1-192.el7_5.4          </span><br><span class="line">  setools-libs.x86_64 0:3.3.8-2.el7                    systemd-libs.x86_64 0:219-57.el7                     systemd-python.x86_64 0:219-57.el7                           </span><br><span class="line">  systemd-sysv.x86_64 0:219-57.el7                    </span><br><span class="line"></span><br><span class="line">Complete!</span><br><span class="line">Created symlink from /etc/systemd/system/multi-user.target.wants/docker.service to /usr/lib/systemd/system/docker.service.</span><br><span class="line">● docker.service - Docker Application Container Engine</span><br><span class="line">   Loaded: loaded (/usr/lib/systemd/system/docker.service; enabled; vendor preset: disabled)</span><br><span class="line">   Active: active (running) since Mon 2018-08-20 15:51:50 HKT; 9ms ago</span><br><span class="line">     Docs: https://docs.docker.com</span><br><span class="line"> Main PID: 42077 (dockerd)</span><br><span class="line">   Memory: 40.8M</span><br><span class="line">   CGroup: /system.slice/docker.service</span><br><span class="line">           ├─42077 /usr/bin/dockerd</span><br><span class="line">           └─42086 docker-containerd --config /var/run/docker/containerd/containerd.toml</span><br><span class="line"></span><br><span class="line">Aug 20 15:51:50 server87 dockerd[42077]: time=&quot;2018-08-20T15:51:50.337814778+08:00&quot; level=info msg=&quot;devmapper: Successfully created filesystem xfs on device d...5123-base&quot;</span><br><span class="line">Aug 20 15:51:50 server87 dockerd[42077]: time=&quot;2018-08-20T15:51:50.463516508+08:00&quot; level=info msg=&quot;Graph migration to content-addressability took 0.00 seconds&quot;</span><br><span class="line">Aug 20 15:51:50 server87 dockerd[42077]: time=&quot;2018-08-20T15:51:50.463782799+08:00&quot; level=warning msg=&quot;mountpoint for pids not found&quot;</span><br><span class="line">Aug 20 15:51:50 server87 dockerd[42077]: time=&quot;2018-08-20T15:51:50.464461343+08:00&quot; level=info msg=&quot;Loading containers: start.&quot;</span><br><span class="line">Aug 20 15:51:50 server87 dockerd[42077]: time=&quot;2018-08-20T15:51:50.601643093+08:00&quot; level=info msg=&quot;Default bridge (docker0) is assigned with an IP address 17...P address&quot;</span><br><span class="line">Aug 20 15:51:50 server87 dockerd[42077]: time=&quot;2018-08-20T15:51:50.677859724+08:00&quot; level=info msg=&quot;Loading containers: done.&quot;</span><br><span class="line">Aug 20 15:51:50 server87 dockerd[42077]: time=&quot;2018-08-20T15:51:50.696315433+08:00&quot; level=info msg=&quot;Docker daemon&quot; commit=0520e24 graphdriver(s)=devicemapper ...18.03.0-ce</span><br><span class="line">Aug 20 15:51:50 server87 dockerd[42077]: time=&quot;2018-08-20T15:51:50.696473183+08:00&quot; level=info msg=&quot;Daemon has completed initialization&quot;</span><br><span class="line">Aug 20 15:51:50 server87 systemd[1]: Started Docker Application Container Engine.</span><br><span class="line">Aug 20 15:51:50 server87 dockerd[42077]: time=&quot;2018-08-20T15:51:50.714102886+08:00&quot; level=info msg=&quot;API listen on /var/run/docker.sock&quot;</span><br><span class="line">Hint: Some lines were ellipsized, use -l to show in full.</span><br><span class="line">[root@server87 install_k8s_node]# ls</span><br><span class="line">nodefile  Step1_config.sh  Step2_install_docker.sh  Step3_install_kubelet.sh  Step4_install_proxy.sh  Step5_node_approve_csr.sh  Step6_master_node_context.sh</span><br><span class="line">[root@server87 install_k8s_node]# ./Step3_install_kubelet.sh </span><br><span class="line">MASTER_IP=172.16.5.81</span><br><span class="line">cat: /opt/ETCD_CLUSER_INFO: No such file or directory</span><br><span class="line">Created symlink from /etc/systemd/system/multi-user.target.wants/kubelet.service to /usr/lib/systemd/system/kubelet.service.</span><br><span class="line">● kubelet.service - Kubernetes Kubelet Server</span><br><span class="line">   Loaded: loaded (/usr/lib/systemd/system/kubelet.service; enabled; vendor preset: disabled)</span><br><span class="line">   Active: active (running) since Mon 2018-08-20 15:52:13 HKT; 46ms ago</span><br><span class="line">     Docs: https://github.com/GoogleCloudPlatform/kubernetes</span><br><span class="line"> Main PID: 42486 (kubelet)</span><br><span class="line">   Memory: 6.4M</span><br><span class="line">   CGroup: /system.slice/kubelet.service</span><br><span class="line">           └─42486 /usr/bin/kubelet --logtostderr=true --v=0 --kubeconfig=/etc/kubernetes/kubelet.kubeconfig --hostname-override=172.16.5.87 --pod-infra-container-image...</span><br><span class="line"></span><br><span class="line">Aug 20 15:52:13 server87 systemd[1]: Started Kubernetes Kubelet Server.</span><br><span class="line">Aug 20 15:52:13 server87 systemd[1]: Starting Kubernetes Kubelet Server...</span><br><span class="line">[root@server87 install_k8s_node]# </span><br><span class="line">[root@server87 install_k8s_node]# ./Step4_install_proxy.sh </span><br><span class="line">Created symlink from /etc/systemd/system/default.target.wants/kube-proxy.service to /usr/lib/systemd/system/kube-proxy.service.</span><br><span class="line">● kube-proxy.service - Kube Proxy Service</span><br><span class="line">   Loaded: loaded (/usr/lib/systemd/system/kube-proxy.service; enabled; vendor preset: disabled)</span><br><span class="line">   Active: active (running) since Mon 2018-08-20 15:52:18 HKT; 38ms ago</span><br><span class="line"> Main PID: 42814 (kube-proxy)</span><br><span class="line">   Memory: 5.8M</span><br><span class="line">   CGroup: /system.slice/kube-proxy.service</span><br><span class="line">           └─42814 /usr/bin/kube-proxy --logtostderr=true --v=0 --master=http://172.16.5.81:8080 --kubeconfig=/etc/kubernetes/kube-proxy.kubeconfig --cluster-cidr=10.1....</span><br><span class="line"></span><br><span class="line">Aug 20 15:52:18 server87 systemd[1]: Started Kube Proxy Service.</span><br><span class="line">Aug 20 15:52:18 server87 systemd[1]: Starting Kube Proxy Service...</span><br><span class="line">[root@server87 install_k8s_node]#</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p><strong>回到Master服务器认证通过Server86、87的kubelet服务csr请求</strong></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">[root@server81 opt]# kubectl get csr</span><br><span class="line">NAME                                                   AGE       REQUESTOR           CONDITION</span><br><span class="line">node-csr-1behv8FXfoDXo6SLgRlwtJ7EwOnMMqIoo7c5YI4q0Yc   1m        kubelet-bootstrap   Pending</span><br><span class="line">node-csr-fH4Ct4Fg4TgzFV0dP-SlfVCtTo9XNCJjajzPohDVxHE   50m       kubelet-bootstrap   Approved,Issued</span><br><span class="line">node-csr-tO2dsRk01-qNWJkeDYARuIkeV24QsX2M8txYmkXs96M   6m        kubelet-bootstrap   Pending</span><br><span class="line">[root@server81 opt]# </span><br><span class="line">[root@server81 opt]# kubectl certificate approve node-csr-1behv8FXfoDXo6SLgRlwtJ7EwOnMMqIoo7c5YI4q0Yc</span><br><span class="line">certificatesigningrequest.certificates.k8s.io/node-csr-1behv8FXfoDXo6SLgRlwtJ7EwOnMMqIoo7c5YI4q0Yc approved</span><br><span class="line">[root@server81 opt]# </span><br><span class="line">[root@server81 opt]# kubectl certificate approve node-csr-tO2dsRk01-qNWJkeDYARuIkeV24QsX2M8txYmkXs96M</span><br><span class="line">certificatesigningrequest.certificates.k8s.io/node-csr-tO2dsRk01-qNWJkeDYARuIkeV24QsX2M8txYmkXs96M approved</span><br><span class="line">[root@server81 opt]# </span><br><span class="line">[root@server81 opt]# kubectl get csr</span><br><span class="line">NAME                                                   AGE       REQUESTOR           CONDITION</span><br><span class="line">node-csr-1behv8FXfoDXo6SLgRlwtJ7EwOnMMqIoo7c5YI4q0Yc   1m        kubelet-bootstrap   Approved,Issued</span><br><span class="line">node-csr-fH4Ct4Fg4TgzFV0dP-SlfVCtTo9XNCJjajzPohDVxHE   51m       kubelet-bootstrap   Approved,Issued</span><br><span class="line">node-csr-tO2dsRk01-qNWJkeDYARuIkeV24QsX2M8txYmkXs96M   6m        kubelet-bootstrap   Approved,Issued</span><br><span class="line">[root@server81 opt]# </span><br><span class="line">[root@server81 opt]# kubectl get node</span><br><span class="line">NAME          STATUS     ROLES     AGE       VERSION</span><br><span class="line">172.16.5.81   NotReady   &lt;none&gt;    44m       v1.11.0</span><br><span class="line">172.16.5.86   NotReady   &lt;none&gt;    13s       v1.11.0</span><br><span class="line">172.16.5.87   NotReady   &lt;none&gt;    6s        v1.11.0</span><br><span class="line">[root@server81 opt]#</span><br></pre></td></tr></table></figure><p>部署到这里<code>kubernetes</code>的<code>Node</code>节点服务也部署完毕了，虽然这里是<code>NotReady</code>状态，但是只要部署<code>Calico</code>网络即可。</p><blockquote><h2 id="最后总结"><a href="#最后总结" class="headerlink" title="最后总结"></a>最后总结</h2></blockquote><p>综上所述，整体<code>kubernetes</code>启用<code>RBAC</code>的生成环境 二进制可执行文件的环境已部署完毕。<br>这里<code>Node</code>节点部署<code>Calico</code>网络的内容我就打算写在下一篇章了。</p><hr><blockquote><h2 id="优化的方向"><a href="#优化的方向" class="headerlink" title="优化的方向"></a>优化的方向</h2></blockquote><ul><li>离线环境部署kubernetes环境</li><li>全自动部署项目</li><li>服务器集群外部组件的说明以及自动化部署<br><strong><em>以上几点后续，有时间我可以陆续逐步写上来的，赞一下给我点动力吧。</em></strong></li></ul><hr><blockquote><p>如果你想要看我写的总体系列文章目录介绍，可以点击<a href="https://www.jianshu.com/p/4a9c06ea570b" target="_blank" rel="noopener">kuberntes以及运维开发文章目录介绍</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;#原创内容，转载请注明出处&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;博主地址：&lt;a href=&quot;https://aronligithub.github.io/&quot;&gt;https://aronligithub.github.io/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;在经过上一篇章关于&lt;a href=&quot;https://www.jianshu.com/p/198eb16b1902&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;kubernetes 基本技术概述铺垫&lt;/a&gt;,在部署etcd集群之后，就可以开始部署kubernetes的集群服务了。&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;如果你是直接访问到该篇章，不清楚etcd如何部署，不清楚我写的kubernetes系列文章铺垫，可以访问&lt;a href=&quot;https://www.jianshu.com/p/4a9c06ea570b&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;这里&lt;/a&gt;。&lt;/strong&gt;&lt;br&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/13423234-3a6c9499ff3ed79b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="运维开发系列" scheme="https://aronligithub.github.io/categories/%E8%BF%90%E7%BB%B4%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="kubernetes系列" scheme="https://aronligithub.github.io/tags/kubernetes%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>etcd多台部署，启用https以及ca自签名</title>
    <link href="https://aronligithub.github.io/2018/08/14/etcd%E5%A4%9A%E5%8F%B0%E9%83%A8%E7%BD%B2%EF%BC%8C%E5%90%AF%E7%94%A8https%E4%BB%A5%E5%8F%8Aca%E8%87%AA%E7%AD%BE%E5%90%8D/"/>
    <id>https://aronligithub.github.io/2018/08/14/etcd多台部署，启用https以及ca自签名/</id>
    <published>2018-08-14T12:15:22.000Z</published>
    <updated>2018-08-14T12:43:08.154Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>#原创内容，转载请注明出处</p></blockquote><p>博主地址：<a href="https://aronligithub.github.io/">https://aronligithub.github.io/</a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p><strong><em>在经过上一篇章关于<a href="https://www.jianshu.com/p/0fc3c5e78eff" target="_blank" rel="noopener">etcd单台部署，启用https以及ca自签名</a>,这个篇章就是介绍以及演示三台etcd部署以及使用CFSSL来生成CA证书</em></strong><br><img src="https://upload-images.jianshu.io/upload_images/13423234-cc71b29110c4dfdd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br><img src="https://upload-images.jianshu.io/upload_images/13423234-869e0c6cafd7cb22.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p></blockquote><a id="more"></a><h2 id="环境要求"><a href="#环境要求" class="headerlink" title="环境要求"></a>环境要求</h2><blockquote><p>1、三台安装centos7的服务器<br>2、具备访问互联网<br>3、关闭服务器的防火墙以及selinux</p></blockquote><hr><h2 id="服务器拓扑"><a href="#服务器拓扑" class="headerlink" title="服务器拓扑"></a>服务器拓扑</h2><p><img src="https://upload-images.jianshu.io/upload_images/13423234-38a4263e5928cb9c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="etcd集群拓扑"></p><blockquote><p>服务器部署组件以及IP清单</p></blockquote><table><thead><tr><th style="text-align:left">host name</th><th style="text-align:center">服务器IP</th><th style="text-align:center">etcd节点name</th></tr></thead><tbody><tr><td style="text-align:left">server81</td><td style="text-align:center">172.16.5.81</td><td style="text-align:center">infra1</td></tr><tr><td style="text-align:left">server86</td><td style="text-align:center">172.16.5.86</td><td style="text-align:center">infra2</td></tr><tr><td style="text-align:left">server87</td><td style="text-align:center">172.16.5.87</td><td style="text-align:center">infra3</td></tr></tbody></table><hr><h2 id="CFSSL工具的安装"><a href="#CFSSL工具的安装" class="headerlink" title="CFSSL工具的安装"></a>CFSSL工具的安装</h2><blockquote><p>下载CFSSL的可执行二进制文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wget https://pkg.cfssl.org/R1.2/cfssl_linux-amd64 </span><br><span class="line">wget https://pkg.cfssl.org/R1.2/cfssljson_linux-amd64 </span><br><span class="line">wget https://pkg.cfssl.org/R1.2/cfssl-certinfo_linux-amd64</span><br><span class="line">chmod +x cfssl*</span><br></pre></td></tr></table></figure></p></blockquote><h4 id="下载执行过程截图如下"><a href="#下载执行过程截图如下" class="headerlink" title="下载执行过程截图如下"></a>下载执行过程截图如下</h4><blockquote><p><img src="https://upload-images.jianshu.io/upload_images/13423234-0417209515272faf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="安装wget工具"><br><img src="https://upload-images.jianshu.io/upload_images/13423234-a468ec85ee2a0361.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="下载文件的过程"><br><img src="https://upload-images.jianshu.io/upload_images/13423234-4f2f93fec52331c1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="给文件添加执行权限"></p></blockquote><hr><blockquote><p>将这三个二进制可执行文件，修改名称复制到/usr/local/bin/下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cp -v cfssl_linux-amd64 /usr/local/bin/cfssl</span><br><span class="line">cp -v cfssljson_linux-amd64 /usr/local/bin/cfssljson</span><br><span class="line">cp -v cfssl-certinfo_linux-amd64 /usr/local/bin/cfssl-certinfo</span><br><span class="line">ls /usr/local/bin/cfssl*</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p><img src="https://upload-images.jianshu.io/upload_images/13423234-a40624bce96e4c26.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="复制可执行文件至指定目录"></p></blockquote><hr><h2 id="使用CFSSL创建CA证书以及etcd的TLS认证证书"><a href="#使用CFSSL创建CA证书以及etcd的TLS认证证书" class="headerlink" title="使用CFSSL创建CA证书以及etcd的TLS认证证书"></a>使用CFSSL创建CA证书以及etcd的TLS认证证书</h2><blockquote><p>创建 CA (Certificate Authority)</p></blockquote><hr><blockquote><p>   创建 CA 配置文件（ca-config.json）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">[root@server81 etcdSSl]# vim ca-config.json</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;signing&quot;: &#123;</span><br><span class="line">    &quot;default&quot;: &#123;</span><br><span class="line">      &quot;expiry&quot;: &quot;876000h&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;profiles&quot;: &#123;</span><br><span class="line">      &quot;etcd&quot;: &#123;</span><br><span class="line">        &quot;usages&quot;: [</span><br><span class="line">            &quot;signing&quot;,</span><br><span class="line">            &quot;key encipherment&quot;,</span><br><span class="line">    &quot;default&quot;: &#123;</span><br><span class="line">      &quot;expiry&quot;: &quot;876000h&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;profiles&quot;: &#123;</span><br><span class="line">      &quot;etcd&quot;: &#123;</span><br><span class="line">        &quot;usages&quot;: [</span><br><span class="line">            &quot;signing&quot;,</span><br><span class="line">            &quot;key encipherment&quot;,</span><br><span class="line">            &quot;server auth&quot;,</span><br><span class="line">            &quot;client auth&quot;</span><br><span class="line">        ],</span><br><span class="line">        &quot;expiry&quot;: &quot;876000h&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p><img src="https://upload-images.jianshu.io/upload_images/13423234-f8028f978617f616.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="创建CA配置文件"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&quot;字段说明&quot;</span><br><span class="line">&quot;ca-config.json&quot;：可以定义多个 profiles，分别指定不同的过期时间、使用场景等参数；后续在签名证书时使用某个 profile；</span><br><span class="line">&quot;signing&quot;：表示该证书可用于签名其它证书；生成的 ca.pem 证书中 CA=TRUE；</span><br><span class="line">&quot;server auth&quot;：表示client可以用该 CA 对server提供的证书进行验证；</span><br><span class="line">&quot;client auth&quot;：表示server可以用该CA对client提供的证书进行验证；</span><br></pre></td></tr></table></figure></p></blockquote><hr><blockquote><h4 id="创建-CA-证书签名请求（ca-csr-json）"><a href="#创建-CA-证书签名请求（ca-csr-json）" class="headerlink" title="创建 CA 证书签名请求（ca-csr.json）"></a>创建 CA 证书签名请求（ca-csr.json）</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[root@server81 etcdSSl]# vim ca-csr.json</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;CN&quot;: &quot;etcd&quot;,</span><br><span class="line">  &quot;key&quot;: &#123;</span><br><span class="line">    &quot;algo&quot;: &quot;rsa&quot;,</span><br><span class="line">    &quot;size&quot;: 2048</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;names&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;C&quot;: &quot;CN&quot;,</span><br><span class="line">      &quot;ST&quot;: &quot;shenzhen&quot;,</span><br><span class="line">      &quot;L&quot;: &quot;shenzhen&quot;,</span><br><span class="line">      &quot;O&quot;: &quot;etcd&quot;,</span><br><span class="line">      &quot;OU&quot;: &quot;System&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p><img src="https://upload-images.jianshu.io/upload_images/13423234-360e39eb81e9b3c7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="创建CA签名请求"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot;CN&quot;：Common Name，etcd 从证书中提取该字段作为请求的用户名 (User Name)；浏览器使用该字段验证网站是否合法；</span><br><span class="line">&quot;O&quot;：Organization，etcd 从证书中提取该字段作为请求用户所属的组 (Group)；</span><br><span class="line">这两个参数在后面的kubernetes启用RBAC模式中很重要，因为需要设置kubelet、admin等角色权限，那么在配置证书的时候就必须配置对了，具体后面在部署kubernetes的时候会进行讲解。</span><br><span class="line">&quot;在etcd这两个参数没太大的重要意义，跟着配置就好。&quot;</span><br></pre></td></tr></table></figure></p></blockquote><hr><blockquote><h4 id="生成-CA-证书和私钥"><a href="#生成-CA-证书和私钥" class="headerlink" title="生成 CA 证书和私钥"></a>生成 CA 证书和私钥</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cfssl gencert -initca ca-csr.json | cfssljson -bare ca</span><br><span class="line">说明：生成 &quot;ca-csr.json  ca-key.pem  ca.pem&quot; 三个文件</span><br></pre></td></tr></table></figure></blockquote><blockquote><p><img src="https://upload-images.jianshu.io/upload_images/13423234-d8f5efdf7a16870d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="ca根证书的生成过程"></p></blockquote><hr><h2 id="创建etcd的TLS认证证书"><a href="#创建etcd的TLS认证证书" class="headerlink" title="创建etcd的TLS认证证书"></a>创建etcd的TLS认证证书</h2><blockquote><p>创建 etcd证书签名请求（etcd-csr.json）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">[root@server81 etcdSSl]# vim etcd-csr.json</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;CN&quot;: &quot;etcd&quot;,</span><br><span class="line">  &quot;hosts&quot;: [</span><br><span class="line">    &quot;127.0.0.1&quot;,</span><br><span class="line">    &quot;172.16.5.81&quot;,</span><br><span class="line">    &quot;172.16.5.86&quot;,</span><br><span class="line">    &quot;172.16.5.87&quot;</span><br><span class="line">  ],</span><br><span class="line">  &quot;key&quot;: &#123;</span><br><span class="line">    &quot;algo&quot;: &quot;rsa&quot;,</span><br><span class="line">    &quot;size&quot;: 2048</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;names&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;C&quot;: &quot;CN&quot;,</span><br><span class="line">      &quot;ST&quot;: &quot;shenzhen&quot;,</span><br><span class="line">      &quot;L&quot;: &quot;shenzhen&quot;,</span><br><span class="line">      &quot;O&quot;: &quot;etcd&quot;,</span><br><span class="line">      &quot;OU&quot;: &quot;System&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p><img src="https://upload-images.jianshu.io/upload_images/13423234-92cad65af52c086d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="创建etcd证书签名请求"></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[^_^]:</span><br><span class="line">       如果 hosts 字段不为空，则需要指定授权使用该证书的 IP 或域名列表。</span><br><span class="line">[&gt;_&lt;]:</span><br><span class="line">       该证书被 etcd 集群使用，所以填写三台etcd服务器的IP即可。</span><br></pre></td></tr></table></figure><hr><p>生成 etcd证书和私钥<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=etcd etcd-csr.json | cfssljson -bare etcd</span><br><span class="line"></span><br><span class="line">[^_^]:</span><br><span class="line">       生成 &quot;etcd-csr.json  etcd-key.pem  etcd.pem&quot; 三个文件。</span><br></pre></td></tr></table></figure></p><blockquote><p><img src="https://upload-images.jianshu.io/upload_images/13423234-e652f6cd5ed95892.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="生成etcd证书以及私钥"></p></blockquote><hr><h2 id="将TLS-认证文件拷贝至证书目录下"><a href="#将TLS-认证文件拷贝至证书目录下" class="headerlink" title="将TLS 认证文件拷贝至证书目录下"></a>将TLS 认证文件拷贝至证书目录下</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /etc/etcd/etcdSSL</span><br><span class="line">cp * /etc/etcd/etcdSSL</span><br><span class="line"></span><br><span class="line">[^_^]:</span><br><span class="line">     存在CA证书的路径&quot;/etc/etcd/etcdSSL&quot;是自定义的，看个人习惯创建即可。</span><br></pre></td></tr></table></figure><blockquote><p><img src="https://upload-images.jianshu.io/upload_images/13423234-3aad1bb15c95f532.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p></blockquote><hr><h2 id="Server81-安装etcd服务"><a href="#Server81-安装etcd服务" class="headerlink" title="Server81 安装etcd服务"></a>Server81 安装etcd服务</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y etcd</span><br></pre></td></tr></table></figure><blockquote><p><img src="https://upload-images.jianshu.io/upload_images/13423234-6b584d601c90e3a0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="yum安装etcd"></p></blockquote><hr><blockquote><p>配置 etcd 的 service文件（/usr/lib/systemd/system）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">root@server81 ~]# vim /usr/lib/systemd/system/etcd.service </span><br><span class="line"></span><br><span class="line">[Unit]</span><br><span class="line">Description=Etcd Server</span><br><span class="line">After=network.target</span><br><span class="line">After=network-online.target</span><br><span class="line">Wants=network-online.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=notify</span><br><span class="line">WorkingDirectory=/var/lib/etcd/</span><br><span class="line">EnvironmentFile=-/etc/etcd/etcd.conf</span><br><span class="line"># set GOMAXPROCS to number of processors</span><br><span class="line">ExecStart=/usr/bin/etcd \</span><br><span class="line">  --name $&#123;ETCD_NAME&#125; \</span><br><span class="line">  --cert-file=/etc/etcd/etcdSSL/etcd.pem \</span><br><span class="line">  --key-file=/etc/etcd/etcdSSL/etcd-key.pem \</span><br><span class="line">  --peer-cert-file=/etc/etcd/etcdSSL/etcd.pem \</span><br><span class="line">  --peer-key-file=/etc/etcd/etcdSSL/etcd-key.pem \</span><br><span class="line">  --trusted-ca-file=/etc/etcd/etcdSSL/ca.pem \</span><br><span class="line">  --peer-trusted-ca-file=/etc/etcd/etcdSSL/ca.pem \</span><br><span class="line">  --initial-advertise-peer-urls $&#123;ETCD_INITIAL_ADVERTISE_PEER_URLS&#125; \</span><br><span class="line">  --listen-peer-urls $&#123;ETCD_LISTEN_PEER_URLS&#125; \</span><br><span class="line">  --listen-client-urls $&#123;ETCD_LISTEN_CLIENT_URLS&#125;,http://127.0.0.1:2379 \</span><br><span class="line">  --advertise-client-urls $&#123;ETCD_ADVERTISE_CLIENT_URLS&#125; \</span><br><span class="line">  --initial-cluster-token $&#123;ETCD_INITIAL_CLUSTER_TOKEN&#125; \</span><br><span class="line">  --initial-cluster infra1=https://172.16.5.81:2380,infra2=https://172.16.5.86:2380,infra3=https://172.16.5.87:2380 \</span><br><span class="line">  --initial-cluster-state new \</span><br><span class="line">  --data-dir=$&#123;ETCD_DATA_DIR&#125;</span><br><span class="line"></span><br><span class="line">Restart=on-failure</span><br><span class="line">LimitNOFILE=65536</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p><img src="https://upload-images.jianshu.io/upload_images/13423234-8dd8d82fa829bec2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="在server81节点服务器，配置etcd的service文件"></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">参数说明：</span><br><span class="line">1、指定 etcd 的工作目录为 /var/lib/etcd，数据目录为 /var/lib/etcd，需在启动服务前创建这两个目录；</span><br><span class="line">在配置中的命令是这条：</span><br><span class="line">WorkingDirectory=/var/lib/etcd/</span><br><span class="line"></span><br><span class="line">2、为了保证通信安全，需要指定 etcd 的公私钥(cert-file和key-file)、Peers 通信的公私钥和 CA 证书(peer-cert-file、peer-key-file、peer-trusted-ca-file)、客户端的CA证书（trusted-ca-file）；</span><br><span class="line">在配置中添加etcd证书的命令是以下：</span><br><span class="line">  --cert-file=/etc/etcd/etcdSSL/etcd.pem \</span><br><span class="line">  --key-file=/etc/etcd/etcdSSL/etcd-key.pem \</span><br><span class="line">  --peer-cert-file=/etc/etcd/etcdSSL/etcd.pem \</span><br><span class="line">  --peer-key-file=/etc/etcd/etcdSSL/etcd-key.pem \</span><br><span class="line">  --trusted-ca-file=/etc/etcd/etcdSSL/ca.pem \</span><br><span class="line">  --peer-trusted-ca-file=/etc/etcd/etcdSSL/ca.pem \</span><br><span class="line"></span><br><span class="line">3、配置etcd的endpoint：</span><br><span class="line">--initial-cluster infra1=https://172.16.5.81:2380,infra2=https://172.16.5.86:2380,infra3=https://172.16.5.87:2380 \</span><br><span class="line"></span><br><span class="line">4、配置etcd的监听服务集群：</span><br><span class="line">  --initial-advertise-peer-urls $&#123;ETCD_INITIAL_ADVERTISE_PEER_URLS&#125; \</span><br><span class="line">  --listen-peer-urls $&#123;ETCD_LISTEN_PEER_URLS&#125; \</span><br><span class="line">  --listen-client-urls $&#123;ETCD_LISTEN_CLIENT_URLS&#125;,http://127.0.0.1:2379 \</span><br><span class="line">  --advertise-client-urls $&#123;ETCD_ADVERTISE_CLIENT_URLS&#125; \</span><br><span class="line"></span><br><span class="line">5、配置etcd创建的集群为新集群，则定义集群状态为new</span><br><span class="line">   --initial-cluster-state 值为 new</span><br><span class="line"></span><br><span class="line">6、定义etcd节点的名称，该名称等下从配置文件中获取：</span><br><span class="line">  --name $&#123;ETCD_NAME&#125; \ </span><br><span class="line">  其中配置文件：EnvironmentFile=-/etc/etcd/etcd.conf</span><br></pre></td></tr></table></figure><hr><blockquote><p>etcd的配置文件（/etc/etcd/etcd.conf）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@server81 ~]# vim /etc/etcd/etcd.conf</span><br><span class="line"></span><br><span class="line">#[member]</span><br><span class="line">ETCD_NAME=infra1</span><br><span class="line">ETCD_DATA_DIR=&quot;/var/lib/etcd&quot;</span><br><span class="line">ETCD_LISTEN_PEER_URLS=&quot;https://172.16.5.81:2380&quot;</span><br><span class="line">ETCD_LISTEN_CLIENT_URLS=&quot;https://172.16.5.81:2379&quot;</span><br><span class="line"></span><br><span class="line">#[cluster]</span><br><span class="line">ETCD_INITIAL_ADVERTISE_PEER_URLS=&quot;https://172.16.5.81:2380&quot;</span><br><span class="line">ETCD_INITIAL_CLUSTER_TOKEN=&quot;etcd-cluster&quot;</span><br><span class="line">ETCD_ADVERTISE_CLIENT_URLS=&quot;https://172.16.5.81:2379&quot;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p><img src="https://upload-images.jianshu.io/upload_images/13423234-586897b98ca0657e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="etcd节点的参数配置文件"></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这是172.16.5.81节点的配置，如果配置其他etcd节点只要将上面的IP地址改成相应节点的IP地址即可。</span><br></pre></td></tr></table></figure><hr><blockquote><p>启动 etcd 服务<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl start etcd</span><br><span class="line">systemctl status etcd</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p><img src="https://upload-images.jianshu.io/upload_images/13423234-b453fb849718267b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="启动server81的etcd服务"></p></blockquote><h5 id="到了这里基本etcd的证书以及Server81的etcd节点服务已经配置好了，下面就是快速部署配置一下Server86-87两台服务器的etcd证书以及服务。"><a href="#到了这里基本etcd的证书以及Server81的etcd节点服务已经配置好了，下面就是快速部署配置一下Server86-87两台服务器的etcd证书以及服务。" class="headerlink" title="到了这里基本etcd的证书以及Server81的etcd节点服务已经配置好了，下面就是快速部署配置一下Server86/87两台服务器的etcd证书以及服务。"></a><strong><em>到了这里基本etcd的证书以及Server81的etcd节点服务已经配置好了，下面就是快速部署配置一下Server86/87两台服务器的etcd证书以及服务。</em></strong></h5><hr><h2 id="Server86安装etcd服务"><a href="#Server86安装etcd服务" class="headerlink" title="Server86安装etcd服务"></a>Server86安装etcd服务</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y etcd</span><br></pre></td></tr></table></figure><blockquote><p><img src="https://upload-images.jianshu.io/upload_images/13423234-19c0950464b7cacf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="yum安装etcd"></p></blockquote><hr><blockquote><p>配置 etcd 的 service文件（/usr/lib/systemd/system）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">[root@server86 ~]# vim /usr/lib/systemd/system/etcd.service</span><br><span class="line"></span><br><span class="line">[Unit]</span><br><span class="line">Description=Etcd Server</span><br><span class="line">After=network.target</span><br><span class="line">After=network-online.target</span><br><span class="line">Wants=network-online.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=notify</span><br><span class="line">WorkingDirectory=/var/lib/etcd/</span><br><span class="line">EnvironmentFile=-/etc/etcd/etcd.conf</span><br><span class="line"># set GOMAXPROCS to number of processors</span><br><span class="line">ExecStart=/usr/bin/etcd \</span><br><span class="line">  --name $&#123;ETCD_NAME&#125; \</span><br><span class="line">  --cert-file=/etc/etcd/etcdSSL/etcd.pem \</span><br><span class="line">  --key-file=/etc/etcd/etcdSSL/etcd-key.pem \</span><br><span class="line">  --peer-cert-file=/etc/etcd/etcdSSL/etcd.pem \</span><br><span class="line">  --peer-key-file=/etc/etcd/etcdSSL/etcd-key.pem \</span><br><span class="line">  --trusted-ca-file=/etc/etcd/etcdSSL/ca.pem \</span><br><span class="line">  --peer-trusted-ca-file=/etc/etcd/etcdSSL/ca.pem \</span><br><span class="line">  --initial-advertise-peer-urls $&#123;ETCD_INITIAL_ADVERTISE_PEER_URLS&#125; \</span><br><span class="line">  --listen-peer-urls $&#123;ETCD_LISTEN_PEER_URLS&#125; \</span><br><span class="line">  --listen-client-urls $&#123;ETCD_LISTEN_CLIENT_URLS&#125;,http://127.0.0.1:2379 \</span><br><span class="line">  --advertise-client-urls $&#123;ETCD_ADVERTISE_CLIENT_URLS&#125; \</span><br><span class="line">  --initial-cluster-token $&#123;ETCD_INITIAL_CLUSTER_TOKEN&#125; \</span><br><span class="line">  --initial-cluster infra1=https://172.16.5.81:2380,infra2=https://172.16.5.86:2380,infra3=https://172.16.5.87:2380 \</span><br><span class="line">  --initial-cluster-state new \</span><br><span class="line">  --data-dir=$&#123;ETCD_DATA_DIR&#125;</span><br><span class="line"></span><br><span class="line">Restart=on-failure</span><br><span class="line">LimitNOFILE=65536</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p><img src="https://upload-images.jianshu.io/upload_images/13423234-a4ea3a938fb9b6d5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p></blockquote><hr><blockquote><p>etcd的配置文件（/etc/etcd/etcd.conf）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@server86 ~]# vim /etc/etcd/etcd.conf</span><br><span class="line"></span><br><span class="line">#[member]</span><br><span class="line">ETCD_NAME=infra2</span><br><span class="line">ETCD_DATA_DIR=&quot;/var/lib/etcd&quot;</span><br><span class="line">ETCD_LISTEN_PEER_URLS=&quot;https://172.16.5.86:2380&quot;</span><br><span class="line">ETCD_LISTEN_CLIENT_URLS=&quot;https://172.16.5.86:2379&quot;</span><br><span class="line"></span><br><span class="line">#[cluster]</span><br><span class="line">ETCD_INITIAL_ADVERTISE_PEER_URLS=&quot;https://172.16.5.86:2380&quot;</span><br><span class="line">ETCD_INITIAL_CLUSTER_TOKEN=&quot;etcd-cluster&quot;</span><br><span class="line">ETCD_ADVERTISE_CLIENT_URLS=&quot;https://172.16.5.86:2379&quot;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p><img src="https://upload-images.jianshu.io/upload_images/13423234-36f2918d61d9757c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="etcd节点的参数配置文件"></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">这是172.16.5.86节点的配置，如果配置其他etcd节点只要将上面的IP地址改成相应节点的IP地址即可。</span><br><span class="line">还要将ETCD_NAME改一下名称。</span><br></pre></td></tr></table></figure><hr><blockquote><p>从Server81服务器拷贝etcd的TLS证书文件至Server86服务器<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[root@server81 etc]# cd etcd/</span><br><span class="line">[root@server81 etcd]# ls</span><br><span class="line">etcd.conf  etcdSSL</span><br><span class="line">[root@server81 etcd]# </span><br><span class="line">[root@server81 etcd]# pwd</span><br><span class="line">/etc/etcd</span><br><span class="line">[root@server81 etcd]# </span><br><span class="line">[root@server81 etcd]# scp -r etcdSSL root@server86:/etc/etcd</span><br><span class="line">ca-config.json                                 100%  288    82.3KB/s   00:00    </span><br><span class="line">ca.csr                                         100%  997   283.1KB/s   00:00    </span><br><span class="line">ca-csr.json                                    100%  205    60.5KB/s   00:00    </span><br><span class="line">ca-key.pem                                     100% 1675   395.4KB/s   00:00    </span><br><span class="line">ca.pem                                         100% 1350   356.7KB/s   00:00    </span><br><span class="line">etcd.csr                                       100% 1066    50.8KB/s   00:00    </span><br><span class="line">etcd-csr.json                                  100%  296    40.1KB/s   00:00    </span><br><span class="line">etcd-key.pem                                   100% 1675   356.8KB/s   00:00    </span><br><span class="line">etcd.pem                                       100% 1436   341.3KB/s   00:00    </span><br><span class="line">[root@server81 etcd]#</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p><img src="https://upload-images.jianshu.io/upload_images/13423234-97e26dfea31794b9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p></blockquote><hr><blockquote><p>启动 etcd 服务<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl start etcd</span><br><span class="line">systemctl status etcd</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p><img src="https://upload-images.jianshu.io/upload_images/13423234-ec43160180cb565d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="启动server86的etcd服务"></p></blockquote><hr><h2 id="Server87安装etcd服务"><a href="#Server87安装etcd服务" class="headerlink" title="Server87安装etcd服务"></a>Server87安装etcd服务</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y etcd</span><br></pre></td></tr></table></figure><blockquote><p><img src="https://upload-images.jianshu.io/upload_images/13423234-3e78cd9d068ad0df.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="yum安装etcd"></p></blockquote><hr><blockquote><p>配置 etcd 的 service文件（/usr/lib/systemd/system）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">[root@server87 ~]# vim /usr/lib/systemd/system/etcd.service</span><br><span class="line"></span><br><span class="line">[Unit]</span><br><span class="line">Description=Etcd Server</span><br><span class="line">After=network.target</span><br><span class="line">After=network-online.target</span><br><span class="line">Wants=network-online.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=notify</span><br><span class="line">WorkingDirectory=/var/lib/etcd/</span><br><span class="line">EnvironmentFile=-/etc/etcd/etcd.conf</span><br><span class="line"># set GOMAXPROCS to number of processors</span><br><span class="line">ExecStart=/usr/bin/etcd \</span><br><span class="line">  --name $&#123;ETCD_NAME&#125; \</span><br><span class="line">  --cert-file=/etc/etcd/etcdSSL/etcd.pem \</span><br><span class="line">  --key-file=/etc/etcd/etcdSSL/etcd-key.pem \</span><br><span class="line">  --peer-cert-file=/etc/etcd/etcdSSL/etcd.pem \</span><br><span class="line">  --peer-key-file=/etc/etcd/etcdSSL/etcd-key.pem \</span><br><span class="line">  --trusted-ca-file=/etc/etcd/etcdSSL/ca.pem \</span><br><span class="line">  --peer-trusted-ca-file=/etc/etcd/etcdSSL/ca.pem \</span><br><span class="line">  --initial-advertise-peer-urls $&#123;ETCD_INITIAL_ADVERTISE_PEER_URLS&#125; \</span><br><span class="line">  --listen-peer-urls $&#123;ETCD_LISTEN_PEER_URLS&#125; \</span><br><span class="line">  --listen-client-urls $&#123;ETCD_LISTEN_CLIENT_URLS&#125;,http://127.0.0.1:2379 \</span><br><span class="line">  --advertise-client-urls $&#123;ETCD_ADVERTISE_CLIENT_URLS&#125; \</span><br><span class="line">  --initial-cluster-token $&#123;ETCD_INITIAL_CLUSTER_TOKEN&#125; \</span><br><span class="line">  --initial-cluster infra1=https://172.16.5.81:2380,infra2=https://172.16.5.86:2380,infra3=https://172.16.5.87:2380 \</span><br><span class="line">  --initial-cluster-state new \</span><br><span class="line">  --data-dir=$&#123;ETCD_DATA_DIR&#125;</span><br><span class="line"></span><br><span class="line">Restart=on-failure</span><br><span class="line">LimitNOFILE=65536</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p><img src="https://upload-images.jianshu.io/upload_images/13423234-0a6ac58e1149ba86.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p></blockquote><hr><blockquote><p>etcd的配置文件（/etc/etcd/etcd.conf）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@server87 ~]# vim /etc/etcd/etcd.conf</span><br><span class="line"></span><br><span class="line">#[member]</span><br><span class="line">ETCD_NAME=infra3</span><br><span class="line">ETCD_DATA_DIR=&quot;/var/lib/etcd&quot;</span><br><span class="line">ETCD_LISTEN_PEER_URLS=&quot;https://172.16.5.87:2380&quot;</span><br><span class="line">ETCD_LISTEN_CLIENT_URLS=&quot;https://172.16.5.87:2379&quot;</span><br><span class="line"></span><br><span class="line">#[cluster]</span><br><span class="line">ETCD_INITIAL_ADVERTISE_PEER_URLS=&quot;https://172.16.5.87:2380&quot;</span><br><span class="line">ETCD_INITIAL_CLUSTER_TOKEN=&quot;etcd-cluster&quot;</span><br><span class="line">ETCD_ADVERTISE_CLIENT_URLS=&quot;https://172.16.5.87:2379&quot;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p><img src="https://upload-images.jianshu.io/upload_images/13423234-673f01aab53a3c50.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="etcd节点的参数配置文件"></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">这是172.16.5.87节点的配置，如果配置其他etcd节点只要将上面的IP地址改成相应节点的IP地址即可。</span><br><span class="line">还要将ETCD_NAME改一下名称。</span><br></pre></td></tr></table></figure><hr><blockquote><p>从Server81服务器拷贝etcd的TLS证书文件至Server87服务器<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@server81 etcd]# scp -r etcdSSL root@server87:/etc/etcd</span><br><span class="line">ca-config.json                                          100%  288   109.8KB/s   00:00    </span><br><span class="line">ca.csr                                                  100%  997   417.5KB/s   00:00    </span><br><span class="line">ca-csr.json                                             100%  205    79.4KB/s   00:00    </span><br><span class="line">ca-key.pem                                              100% 1675   575.7KB/s   00:00    </span><br><span class="line">ca.pem                                                  100% 1350   485.5KB/s   00:00    </span><br><span class="line">etcd.csr                                                100% 1066   289.0KB/s   00:00    </span><br><span class="line">etcd-csr.json                                           100%  296   120.7KB/s   00:00    </span><br><span class="line">etcd-key.pem                                            100% 1675   601.9KB/s   00:00    </span><br><span class="line">etcd.pem                                                100% 1436   104.4KB/s   00:00    </span><br><span class="line">[root@server81 etcd]#</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p><img src="https://upload-images.jianshu.io/upload_images/13423234-1956610070a8f5eb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p></blockquote><hr><blockquote><p>启动 etcd 服务<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl start etcd</span><br><span class="line">systemctl status etcd</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p><img src="https://upload-images.jianshu.io/upload_images/13423234-57af0fa755e02590.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="启动server87的etcd服务"></p></blockquote><hr><h2 id="最后回到server81服务器，检查一下etcd集群是否正常"><a href="#最后回到server81服务器，检查一下etcd集群是否正常" class="headerlink" title="最后回到server81服务器，检查一下etcd集群是否正常"></a>最后回到server81服务器，检查一下etcd集群是否正常</h2><blockquote><p>检查刚才启动etcd失败的Server81的节点<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[root@server81 etcd]# service etcd status</span><br><span class="line">Redirecting to /bin/systemctl status etcd.service</span><br><span class="line">● etcd.service - Etcd Server</span><br><span class="line">   Loaded: loaded (/usr/lib/systemd/system/etcd.service; disabled; vendor preset: disabled)</span><br><span class="line">   Active: active (running) since Tue 2018-08-14 16:44:46 HKT; 10min ago</span><br><span class="line"> Main PID: 13905 (etcd)</span><br><span class="line">   CGroup: /system.slice/etcd.service</span><br><span class="line">           └─13905 /usr/bin/etcd --name infra1 --cert-file=/etc/etcd/etcdSSL/etcd.pem --key-file=/etc/etcd/etcdSSL/etcd-key.pem --peer-cert-file=/etc/etcd/etcdSSL/etcd.pem </span><br><span class="line"></span><br><span class="line">Aug 14 16:54:14 server81 etcd[13905]: established a TCP streaming connection with peer 9281d0058fa51de0 (stream Message writer)</span><br><span class="line">Aug 14 16:54:14 server81 etcd[13905]: established a TCP streaming connection with peer 9281d0058fa51de0 (stream MsgApp v2 writer)</span><br><span class="line">Aug 14 16:54:14 server81 etcd[13905]: health check for peer 9281d0058fa51de0 could not connect: dial tcp 172.16.5.87:2380: getsockopt: connection refused</span><br><span class="line">Aug 14 16:54:15 server81 etcd[13905]: updating the cluster version from 3.0 to 3.2</span><br><span class="line">Aug 14 16:54:15 server81 etcd[13905]: updated the cluster version from 3.0 to 3.2</span><br><span class="line">Aug 14 16:54:15 server81 etcd[13905]: enabled capabilities for version 3.2</span><br><span class="line">Aug 14 16:54:20 server81 etcd[13905]: 8da195f9b25012c9 [term: 1972] received a MsgApp message with higher term from 9281d0058fa51de0 [term: 1973]</span><br><span class="line">Aug 14 16:54:20 server81 etcd[13905]: 8da195f9b25012c9 became follower at term 1973</span><br><span class="line">Aug 14 16:54:20 server81 etcd[13905]: raft.node: 8da195f9b25012c9 changed leader from 8da195f9b25012c9 to 9281d0058fa51de0 at term 1973</span><br><span class="line">Aug 14 16:54:20 server81 etcd[13905]: 8da195f9b25012c9 [logterm: 1973, index: 13, vote: 0] rejected MsgVote from 9281d0058fa51de0 [logterm: 1972, index: 12] at term 1973</span><br><span class="line">[root@server81 etcd]#</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p><img src="https://upload-images.jianshu.io/upload_images/13423234-736b0db7cce77595.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Server81在安装了Server86/87节点后，服务已自动正常"></p></blockquote><blockquote><p>检查etcd集群服务的健康<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">etcdctl \</span><br><span class="line">  --ca-file=/etc/etcd/etcdSSL/ca.pem \</span><br><span class="line">  --cert-file=/etc/etcd/etcdSSL/etcd.pem \</span><br><span class="line">  --key-file=/etc/etcd/etcdSSL/etcd-key.pem \</span><br><span class="line">  cluster-health</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p><img src="https://upload-images.jianshu.io/upload_images/13423234-b6bc5bb0af027695.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p></blockquote><hr><h2 id="最后的总结"><a href="#最后的总结" class="headerlink" title="最后的总结"></a>最后的总结</h2><blockquote><p><strong><em>从上面的流程对于新手基本都是可以复制黏贴就可以完成的了。但是为了能够快速执行etcd集群一键部署，我在后面写好了离线etcd三台的自动化集群部署脚本，如下图所示：</em></strong><br><img src="https://upload-images.jianshu.io/upload_images/13423234-4e164693f0bf42ca.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br><img src="https://upload-images.jianshu.io/upload_images/13423234-ded5b2a13d10c903.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p></blockquote><hr><h2 id="在这里已经部署好etcd集群服务了，那么在此基础上，我们下一篇章就开始部署kubernetes的服务部署了。"><a href="#在这里已经部署好etcd集群服务了，那么在此基础上，我们下一篇章就开始部署kubernetes的服务部署了。" class="headerlink" title="在这里已经部署好etcd集群服务了，那么在此基础上，我们下一篇章就开始部署kubernetes的服务部署了。"></a>在这里已经部署好etcd集群服务了，那么在此基础上，我们下一篇章就开始部署kubernetes的服务部署了。</h2><blockquote><p>如果你想要看我写的总体系列文章目录介绍，可以点击<a href="https://www.jianshu.com/p/4a9c06ea570b" target="_blank" rel="noopener">kuberntes以及运维开发文章目录介绍</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;#原创内容，转载请注明出处&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;博主地址：&lt;a href=&quot;https://aronligithub.github.io/&quot;&gt;https://aronligithub.github.io/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;在经过上一篇章关于&lt;a href=&quot;https://www.jianshu.com/p/0fc3c5e78eff&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;etcd单台部署，启用https以及ca自签名&lt;/a&gt;,这个篇章就是介绍以及演示三台etcd部署以及使用CFSSL来生成CA证书&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/13423234-cc71b29110c4dfdd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/13423234-869e0c6cafd7cb22.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="运维开发系列" scheme="https://aronligithub.github.io/categories/%E8%BF%90%E7%BB%B4%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="kubernetes系列" scheme="https://aronligithub.github.io/tags/kubernetes%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>etcd单台部署，启用https以及ca自签名</title>
    <link href="https://aronligithub.github.io/2018/08/13/etcd%E5%8D%95%E5%8F%B0%E9%83%A8%E7%BD%B2%EF%BC%8C%E5%90%AF%E7%94%A8https%E4%BB%A5%E5%8F%8Aca%E8%87%AA%E7%AD%BE%E5%90%8D/"/>
    <id>https://aronligithub.github.io/2018/08/13/etcd单台部署，启用https以及ca自签名/</id>
    <published>2018-08-12T16:48:22.000Z</published>
    <updated>2018-08-13T04:39:49.610Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>#原创内容，转载请注明出处</p></blockquote><p>博主地址：<a href="https://aronligithub.github.io/">https://aronligithub.github.io/</a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p><strong><em>在经过上一篇章关于<a href="https://www.jianshu.com/p/e52f9204b7a9" target="_blank" rel="noopener">etcd相关技术概述的铺垫</a>,这个篇章就是介绍以及演示单台etcd部署以及使用CFSSL来生成CA证书</em></strong><br><img src="https://upload-images.jianshu.io/upload_images/13423234-cc71b29110c4dfdd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br><img src="https://upload-images.jianshu.io/upload_images/13423234-869e0c6cafd7cb22.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p></blockquote><a id="more"></a><h2 id="环境要求"><a href="#环境要求" class="headerlink" title="环境要求"></a>环境要求</h2><blockquote><p>1、一台安装centos7的服务器<br>   2、具备访问互联网</p></blockquote><h2 id="3、关闭服务器的防火墙以及selinux"><a href="#3、关闭服务器的防火墙以及selinux" class="headerlink" title="   3、关闭服务器的防火墙以及selinux"></a>   3、关闭服务器的防火墙以及selinux</h2><h2 id="CFSSL工具的安装"><a href="#CFSSL工具的安装" class="headerlink" title="CFSSL工具的安装"></a>CFSSL工具的安装</h2><blockquote><p>下载CFSSL的可执行二进制文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wget https://pkg.cfssl.org/R1.2/cfssl_linux-amd64 </span><br><span class="line">wget https://pkg.cfssl.org/R1.2/cfssljson_linux-amd64 </span><br><span class="line">wget https://pkg.cfssl.org/R1.2/cfssl-certinfo_linux-amd64</span><br><span class="line">chmod +x cfssl*</span><br></pre></td></tr></table></figure></p></blockquote><h4 id="下载执行过程截图如下"><a href="#下载执行过程截图如下" class="headerlink" title="下载执行过程截图如下"></a>下载执行过程截图如下</h4><blockquote><p><img src="https://upload-images.jianshu.io/upload_images/13423234-0417209515272faf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="安装wget工具"><br><img src="https://upload-images.jianshu.io/upload_images/13423234-a468ec85ee2a0361.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="下载文件的过程"></p></blockquote><h2 id=""><a href="#" class="headerlink" title=""></a><img src="https://upload-images.jianshu.io/upload_images/13423234-4f2f93fec52331c1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="给文件添加执行权限"></h2><blockquote><p>将这三个二进制可执行文件，修改名称复制到/usr/local/bin/下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cp -v cfssl_linux-amd64 /usr/local/bin/cfssl</span><br><span class="line">cp -v cfssljson_linux-amd64 /usr/local/bin/cfssljson</span><br><span class="line">cp -v cfssl-certinfo_linux-amd64 /usr/local/bin/cfssl-certinfo</span><br><span class="line">ls /usr/local/bin/cfssl*</span><br></pre></td></tr></table></figure></p></blockquote><h4 id="下载执行过程截图如下-1"><a href="#下载执行过程截图如下-1" class="headerlink" title="下载执行过程截图如下"></a>下载执行过程截图如下</h4><blockquote><p><img src="https://upload-images.jianshu.io/upload_images/13423234-a40624bce96e4c26.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="复制可执行文件至指定目录"></p></blockquote><hr><h2 id="使用CFSSL创建CA证书以及etcd的TLS认证证书"><a href="#使用CFSSL创建CA证书以及etcd的TLS认证证书" class="headerlink" title="使用CFSSL创建CA证书以及etcd的TLS认证证书"></a>使用CFSSL创建CA证书以及etcd的TLS认证证书</h2><blockquote><p>创建 CA (Certificate Authority)</p></blockquote><hr><blockquote><p>   创建 CA 配置文件（ca-config.json）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[root@server81 cfssl]# vim ca-config.json</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;signing&quot;: &#123;</span><br><span class="line">    &quot;default&quot;: &#123;</span><br><span class="line">      &quot;expiry&quot;: &quot;876000h&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;profiles&quot;: &#123;</span><br><span class="line">      &quot;etcd&quot;: &#123;</span><br><span class="line">        &quot;usages&quot;: [</span><br><span class="line">            &quot;signing&quot;,</span><br><span class="line">            &quot;key encipherment&quot;,</span><br><span class="line">            &quot;server auth&quot;,</span><br><span class="line">            &quot;client auth&quot;</span><br><span class="line">        ],</span><br><span class="line">        &quot;expiry&quot;: &quot;876000h&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p><img src="https://upload-images.jianshu.io/upload_images/13423234-3cc0b489b3e70106.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="创建CA配置文件"></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&quot;字段说明&quot;</span><br><span class="line">&quot;ca-config.json&quot;：可以定义多个 profiles，分别指定不同的过期时间、使用场景等参数；后续在签名证书时使用某个 profile；</span><br><span class="line">&quot;signing&quot;：表示该证书可用于签名其它证书；生成的 ca.pem 证书中 CA=TRUE；</span><br><span class="line">&quot;server auth&quot;：表示client可以用该 CA 对server提供的证书进行验证；</span><br><span class="line">&quot;client auth&quot;：表示server可以用该CA对client提供的证书进行验证；</span><br></pre></td></tr></table></figure><hr><blockquote><h4 id="创建-CA-证书签名请求（ca-csr-json）"><a href="#创建-CA-证书签名请求（ca-csr-json）" class="headerlink" title="创建 CA 证书签名请求（ca-csr.json）"></a>创建 CA 证书签名请求（ca-csr.json）</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[root@server81 cfssl]# vim ca-csr.json</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;CN&quot;: &quot;etcd&quot;,</span><br><span class="line">  &quot;key&quot;: &#123;</span><br><span class="line">    &quot;algo&quot;: &quot;rsa&quot;,</span><br><span class="line">    &quot;size&quot;: 2048</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;names&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;C&quot;: &quot;CN&quot;,</span><br><span class="line">      &quot;ST&quot;: &quot;shenzhen&quot;,</span><br><span class="line">      &quot;L&quot;: &quot;shenzhen&quot;,</span><br><span class="line">      &quot;O&quot;: &quot;etcd&quot;,</span><br><span class="line">      &quot;OU&quot;: &quot;System&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p><img src="https://upload-images.jianshu.io/upload_images/13423234-360e39eb81e9b3c7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="创建CA签名请求"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot;CN&quot;：Common Name，etcd 从证书中提取该字段作为请求的用户名 (User Name)；浏览器使用该字段验证网站是否合法；</span><br><span class="line">&quot;O&quot;：Organization，etcd 从证书中提取该字段作为请求用户所属的组 (Group)；</span><br><span class="line">这两个参数在后面的kubernetes启用RBAC模式中很重要，因为需要设置kubelet、admin等角色权限，那么在配置证书的时候就必须配置对了，具体后面在部署kubernetes的时候会进行讲解。</span><br><span class="line">&quot;在etcd这两个参数没太大的重要意义，跟着配置就好。&quot;</span><br></pre></td></tr></table></figure></p></blockquote><hr><blockquote><h4 id="生成-CA-证书和私钥"><a href="#生成-CA-证书和私钥" class="headerlink" title="生成 CA 证书和私钥"></a>生成 CA 证书和私钥</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cfssl gencert -initca ca-csr.json | cfssljson -bare ca</span><br></pre></td></tr></table></figure></blockquote><blockquote><p><img src="https://upload-images.jianshu.io/upload_images/13423234-d1e08a8f47b6df94.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="ca根证书的生成过程"></p></blockquote><hr><h2 id="创建etcd的TLS认证证书"><a href="#创建etcd的TLS认证证书" class="headerlink" title="创建etcd的TLS认证证书"></a>创建etcd的TLS认证证书</h2><blockquote><p>创建 etcd证书签名请求（etcd-csr.json）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[root@server81 cfssl]# vim etcd-csr.json</span><br><span class="line">&#123;</span><br><span class="line">  &quot;CN&quot;: &quot;etcd&quot;,</span><br><span class="line">  &quot;hosts&quot;: [</span><br><span class="line">    &quot;127.0.0.1&quot;,</span><br><span class="line">    &quot;172.16.5.81&quot;</span><br><span class="line">  ],</span><br><span class="line">  &quot;key&quot;: &#123;</span><br><span class="line">    &quot;algo&quot;: &quot;rsa&quot;,</span><br><span class="line">    &quot;size&quot;: 2048</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;names&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;C&quot;: &quot;CN&quot;,</span><br><span class="line">      &quot;ST&quot;: &quot;shenzhen&quot;,</span><br><span class="line">      &quot;L&quot;: &quot;shenzhen&quot;,</span><br><span class="line">      &quot;O&quot;: &quot;etcd&quot;,</span><br><span class="line">      &quot;OU&quot;: &quot;System&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p><img src="https://upload-images.jianshu.io/upload_images/13423234-ab797365fdb833ab.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="创建etcd证书签名请求"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[^_^]:</span><br><span class="line">       如果 hosts 字段不为空则需要指定授权使用该证书的 IP 或域名列表，由于该证书后续被 etcd 集群使用，所以填写IP即可。</span><br><span class="line">[&gt;_&lt;]:</span><br><span class="line">       因为本次部署etcd是单台，那么则需要填写单台的IP地址即可。</span><br></pre></td></tr></table></figure></p></blockquote><hr><blockquote><p>生成 etcd证书和私钥<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@server81 cfssl]# cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=etcd etcd-csr.json | cfssljson -bare etcd</span><br><span class="line">[root@server81 cfssl]# ls etcd*</span><br><span class="line">etcd.csr  etcd-csr.json  etcd-key.pem  etcd.pem</span><br><span class="line">[root@server81 cfssl]#</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p><img src="https://upload-images.jianshu.io/upload_images/13423234-e07f2d7581b666bb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="生成etcd证书以及私钥"></p></blockquote><hr><h2 id="将TLS-认证文件拷贝至证书目录下"><a href="#将TLS-认证文件拷贝至证书目录下" class="headerlink" title="将TLS 认证文件拷贝至证书目录下"></a>将TLS 认证文件拷贝至证书目录下</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /etc/etcd/etcdSSL</span><br><span class="line">cp * /etc/etcd/etcdSSL</span><br><span class="line"></span><br><span class="line">[^_^]:</span><br><span class="line">     存在CA证书的路径&quot;/etc/etcd/etcdSSL&quot;是自定义的，看个人习惯创建即可。</span><br></pre></td></tr></table></figure><blockquote><p><img src="https://upload-images.jianshu.io/upload_images/13423234-92a0162b5eb1258a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p></blockquote><hr><h2 id="安装etcd服务"><a href="#安装etcd服务" class="headerlink" title="安装etcd服务"></a>安装etcd服务</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y etcd</span><br></pre></td></tr></table></figure><blockquote><p><img src="https://upload-images.jianshu.io/upload_images/13423234-6777bf5c0d01c714.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="yum安装etcd"></p></blockquote><hr><blockquote><p>配置 etcd 的 service文件（/usr/lib/systemd/system）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">[root@server81 cfssl]# vim /usr/lib/systemd/system/etcd.service </span><br><span class="line"></span><br><span class="line">[Unit]</span><br><span class="line">Description=Etcd Server</span><br><span class="line">After=network.target</span><br><span class="line">After=network-online.target</span><br><span class="line">Wants=network-online.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=notify</span><br><span class="line">WorkingDirectory=/var/lib/etcd/</span><br><span class="line">EnvironmentFile=-/etc/etcd/etcd.conf</span><br><span class="line"># set GOMAXPROCS to number of processors</span><br><span class="line">ExecStart=/usr/bin/etcd \</span><br><span class="line">  --name $&#123;ETCD_NAME&#125; \</span><br><span class="line">  --cert-file=/etc/etcd/etcdSSL/etcd.pem \</span><br><span class="line">  --key-file=/etc/etcd/etcdSSL/etcd-key.pem \</span><br><span class="line">  --peer-cert-file=/etc/etcd/etcdSSL/etcd.pem \</span><br><span class="line">  --peer-key-file=/etc/etcd/etcdSSL/etcd-key.pem \</span><br><span class="line">  --trusted-ca-file=/etc/etcd/etcdSSL/ca.pem \</span><br><span class="line">  --peer-trusted-ca-file=/etc/etcd/etcdSSL/ca.pem \</span><br><span class="line">  --initial-advertise-peer-urls $&#123;ETCD_INITIAL_ADVERTISE_PEER_URLS&#125; \</span><br><span class="line">  --listen-peer-urls $&#123;ETCD_LISTEN_PEER_URLS&#125; \</span><br><span class="line">  --listen-client-urls $&#123;ETCD_LISTEN_CLIENT_URLS&#125;,http://127.0.0.1:2379 \</span><br><span class="line">  --advertise-client-urls $&#123;ETCD_ADVERTISE_CLIENT_URLS&#125; \</span><br><span class="line">  --initial-cluster-token $&#123;ETCD_INITIAL_CLUSTER_TOKEN&#125; \</span><br><span class="line">  --initial-cluster infra1=https://172.16.5.81:2380 \</span><br><span class="line">  --initial-cluster-state new \</span><br><span class="line">  --data-dir=$&#123;ETCD_DATA_DIR&#125;</span><br><span class="line"></span><br><span class="line">Restart=on-failure</span><br><span class="line">LimitNOFILE=65536</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p><img src="https://upload-images.jianshu.io/upload_images/13423234-0095d1ace42b3f54.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="配置etcd的service文件"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">参数说明：</span><br><span class="line">1、指定 etcd 的工作目录为 /var/lib/etcd，数据目录为 /var/lib/etcd，需在启动服务前创建这两个目录；</span><br><span class="line">在配置中的命令是这条：</span><br><span class="line">WorkingDirectory=/var/lib/etcd/</span><br><span class="line"></span><br><span class="line">2、为了保证通信安全，需要指定 etcd 的公私钥(cert-file和key-file)、Peers 通信的公私钥和 CA 证书(peer-cert-file、peer-key-file、peer-trusted-ca-file)、客户端的CA证书（trusted-ca-file）；</span><br><span class="line">在配置中添加etcd证书的命令是以下：</span><br><span class="line">  --cert-file=/etc/etcd/etcdSSL/etcd.pem \</span><br><span class="line">  --key-file=/etc/etcd/etcdSSL/etcd-key.pem \</span><br><span class="line">  --peer-cert-file=/etc/etcd/etcdSSL/etcd.pem \</span><br><span class="line">  --peer-key-file=/etc/etcd/etcdSSL/etcd-key.pem \</span><br><span class="line">  --trusted-ca-file=/etc/etcd/etcdSSL/ca.pem \</span><br><span class="line">  --peer-trusted-ca-file=/etc/etcd/etcdSSL/ca.pem \</span><br><span class="line"></span><br><span class="line">3、配置etcd的endpoint：</span><br><span class="line">  --initial-cluster infra1=https://172.16.5.81:2380 \</span><br><span class="line"></span><br><span class="line">4、配置etcd的监听服务集群：</span><br><span class="line">  --initial-advertise-peer-urls $&#123;ETCD_INITIAL_ADVERTISE_PEER_URLS&#125; \</span><br><span class="line">  --listen-peer-urls $&#123;ETCD_LISTEN_PEER_URLS&#125; \</span><br><span class="line">  --listen-client-urls $&#123;ETCD_LISTEN_CLIENT_URLS&#125;,http://127.0.0.1:2379 \</span><br><span class="line">  --advertise-client-urls $&#123;ETCD_ADVERTISE_CLIENT_URLS&#125; \</span><br><span class="line"></span><br><span class="line">5、配置etcd创建的集群为新集群，则定义集群状态为new</span><br><span class="line">   --initial-cluster-state 值为 new</span><br><span class="line"></span><br><span class="line">6、定义etcd节点的名称，该名称等下从配置文件中获取：</span><br><span class="line">  --name $&#123;ETCD_NAME&#125; \ </span><br><span class="line">  其中配置文件：EnvironmentFile=-/etc/etcd/etcd.conf</span><br></pre></td></tr></table></figure></p></blockquote><hr><blockquote><p>etcd的配置文件（/etc/etcd/etcd.conf）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@server81 cfssl]# vim /etc/etcd/etcd.conf</span><br><span class="line"></span><br><span class="line">#[member]</span><br><span class="line">ETCD_NAME=infra1</span><br><span class="line">ETCD_DATA_DIR=&quot;/var/lib/etcd&quot;</span><br><span class="line">ETCD_LISTEN_PEER_URLS=&quot;https://172.16.5.81:2380&quot;</span><br><span class="line">ETCD_LISTEN_CLIENT_URLS=&quot;https://172.16.5.81:2379&quot;</span><br><span class="line"></span><br><span class="line">#[cluster]</span><br><span class="line">ETCD_INITIAL_ADVERTISE_PEER_URLS=&quot;https://172.16.5.81:2380&quot;</span><br><span class="line">ETCD_INITIAL_CLUSTER_TOKEN=&quot;etcd-cluster&quot;</span><br><span class="line">ETCD_ADVERTISE_CLIENT_URLS=&quot;https://172.16.5.81:2379&quot;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p><img src="https://upload-images.jianshu.io/upload_images/13423234-8f2659d2a2e22804.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="etcd节点的参数配置文件"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这是172.16.5.81节点的配置，如果配置其他etcd节点只要将上面的IP地址改成相应节点的IP地址即可。</span><br></pre></td></tr></table></figure></p></blockquote><hr><blockquote><p>启动 etcd 服务<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl start etcd</span><br><span class="line">systemctl status etcd</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p><img src="https://upload-images.jianshu.io/upload_images/13423234-1cb20dfab0366681.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="启动etcd服务"></p></blockquote><hr><blockquote><p>验证服务<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">etcdctl \</span><br><span class="line">  --ca-file=/etc/etcd/etcdSSL/ca.pem \</span><br><span class="line">  --cert-file=/etc/etcd/etcdSSL/etcd.pem \</span><br><span class="line">  --key-file=/etc/etcd/etcdSSL/etcd-key.pem \</span><br><span class="line">  cluster-health</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p><img src="https://upload-images.jianshu.io/upload_images/13423234-f307491c8fd51946.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="检查etcd集群健康状态"></p></blockquote><hr><h2 id="最后的总结"><a href="#最后的总结" class="headerlink" title="最后的总结"></a>最后的总结</h2><blockquote><p><strong><em>从上面的流程对于新手基本都是可以复制黏贴就可以完成的了，那么对于需要提升的朋友，在以后的篇章我会逐个加入自动化部署的写法说明，已写完的自动化部署如下图所示：</em></strong><br><img src="https://upload-images.jianshu.io/upload_images/13423234-9d38f7cd2472631e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="自动化部署脚本展示"></p></blockquote><hr><h2 id="下一个篇章则是写三台etcd的部署集群了，过程基本差不多，不过也写给朋友们看看吧。"><a href="#下一个篇章则是写三台etcd的部署集群了，过程基本差不多，不过也写给朋友们看看吧。" class="headerlink" title="下一个篇章则是写三台etcd的部署集群了，过程基本差不多，不过也写给朋友们看看吧。"></a>下一个篇章则是写三台etcd的部署集群了，过程基本差不多，不过也写给朋友们看看吧。</h2><blockquote><p>如果你想要看我写的总体系列文章目录介绍，可以点击<a href="https://www.jianshu.com/p/4a9c06ea570b" target="_blank" rel="noopener">kuberntes以及运维开发文章目录介绍</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;#原创内容，转载请注明出处&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;博主地址：&lt;a href=&quot;https://aronligithub.github.io/&quot;&gt;https://aronligithub.github.io/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;在经过上一篇章关于&lt;a href=&quot;https://www.jianshu.com/p/e52f9204b7a9&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;etcd相关技术概述的铺垫&lt;/a&gt;,这个篇章就是介绍以及演示单台etcd部署以及使用CFSSL来生成CA证书&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/13423234-cc71b29110c4dfdd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/13423234-869e0c6cafd7cb22.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="运维开发系列" scheme="https://aronligithub.github.io/categories/%E8%BF%90%E7%BB%B4%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="kubernetes系列" scheme="https://aronligithub.github.io/tags/kubernetes%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>etcd原理以及基本技术概述铺垫</title>
    <link href="https://aronligithub.github.io/2018/08/12/etcd%E5%8E%9F%E7%90%86%E4%BB%A5%E5%8F%8A%E5%9F%BA%E6%9C%AC%E6%8A%80%E6%9C%AF%E6%A6%82%E8%BF%B0%E9%93%BA%E5%9E%AB/"/>
    <id>https://aronligithub.github.io/2018/08/12/etcd原理以及基本技术概述铺垫/</id>
    <published>2018-08-12T01:00:22.000Z</published>
    <updated>2018-08-12T01:05:19.014Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>#原创内容，转载请注明出处</p></blockquote><p>博主地址：<a href="https://aronligithub.github.io/">https://aronligithub.github.io/</a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p><em>在部署kubernetes和calico网络的过程中，都需要有一个etcd数据库进行数据记录。这是部署的前置组件。</em></p></blockquote><h2 id="可以说部署etcd就是踏入使用kubernetes的第一步，那么下面就来了解一下什么是etcd？"><a href="#可以说部署etcd就是踏入使用kubernetes的第一步，那么下面就来了解一下什么是etcd？" class="headerlink" title="可以说部署etcd就是踏入使用kubernetes的第一步，那么下面就来了解一下什么是etcd？"></a><strong>可以说部署etcd就是踏入使用kubernetes的第一步，那么下面就来了解一下什么是etcd？</strong></h2><hr><a id="more"></a><h2 id="etcd的介绍"><a href="#etcd的介绍" class="headerlink" title="etcd的介绍"></a>etcd的介绍</h2><blockquote><p><em>etcd的官网</em></p></blockquote><p>作为要了解etcd这个数据库，那么<strong>第一步就是要知道从哪里去访问<a href="https://coreos.com/etcd/" target="_blank" rel="noopener">官网</a></strong>，再下一步就是<strong>如何从官网中获取自己需要的文档资料</strong>。</p><blockquote><p><img src="https://upload-images.jianshu.io/upload_images/13423234-b863190257d8501d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="etcd官网的相关信息"></p></blockquote><blockquote><p><em>etcd的特征</em><br><img src="https://upload-images.jianshu.io/upload_images/13423234-3d05fe507722fb93.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="etcd官网特征描述"></p></blockquote><hr><blockquote><p><em>etcd的技术概述</em></p></blockquote><p><strong>etcd是基于什么语言编写，通过什么算法保证数据集群同步的呢？</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">etcd是用Go编写的，它具有出色的跨平台支持，小型二进制文件和背后的优秀社区。etcd机器之间的通信通过Raft一致性算法处理。</span><br></pre></td></tr></table></figure></p><p><strong>etcd的主从集群是怎么形式的呢，例如<code>一主多从</code>，还是<code>多主多从</code>呢？</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">在etcd的集群中会选举出一位leader，其他etcd服务节点就会成为follower，在此过程其他follower会同步leader的数据。</span><br><span class="line">由于etcd集群必须能够选举出leader才能正常工作，所以部署的服务器数量必须是奇数，例如：</span><br><span class="line">1，3，5，7，9 的etcd节点数量。</span><br></pre></td></tr></table></figure></p><p><strong>如果etcd的节点数量为<code>偶数</code>会怎么样？</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">如果etcd的节点数量为偶数，例如：2，4，6，8 那么每一个节点都会收到同样的选举票数，就好像我们在班里选举班长一样，同样票数两个人是没法出leader的，谁也不服谁。</span><br><span class="line">那么这时候的结果当然就是etcd的集群无法工作了</span><br></pre></td></tr></table></figure></p><p><strong>那么如果etcd的节点数量为<code>奇数</code>，需要部署多少个节点最合适呢？</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">在考虑etcd读写效率以及稳定性的情况下，基本可以选型如下：</span><br><span class="line">只有单台或者两台服务器做kubernetes的服务集群，只需要部署一台etcd节点即可；</span><br><span class="line">只有三台或者四台服务器做kubernetes的服务集群，只需要部署三台etcd节点即可；</span><br><span class="line">只有五台或者六台服务器做kubernetes的服务集群，只需要部署五台etcd节点即可；</span><br></pre></td></tr></table></figure></p><p><strong>那么按照上面的公式推导，不就是etcd的节点越多越好？</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">其实不是越多越好，基本三台和五台服务器作为etcd的节点已经比较稳定的了。</span><br></pre></td></tr></table></figure></p><p><strong>那么如果任性就是要服务器很多呢？会出现什么样的情况？</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">如果服务器的台数越多，就可能会出现网络抖动，延时、不稳定的情况，具体视机房网络情况;</span><br><span class="line">如果服务器的台数越多，你就需要管理以及维护观察更多的服务器，在修复故障的时候需要注意更多的服务器数量；</span><br><span class="line">另外，因为etcd的集群所有的follower都需要从leader同步完数据之后，leader才能继续写入新的数据，所以如果etcd的节点数量过多，则会导致同步的时间变长、导致leader的写入效率降低</span><br></pre></td></tr></table></figure></p><p><strong>综上所述，部署etcd集群采用1，3，5，7的台数部署是比较合理的了</strong></p><blockquote><p><strong><em>下一篇章，我就开始演示单台etcd的部署以及ca证书的创建，在之后演示三台的etcd集群部署。</em></strong></p></blockquote><blockquote><p><img src="https://upload-images.jianshu.io/upload_images/13423234-1ff65c0431d6b516.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="leader会将数据同步给每个follower"></p></blockquote><blockquote><p>如果你想要看我写的总体系列文章目录介绍，可以点击<a href="https://www.jianshu.com/p/4a9c06ea570b" target="_blank" rel="noopener">kuberntes以及运维开发文章目录介绍</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;#原创内容，转载请注明出处&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;博主地址：&lt;a href=&quot;https://aronligithub.github.io/&quot;&gt;https://aronligithub.github.io/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;在部署kubernetes和calico网络的过程中，都需要有一个etcd数据库进行数据记录。这是部署的前置组件。&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;可以说部署etcd就是踏入使用kubernetes的第一步，那么下面就来了解一下什么是etcd？&quot;&gt;&lt;a href=&quot;#可以说部署etcd就是踏入使用kubernetes的第一步，那么下面就来了解一下什么是etcd？&quot; class=&quot;headerlink&quot; title=&quot;可以说部署etcd就是踏入使用kubernetes的第一步，那么下面就来了解一下什么是etcd？&quot;&gt;&lt;/a&gt;&lt;strong&gt;可以说部署etcd就是踏入使用kubernetes的第一步，那么下面就来了解一下什么是etcd？&lt;/strong&gt;&lt;/h2&gt;&lt;hr&gt;
    
    </summary>
    
      <category term="运维开发系列" scheme="https://aronligithub.github.io/categories/%E8%BF%90%E7%BB%B4%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="kubernetes系列" scheme="https://aronligithub.github.io/tags/kubernetes%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>kubernetes系列以及运维开发文章介绍</title>
    <link href="https://aronligithub.github.io/2018/08/11/kubernetes%E7%B3%BB%E5%88%97%E4%BB%A5%E5%8F%8A%E8%BF%90%E7%BB%B4%E5%BC%80%E5%8F%91%E6%96%87%E7%AB%A0%E4%BB%8B%E7%BB%8D/"/>
    <id>https://aronligithub.github.io/2018/08/11/kubernetes系列以及运维开发文章介绍/</id>
    <published>2018-08-11T15:04:22.000Z</published>
    <updated>2018-08-20T13:45:31.020Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>#原创内容，转载请注明出处</p></blockquote><p>博主地址：<a href="https://aronligithub.github.io/">https://aronligithub.github.io/</a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p> <em>kubernetes作为当前最流行的容器编排领先技术之一，如果作为运维的你不学习怎么行呢？</em><br><img src="https://upload-images.jianshu.io/upload_images/13423234-1ca8c290d56896ec.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p></blockquote><p>如果你继续往下看我后续写的博客内容可以<strong>学习到什么内容</strong>呢？</p><a id="more"></a><blockquote><p><em>etcd 系列</em></p><ul><li><a href="https://www.jianshu.com/p/e52f9204b7a9" target="_blank" rel="noopener">etcd原理以及基本技术概述铺垫</a></li><li><a href="https://www.jianshu.com/p/0fc3c5e78eff" target="_blank" rel="noopener">etcd单台部署，启用https以及ca自签名</a></li><li><a href="https://www.jianshu.com/p/33b5f47ababc" target="_blank" rel="noopener">etcd多台部署，启用https以及ca自签名</a></li></ul></blockquote><hr><blockquote><p><em>kubernetes系列</em></p><ul><li><a href="https://www.jianshu.com/p/198eb16b1902" target="_blank" rel="noopener">kubernetes基本技术概述铺垫</a></li><li><a href="https://www.jianshu.com/p/7d079a7b2330" target="_blank" rel="noopener">kubernetes v1.11 生产环境 二进制部署 全过程</a></li><li>Calico集成kubernetes的CNI网络部署全过程、启用CA自签名 </li></ul></blockquote><hr><blockquote><p><em>kubernetes组件系列</em></p><ul><li>CoreDNS 使用以及部署，统一管理kuernetes网络的DNS解析</li><li>Dnsmasq部署，统一管理物理机以及kubernetes所有网络的DNS解析</li><li>registry 私有仓库的部署，用于管理kubernetes集群中所需要的镜像</li><li>Traefik ingress使用以及部署，提供kubernetes服务入口  </li></ul></blockquote><hr><blockquote><p><em>docker系列</em></p><ul><li>docker的安装部署</li><li>镜像的定义以及构建、修改（该部分内容后续会单独编写一个docker系列进行讲解）</li></ul></blockquote><hr><blockquote><p><em>yum离线源系列</em></p><ul><li>针对政府级别无网络环境的centos7系列服务器集群如何无网络部署</li></ul></blockquote><hr><blockquote><p><em>网络代理系列</em></p><ul><li>针对政府级别无网络环境，如何对正向、反向请求进行代理</li><li>如何使用ssh隧道正向、反向端口绑定以及映射转发</li></ul></blockquote><hr><blockquote><p><em>自动化部署开发系列</em></p><ul><li>解决kubenernetes运维入门的门槛，开发使用kunernetes组件自动化部署</li><li>开发自动化部署docker </li><li>开发自动化部署etcd单台、三台脚本</li><li>开发自动化部署mysql主从</li><li>开发自动化部署dnsmasq</li></ul></blockquote><hr><blockquote><p><em>数据如何清洗、处理系列</em></p><ul><li>面对百万计杂乱图片，如何应对整理并上传文件服务</li><li>千万级数据清洗处理全过程</li></ul></blockquote><hr><blockquote><p><em>mysql系列</em></p><ul><li><a href="https://www.jianshu.com/p/be4d3141dfce" target="_blank" rel="noopener">处理java访问mysql连接数太多的错误</a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;#原创内容，转载请注明出处&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;博主地址：&lt;a href=&quot;https://aronligithub.github.io/&quot;&gt;https://aronligithub.github.io/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt; &lt;em&gt;kubernetes作为当前最流行的容器编排领先技术之一，如果作为运维的你不学习怎么行呢？&lt;/em&gt;&lt;br&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/13423234-1ca8c290d56896ec.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果你继续往下看我后续写的博客内容可以&lt;strong&gt;学习到什么内容&lt;/strong&gt;呢？&lt;/p&gt;
    
    </summary>
    
      <category term="运维开发系列" scheme="https://aronligithub.github.io/categories/%E8%BF%90%E7%BB%B4%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="kubernetes系列" scheme="https://aronligithub.github.io/tags/kubernetes%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>巧用VPN+XShell击破局域网服务器的TCP端口转发问题</title>
    <link href="https://aronligithub.github.io/2018/08/09/%E5%B7%A7%E7%94%A8VPN+XShell%E5%87%BB%E7%A0%B4%E5%B1%80%E5%9F%9F%E7%BD%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84TCP%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91%E9%97%AE%E9%A2%98/"/>
    <id>https://aronligithub.github.io/2018/08/09/巧用VPN+XShell击破局域网服务器的TCP端口转发问题/</id>
    <published>2018-08-09T15:43:22.000Z</published>
    <updated>2018-08-11T07:40:38.263Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>#原创内容，转载请注明出处</p></blockquote><p>博主地址：<a href="https://aronligithub.github.io/">https://aronligithub.github.io/</a></p><h2 id="工作需求"><a href="#工作需求" class="headerlink" title="工作需求"></a>工作需求</h2><hr><blockquote><p>在部署客户服务器的过程中，一开始客户<strong>无法提供VPN，无法提供公网IP映射服务器端口的情况下</strong>，作为需要部署服务的攻城狮们，<strong>该用什么样的方法来访问服务器，该用什么样的方法转发服务器部分TCP端口，提供办公室内的其他同事测试调用呢？</strong></p></blockquote><a id="more"></a><h2 id="网络环境拓扑"><a href="#网络环境拓扑" class="headerlink" title="网络环境拓扑"></a>网络环境拓扑</h2><hr><blockquote><p><img src="https://upload-images.jianshu.io/upload_images/13423234-70c9cee747c9c3dc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="拓扑示意图"></p></blockquote><h2 id="首先在客户提供办公室临时电脑安装teamview工具"><a href="#首先在客户提供办公室临时电脑安装teamview工具" class="headerlink" title="首先在客户提供办公室临时电脑安装teamview工具"></a>首先在客户提供办公室临时电脑安装teamview工具</h2><hr><blockquote><p><strong>使用teamview工具可以透过局域网直接提供远程桌面，方便后续进行远程执行操作<br>为了方便VPN调试，另外需要关闭防火墙，或者开放防火墙的ping回显</strong><br><img src="https://upload-images.jianshu.io/upload_images/13423234-2c32828f5b9ddb7e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="teamview远程桌面"></p></blockquote><p><strong>此时通过teamview的功能，你已经可以远程桌面了，但是如果将内网的服务器的服务端口提供给公司内网的开发调用测试使用呢？</strong></p><h2 id="在客户临时电脑使用XShell访问服务器集群"><a href="#在客户临时电脑使用XShell访问服务器集群" class="headerlink" title="在客户临时电脑使用XShell访问服务器集群"></a>在客户临时电脑使用XShell访问服务器集群</h2><hr><blockquote><p><strong>使用xshell的隧道，将服务器自身的22端口绑定至客户电脑的任意端口，后续提供公司内网堡垒机访问</strong><br><img src="https://upload-images.jianshu.io/upload_images/13423234-f6dfad86ff9d6755.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p></blockquote><h2 id="使用客户临时电脑访问登陆公司搭设的VPN服务"><a href="#使用客户临时电脑访问登陆公司搭设的VPN服务" class="headerlink" title="使用客户临时电脑访问登陆公司搭设的VPN服务"></a>使用客户临时电脑访问登陆公司搭设的VPN服务</h2><blockquote><p><strong>创建windows的PPTP的VPN连接【前提条件已搭设好VPN服务器了】</strong><br><img src="https://upload-images.jianshu.io/upload_images/13423234-6bb0c0d5481df941.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p></blockquote><h2 id="从公司软路由查看客户临时电脑访问VPN后，绑定的内网IP"><a href="#从公司软路由查看客户临时电脑访问VPN后，绑定的内网IP" class="headerlink" title="从公司软路由查看客户临时电脑访问VPN后，绑定的内网IP"></a>从公司软路由查看客户临时电脑访问VPN后，绑定的内网IP</h2><blockquote><p><strong>从软路由查看IP地址</strong><br><img src="https://upload-images.jianshu.io/upload_images/13423234-f164cd5b2a272aa6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p></blockquote><p><strong>这是IP地址是就是从客户电脑到公司内网的连同桥梁了，下面看看在公司内网是否能够ping通。</strong></p><h2 id="在公司内网堡垒机测试能够ping通客户电脑的VPN-IP地址"><a href="#在公司内网堡垒机测试能够ping通客户电脑的VPN-IP地址" class="headerlink" title="在公司内网堡垒机测试能够ping通客户电脑的VPN IP地址"></a>在公司内网堡垒机测试能够ping通客户电脑的VPN IP地址</h2><blockquote><p><img src="https://upload-images.jianshu.io/upload_images/13423234-4caa2dab0fe57830.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="从公司内网任意电脑ping"></p></blockquote><p><strong>只要能够ping通，说明这条VPN通道已经完全打通了，下一步就是访问客户端绑定服务器22端口的本地端口服务，访问登陆上服务器。</strong></p><h3 id="公司内网堡垒机测试telnet客户机的端口服务"><a href="#公司内网堡垒机测试telnet客户机的端口服务" class="headerlink" title="公司内网堡垒机测试telnet客户机的端口服务"></a>公司内网堡垒机测试telnet客户机的端口服务</h3><blockquote><p><img src="https://upload-images.jianshu.io/upload_images/13423234-55bb2e0139df3a5d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br><img src="https://upload-images.jianshu.io/upload_images/13423234-0353274eb61d1353.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p></blockquote><p><strong>其实这个时候只要能够访问上服务器，例如xshell的隧道功能，或者ssh隧道方法，可以将服务器内网的所有TCP服务全部都可以再次本地绑定，再二次或者三次提供公司内网的开发调用使用。在多年实践中，我经常是可以多层绑定，无限穿透的TCP和UDP各种端口服务的。下面就简单演示一下在公司内网使用xshell访问服务器。</strong></p><h2 id="在公司内网访问客户内网的服务器"><a href="#在公司内网访问客户内网的服务器" class="headerlink" title="在公司内网访问客户内网的服务器"></a>在公司内网访问客户内网的服务器</h2><blockquote><p><img src="https://upload-images.jianshu.io/upload_images/13423234-89292f50e31c041b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;#原创内容，转载请注明出处&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;博主地址：&lt;a href=&quot;https://aronligithub.github.io/&quot;&gt;https://aronligithub.github.io/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;工作需求&quot;&gt;&lt;a href=&quot;#工作需求&quot; class=&quot;headerlink&quot; title=&quot;工作需求&quot;&gt;&lt;/a&gt;工作需求&lt;/h2&gt;&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;在部署客户服务器的过程中，一开始客户&lt;strong&gt;无法提供VPN，无法提供公网IP映射服务器端口的情况下&lt;/strong&gt;，作为需要部署服务的攻城狮们，&lt;strong&gt;该用什么样的方法来访问服务器，该用什么样的方法转发服务器部分TCP端口，提供办公室内的其他同事测试调用呢？&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="运维技巧积累" scheme="https://aronligithub.github.io/categories/%E8%BF%90%E7%BB%B4%E6%8A%80%E5%B7%A7%E7%A7%AF%E7%B4%AF/"/>
    
    
      <category term="windows系列运维技巧" scheme="https://aronligithub.github.io/tags/windows%E7%B3%BB%E5%88%97%E8%BF%90%E7%BB%B4%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
</feed>
